{
    "project": {
        "name": "The lufylegend.js API",
        "description": "lufylegend是一个HTML5开源引擎， 它实现了利用仿ActionScript3.0的语法进行HTML5的开发，包含了LSprite，LBitmapData，LBitmap，LLoader，LURLLoader，LTextField，LEvent等多个AS开发人员熟悉的类， 支持Google Chrome，Firefox，Opera，IE9，IOS，Android等多种热门环境。利用lufylegend可以轻松的使用面向对象编程，并且可以配合Box2dWeb制作物理游戏， 另外它还内置了LTweenLite缓动类等非常实用的功能，现在开始使用它吧，它可以让你更快的进入HTML5的世界！",
        "version": "1.10.1",
        "date": "2016年03月28日",
        "url": "http://lufylegend.com/lufylegend"
    },
    "files": {
        "api/FullScreen.js": {
            "name": "api/FullScreen.js",
            "modules": {},
            "classes": {
                "全屏设置": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "api/LMvc.js": {
            "name": "api/LMvc.js",
            "modules": {},
            "classes": {
                "lufylegend.mvc": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "api/OldApi.js": {
            "name": "api/OldApi.js",
            "modules": {},
            "classes": {
                "旧版API": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "api/Q_and_A.js": {
            "name": "api/Q_and_A.js",
            "modules": {},
            "classes": {
                "Q & A (常见问题)": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "display/FPS.js": {
            "name": "display/FPS.js",
            "modules": {},
            "classes": {
                "FPS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "display/LAnimation.js": {
            "name": "display/LAnimation.js",
            "modules": {},
            "classes": {
                "LAnimation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "display/LAnimationTimeline.js": {
            "name": "display/LAnimationTimeline.js",
            "modules": {},
            "classes": {
                "LAnimationTimeline": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "display/LBitmap.js": {
            "name": "display/LBitmap.js",
            "modules": {},
            "classes": {
                "LBitmap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "display/LBitmapData.js": {
            "name": "display/LBitmapData.js",
            "modules": {},
            "classes": {
                "LBitmapData": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "display/LBlendMode.js": {
            "name": "display/LBlendMode.js",
            "modules": {},
            "classes": {
                "LBlendMode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "display/LButton.js": {
            "name": "display/LButton.js",
            "modules": {},
            "classes": {
                "LButton": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "display/LDisplayObject.js": {
            "name": "display/LDisplayObject.js",
            "modules": {},
            "classes": {
                "LDisplayObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "display/LDisplayObjectContainer.js": {
            "name": "display/LDisplayObjectContainer.js",
            "modules": {},
            "classes": {
                "LDisplayObjectContainer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "display/LGraphics.js": {
            "name": "display/LGraphics.js",
            "modules": {},
            "classes": {
                "LGraphics": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "display/LInteractiveObject.js": {
            "name": "display/LInteractiveObject.js",
            "modules": {},
            "classes": {
                "LInteractiveObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "display/LLoader.js": {
            "name": "display/LLoader.js",
            "modules": {},
            "classes": {
                "LLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "display/LShape.js": {
            "name": "display/LShape.js",
            "modules": {},
            "classes": {
                "LShape": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "display/LSprite.js": {
            "name": "display/LSprite.js",
            "modules": {},
            "classes": {
                "LSprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "display/LStageAlign.js": {
            "name": "display/LStageAlign.js",
            "modules": {},
            "classes": {
                "LStageAlign": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "display/LStageScaleMode.js": {
            "name": "display/LStageScaleMode.js",
            "modules": {},
            "classes": {
                "LStageScaleMode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "events/LEvent.js": {
            "name": "events/LEvent.js",
            "modules": {},
            "classes": {
                "LEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "events/LEventDispatcher.js": {
            "name": "events/LEventDispatcher.js",
            "modules": {},
            "classes": {
                "LEventDispatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "events/LFocusEvent.js": {
            "name": "events/LFocusEvent.js",
            "modules": {},
            "classes": {
                "LFocusEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "events/LKeyboardEvent.js": {
            "name": "events/LKeyboardEvent.js",
            "modules": {},
            "classes": {
                "LKeyboardEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "events/LMouseEvent.js": {
            "name": "events/LMouseEvent.js",
            "modules": {},
            "classes": {
                "LMouseEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "events/LMouseEventContainer.js": {
            "name": "events/LMouseEventContainer.js",
            "modules": {},
            "classes": {
                "LMouseEventContainer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "events/LTextEvent.js": {
            "name": "events/LTextEvent.js",
            "modules": {},
            "classes": {
                "LTextEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "events/LTimerEvent.js": {
            "name": "events/LTimerEvent.js",
            "modules": {},
            "classes": {
                "LTimerEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "filters/LBitmapFilter.js": {
            "name": "filters/LBitmapFilter.js",
            "modules": {},
            "classes": {
                "LBitmapFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "filters/LColorMatrixFilter.js": {
            "name": "filters/LColorMatrixFilter.js",
            "modules": {},
            "classes": {
                "LColorMatrixFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "filters/LConvolutionFilter.js": {
            "name": "filters/LConvolutionFilter.js",
            "modules": {},
            "classes": {
                "LConvolutionFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "filters/LDropShadowFilter.js": {
            "name": "filters/LDropShadowFilter.js",
            "modules": {},
            "classes": {
                "LDropShadowFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "geom/LColorTransform.js": {
            "name": "geom/LColorTransform.js",
            "modules": {},
            "classes": {
                "LColorTransform": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "geom/LMatrix.js": {
            "name": "geom/LMatrix.js",
            "modules": {},
            "classes": {
                "LMatrix": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "geom/LPoint.js": {
            "name": "geom/LPoint.js",
            "modules": {},
            "classes": {
                "LPoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "geom/LRectangle.js": {
            "name": "geom/LRectangle.js",
            "modules": {},
            "classes": {
                "LRectangle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "geom/LTransform.js": {
            "name": "geom/LTransform.js",
            "modules": {},
            "classes": {
                "LTransform": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "geom/LVec2.js": {
            "name": "geom/LVec2.js",
            "modules": {},
            "classes": {
                "LVec2": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LButtonSample-0.1.0.js": {
            "name": "lib/ui/LButtonSample-0.1.0.js",
            "modules": {},
            "classes": {
                "UI:LButtonSample1": 1,
                "UI:LButtonSample2": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LCheckBox-0.1.0.js": {
            "name": "lib/ui/LCheckBox-0.1.0.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LCheckBox-0.1.1.js": {
            "name": "lib/ui/LCheckBox-0.1.1.js",
            "modules": {},
            "classes": {
                "UI:LCheckBox": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LComboBox-0.1.0.js": {
            "name": "lib/ui/LComboBox-0.1.0.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LComboBox-0.1.1.js": {
            "name": "lib/ui/LComboBox-0.1.1.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LComboBox-0.1.2.js": {
            "name": "lib/ui/LComboBox-0.1.2.js",
            "modules": {},
            "classes": {
                "UI:LComboBox": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LListView-0.1.0.js": {
            "name": "lib/ui/LListView-0.1.0.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LListView-0.1.1.js": {
            "name": "lib/ui/LListView-0.1.1.js",
            "modules": {},
            "classes": {
                "UI:LListView": 1,
                "UI:LListScrollBar": 1,
                "UI:LListChildView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LMenubar-0.1.0.js": {
            "name": "lib/ui/LMenubar-0.1.0.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LMenubar-0.1.1.js": {
            "name": "lib/ui/LMenubar-0.1.1.js",
            "modules": {},
            "classes": {
                "UI:LMenubar": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LMessageBox-0.1.0.js": {
            "name": "lib/ui/LMessageBox-0.1.0.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LMessageBox-0.1.1.js": {
            "name": "lib/ui/LMessageBox-0.1.1.js",
            "modules": {},
            "classes": {
                "UI:LMessageBox": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LPanel-0.1.0.js": {
            "name": "lib/ui/LPanel-0.1.0.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LPanel-0.1.1.js": {
            "name": "lib/ui/LPanel-0.1.1.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LPanel-0.1.2.js": {
            "name": "lib/ui/LPanel-0.1.2.js",
            "modules": {},
            "classes": {
                "UI:LPanel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LRadio-0.1.0.js": {
            "name": "lib/ui/LRadio-0.1.0.js",
            "modules": {},
            "classes": {
                "UI:LRadioChild": 1,
                "UI:LRadio": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LRange-0.1.0.js": {
            "name": "lib/ui/LRange-0.1.0.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LRange-0.1.1.js": {
            "name": "lib/ui/LRange-0.1.1.js",
            "modules": {},
            "classes": {
                "UI:LRange": 1,
                "LRange": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LScrollbar-0.1.0.js": {
            "name": "lib/ui/LScrollbar-0.1.0.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LScrollbar-0.1.1.js": {
            "name": "lib/ui/LScrollbar-0.1.1.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LScrollbar-0.1.2.js": {
            "name": "lib/ui/LScrollbar-0.1.2.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LScrollbar-0.1.4.js": {
            "name": "lib/ui/LScrollbar-0.1.4.js",
            "modules": {},
            "classes": {
                "UI:LScrollbar": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LTable-0.1.0.js": {
            "name": "lib/ui/LTable-0.1.0.js",
            "modules": {},
            "classes": {
                "UI:LTable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LTreeWidget-0.1.0.js": {
            "name": "lib/ui/LTreeWidget-0.1.0.js",
            "modules": {},
            "classes": {
                "UI:LTreeWidget": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LWindow-0.1.0.js": {
            "name": "lib/ui/LWindow-0.1.0.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LWindow-0.1.1.js": {
            "name": "lib/ui/LWindow-0.1.1.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/ui/LWindow-0.1.2.js": {
            "name": "lib/ui/LWindow-0.1.2.js",
            "modules": {},
            "classes": {
                "UI:LWindow": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/InteractivePNG-0.1.0.js": {
            "name": "lib/InteractivePNG-0.1.0.js",
            "modules": {},
            "classes": {
                "InteractivePNG": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/LBox2d-0.4.0.js": {
            "name": "lib/LBox2d-0.4.0.js",
            "modules": {},
            "classes": {
                "LBox2d": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/LFlash-0.1.0.js": {
            "name": "lib/LFlash-0.1.0.js",
            "modules": {},
            "classes": {
                "LFlash": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/LQuadTree-0.1.0.js": {
            "name": "lib/LQuadTree-0.1.0.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/LQuadTree-0.1.1.js": {
            "name": "lib/LQuadTree-0.1.1.js",
            "modules": {},
            "classes": {
                "LQuadTree": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/LTransitionManager-0.1.0.js": {
            "name": "lib/LTransitionManager-0.1.0.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/LTransitionManager-0.1.1.js": {
            "name": "lib/LTransitionManager-0.1.1.js",
            "modules": {},
            "classes": {
                "LTransition": 1,
                "LTransitionManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/LoadingSample1-0.1.0.js": {
            "name": "lib/LoadingSample1-0.1.0.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/LoadingSample1-0.1.1.js": {
            "name": "lib/LoadingSample1-0.1.1.js",
            "modules": {},
            "classes": {
                "LoadingSample": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "media/LMedia.js": {
            "name": "media/LMedia.js",
            "modules": {},
            "classes": {
                "LMedia": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "media/LSound.js": {
            "name": "media/LSound.js",
            "modules": {},
            "classes": {
                "LSound(LMedia)": 1,
                "LSound(LWebAudio)": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "media/LStageWebView.js": {
            "name": "media/LStageWebView.js",
            "modules": {},
            "classes": {
                "LStageWebView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "media/LVideo.js": {
            "name": "media/LVideo.js",
            "modules": {},
            "classes": {
                "LVideo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "media/LWebAudio.js": {
            "name": "media/LWebAudio.js",
            "modules": {},
            "classes": {
                "LWebAudio": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "net/LAjax.js": {
            "name": "net/LAjax.js",
            "modules": {},
            "classes": {
                "LAjax": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "net/LFontLoader.js": {
            "name": "net/LFontLoader.js",
            "modules": {},
            "classes": {
                "LFontLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "net/LURLLoader.js": {
            "name": "net/LURLLoader.js",
            "modules": {},
            "classes": {
                "LURLLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "system/LLoadManage.js": {
            "name": "system/LLoadManage.js",
            "modules": {},
            "classes": {
                "LLoadManage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "text/LStyleSheet.js": {
            "name": "text/LStyleSheet.js",
            "modules": {},
            "classes": {
                "LStyleSheet": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "text/LTextField.js": {
            "name": "text/LTextField.js",
            "modules": {},
            "classes": {
                "LTextField": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "transitions/LEasing.js": {
            "name": "transitions/LEasing.js",
            "modules": {},
            "classes": {
                "LEasing": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "transitions/LTweenLite.js": {
            "name": "transitions/LTweenLite.js",
            "modules": {},
            "classes": {
                "LTweenLiteChild": 1,
                "LTweenLite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "ui/LMultitouch.js": {
            "name": "ui/LMultitouch.js",
            "modules": {},
            "classes": {
                "LMultitouch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "ui/LMultitouchInputMode.js": {
            "name": "ui/LMultitouchInputMode.js",
            "modules": {},
            "classes": {
                "LMultitouchInputMode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "utils/Function.js": {
            "name": "utils/Function.js",
            "modules": {},
            "classes": {
                "全局函数": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "utils/LConstant.js": {
            "name": "utils/LConstant.js",
            "modules": {},
            "classes": {
                "全局变量": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "utils/LGlobal.js": {
            "name": "utils/LGlobal.js",
            "modules": {},
            "classes": {
                "LGlobal": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "utils/LObject.js": {
            "name": "utils/LObject.js",
            "modules": {},
            "classes": {
                "LObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "utils/LTimer.js": {
            "name": "utils/LTimer.js",
            "modules": {},
            "classes": {
                "LTimer": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "全屏设置": {
            "name": "全屏设置",
            "shortname": "全屏设置",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "api/FullScreen.js",
            "line": 1,
            "description": "<p>设置全屏时，首先需要设置舞台的缩放模式<a href=\"LStageScaleMode.html\">LGlobal.stageScale</a>。</p>\n<p>设置完舞台的缩放模式之后，调用<a href=\"LGlobal.html#method_screen\">LSystem.screen(LStage.FULL_SCREEN);</a>就可以实现全屏</p>\n<p>※对于手机网页，需要在head标签里加上下面标签。</p>\n<pre class=\"code prettyprint prettyprinted\"><code><span class=\"tag\">&lt;meta</span><span class=\"pln\"> </span><span class=\"atn\">name</span><span class=\"pun\">=</span><span class=\"atv\">\"viewport\"</span><span class=\"pln\"> </span><span class=\"atn\">content</span><span class=\"pun\">=</span><span class=\"atv\">\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\"</span><span class=\"tag\">&gt;</span></code></pre>",
            "since": "1.6.0",
            "access": "public",
            "tagname": ""
        },
        "lufylegend.mvc": {
            "name": "lufylegend.mvc",
            "shortname": "lufylegend.mvc",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "api/LMvc.js",
            "line": 1,
            "description": "<p>lufylegend专用MVC框架。</p>\n<p><a href=\"../../mvc/index.html\">点击这里看lufylegend.mvc文档</a>。</p>",
            "since": "1.8.4",
            "access": "public",
            "tagname": ""
        },
        "旧版API": {
            "name": "旧版API",
            "shortname": "旧版API",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "api/OldApi.js",
            "line": 1,
            "description": "<p>新版API已经基本完整，如果您习惯旧版本的API，旧版api地址如下：</p>\n<p><a href=\"http://lufylegend.com/lufylegend/oldapi\" target=\"_blank\">http://lufylegend.com/lufylegend/oldapi</a></p>",
            "since": "1.9.0",
            "access": "public",
            "tagname": ""
        },
        "Q & A (常见问题)": {
            "name": "Q & A (常见问题)",
            "shortname": "Q & A (常见问题)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "api/Q_and_A.js",
            "line": 1,
            "description": "<p>开发者常见问题</p>"
        },
        "FPS": {
            "name": "FPS",
            "shortname": "FPS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "display/FPS.js",
            "line": 1,
            "description": "<p>确认FPS</p>\n<p>各属性如下：</p>\n<table>\n<tr><th>属性</th><th>说明</th></tr>\n<tr><td>FPS</td><td>每秒传输帧数(Frames Per Second)。</td></tr>\n<tr><td>DisplayObject</td><td>画面中有属性变换的LDisplayObject对象的数量 / 画面中LDisplayObject对象的总数量。</td></tr>\n<tr><td>Draw image</td><td>画面中LBitmap对象的总数量。</td></tr>\n<tr><td>Draw graphics</td><td>画面中LGraphics的绘图次数。</td></tr>\n<tr><td>Draw text</td><td>画面中LTextField对象的总数量。</td></tr>\n</table>",
            "extends": "LSprite",
            "is_constructor": 1,
            "example": [
                "\n\taddChild(new FPS());"
            ],
            "examplelink": "<p><a href=\"../../../api/FPS/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.7.6",
            "access": "public",
            "tagname": ""
        },
        "LAnimation": {
            "name": "LAnimation",
            "shortname": "LAnimation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "display/LAnimation.js",
            "line": 1,
            "description": "创建一个新的 LAnimation 实例。\nLAnimation 类可以利用一组精灵图表来制作动画。",
            "extends": "LSprite",
            "is_constructor": 1,
            "params": [
                {
                    "name": "layer",
                    "description": "一个LSprite对象。",
                    "type": "LSprite"
                },
                {
                    "name": "data",
                    "description": "一个LBitmapData对象，既包含一组或多组frame的精灵图表。或者是一个LBitmapData对象的数组。",
                    "type": "LBitmapData | Array"
                },
                {
                    "name": "list",
                    "description": "<p>每个frame的属性值。</p>\n<p>每个数组元素格式为{x : 0, y : 0, width : 100, height : 100, sx : 0, sy : 0, dataIndex : 0}。 x, y, width, height分别对应LBitmapData对象的属性值，sx, sy是图像显示时的起始点坐标，当data是一个LBitmapData对象的数组的时候，dataIndex表示该数组的索引，用来指定使用哪个LBitmapData对象。</p>\n<p>如果精灵图表中的每个frame大小都是一样的，你可以使用LGlobal.divideCoordinate函数来直接对图表进行分割。</p>",
                    "type": "Array"
                }
            ],
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tvar loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata);\n\t\tloader.load(\"player.png\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata(event){\n\t\tvar backLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tvar list = LGlobal.divideCoordinate(480,630,3,4);\n\t\tvar data = new LBitmapData(event.target,0,0,120,210);\n\t\tplayer = new LAnimation(backLayer,data,list);\n\t\tbackLayer.addEventListener(LEvent.ENTER_FRAME,onframe);\n\t}\n\tfunction onframe(){\n\t\tplayer.onframe();\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LAnimation/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.3.1",
            "access": "public",
            "tagname": ""
        },
        "LAnimationTimeline": {
            "name": "LAnimationTimeline",
            "shortname": "LAnimationTimeline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "display/LAnimationTimeline.js",
            "line": 1,
            "description": "创建一个新的 LAnimationTimeline 实例。\nLAnimationTimeline类在LAnimation 类的基础上提供了很多扩展。LAnimation 类需要调用本身的onframe函数才能播放动画，而LAnimationTimeline类则不需要。",
            "extends": "LAnimation",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "一个LBitmapData对象，既包含一组或多组frame的精灵图表。或者是一个LBitmapData对象的数组。",
                    "type": "LBitmapData | Array"
                },
                {
                    "name": "list",
                    "description": "<p>每个frame的属性值。</p>\n<p>每个数组元素格式为{x : 0, y : 0, width : 100, height : 100, sx : 0, sy : 0, dataIndex : 0}。 x, y, width, height分别对应LBitmapData对象的属性值，sx, sy是图像显示时的起始点坐标，当data是一个LBitmapData对象的数组的时候，dataIndex表示该数组的索引，用来指定使用哪个LBitmapData对象。</p>\n<p>＊如果需要直接给对象设定label，可以给元素设定label属性，设定label属性时候，可以同时设定isMirror属性。</p>\n<p>＊也可以给元素设定mirror（true或者false）属性，设定mirror属性的时候需要同时给所有元素设定mirror属性，如果元素和label同时设定了mirror属性，则优先使用元素中设定的mirror属性。</p>\n<p>如果精灵图表中的每个frame大小都是的，你可以使用LGlobal.divideCoordinate函数来直接对图表进行分割。</p>",
                    "type": "Array"
                }
            ],
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tvar imgData = [\n\t\t{name : \"player-0\", path : \"./player-0.png\"}, \n\t\t{name : \"player-1\", path : \"./player-1.png\"}, \n\t\t{name : \"player-2\", path : \"./player-2.png\"}, \n\t\t{name : \"player-3\", path : \"./player-3.png\"}, \n\t\t{name : \"player-4\", path : \"./player-4.png\"}\n\t];\n\tfunction main () {\n\t\tLLoadManage.load(imgData, null, gameInit);\n\t}\n\tfunction gameInit(result) {\n\t\tvar list = LGlobal.divideCoordinate(480, 210, 1, 4);\n\t\tvar data = new LBitmapData(result[\"player-0\"], 0, 0, 120, 210);\n\t\tvar playerLeft = new LAnimationTimeline(data, list);\n\t\taddChild(playerLeft);\n\t\t\n\t\tvar datas = [];\n\t\tvar listChild = [];\n\t\tfor (var i = 0; i < 4; i++) {\n\t\t\tdatas.push(new LBitmapData(result[\"player-\" + (i + 1)]));\n\t\t\tlistChild.push({dataIndex : i, x : 0, y : 0, width : 120, height : 210, sx : 0, sy : 0});\n\t\t}\n\t\tvar playerRight = new LAnimationTimeline(datas, [listChild]);\n\t\tplayerRight.x = 200;\n\t\taddChild(playerRight);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LAnimationTimeline/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.8.0",
            "access": "public",
            "tagname": ""
        },
        "LBitmap": {
            "name": "LBitmap",
            "shortname": "LBitmap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "display/LBitmap.js",
            "line": 1,
            "description": "初始化 LBitmap 对象以引用指定的 LBitmapData 对象。\nLBitmap 类表示用于表示位图图像的显示对象。这些图像可以是使用 LLoader 类加载的图像，也可以是使用 LBitmap() 构造函数创建的图像。\n利用 LBitmap() 构造函数，可以创建包含对 LBitmapData 对象的引用的 LBitmap 对象。创建了 LBitmap 对象后，使用父实例的 addChild() 或 addChildAt() 方法将位图放在显示列表中。\n一个 LBitmap 对象可在若干 LBitmap 对象之中共享其 LBitmapData 引用，与转换属性或旋转属性无关。由于能够创建引用相同 LBitmapData 对象的多个 LBitmap 对象，因此，多个显示对象可以使用相同的复杂 LBitmapData 对象，而不会因为每个显示对象实例使用一个 LBitmapData 对象而产生内存开销。\nLBitmap 对象可通过以下两种方式之一将 LBitmapData 对象绘制到屏幕上：使用矢量渲染器作为填充位图形状，或使用更快的像素复制例程。像素复制例程的速度比矢量渲染器要快很多。\n注意：LBitmap 类不是 InteractiveObject 类的子类，因此它无法调度鼠标事件。但是，可以使用包含 LBitmap 对象的显示对象容器的 addEventListener() 方法。",
            "extends": "LDisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "bitmapData",
                    "description": "被引用的 LBitmapData 对象。",
                    "type": "LBitmapData"
                }
            ],
            "example": [
                "\n\tLinit(50, \"mylegend\", 800, 480, main);\n\tfunction main () {\n\t    var loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata); \n\t\tloader.load(\"lufylegend.js.png\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata (event) {\n\t\tvar bitmapdata = new LBitmapData(event.target);  \n\t\tvar bitmap = new LBitmap(bitmapdata);\n\t\taddChild(bitmap);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LBitmap/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": ""
        },
        "LBitmapData": {
            "name": "LBitmapData",
            "shortname": "LBitmapData",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "display/LBitmapData.js",
            "line": 1,
            "description": "<p>创建一个具有指定的宽度和高度的 LBitmapData 对象。</p>\n<p>使用 LBitmapData 类，您可以处理 LBitmap 对象的数据（像素）。可以使用 LBitmapData 类的方法创建任意大小的Image对象，并在运行时采用多种方式操作这些图像。也可以访问使用 LLoader 类加载的Image对象。</p>",
            "extends": "LObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "image",
                    "description": "一个Image对象。",
                    "type": "Image"
                },
                {
                    "name": "x",
                    "description": "Image可视范围x坐标（该参数可省略）。",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "Image可视范围y坐标（该参数可省略）。",
                    "type": "Float"
                },
                {
                    "name": "width",
                    "description": "Image可视范围宽（该参数可省略）。",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "Image可视范围高（该参数可省略）。",
                    "type": "Float"
                },
                {
                    "name": "dataType",
                    "description": "指定数据格式，可以使用LBitmapData.DATA_IMAGE（Image对象）和LBitmapData.DATA_CANVAS（Canvas对象）（该参数可省略）。",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tLinit(50, \"mylegend\", 800, 480, main);\n\tfunction main () {\n\t    var loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata);\n\t\tloader.load(\"lufylegend.js.png\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata (event) {\n\t\tvar bitmapdata = new LBitmapData(event.target);\n\t\tvar bitmap = new LBitmap(bitmapdata);\n\t\taddChild(bitmap);\n\n\t\tvar bitmapdata2 = new LBitmapData(\"#FF0000\", 0, 0, 100, 100);\n\t\tvar bitmap2 = new LBitmap(bitmapdata2);\n\t\tbitmap2.x = 200;\n\t\taddChild(bitmap2);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LBitmapData/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": ""
        },
        "LBlendMode": {
            "name": "LBlendMode",
            "shortname": "LBlendMode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "display/LBlendMode.js",
            "line": 1,
            "description": "提供混合模式可视效果的常量值的类。",
            "is_constructor": 1,
            "example": [
                "\n\tvar imgLayer = new LSprite();\n\tvar back = new LBitmap(new LBitmapData(dataList[\"back\"]));\n\timgLayer.addChild(back);\n\tvar img = new LBitmap(new LBitmapData(dataList[\"img\"]));\n\timgLayer.addChild(img);\n\timg.blendMode = LBlendMode.LIGHTER;"
            ],
            "examplelink": "<p><a href=\"../../../api/LBlendMode/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.8.0",
            "access": "public",
            "tagname": ""
        },
        "LButton": {
            "name": "LButton",
            "shortname": "LButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "display/LButton.js",
            "line": 1,
            "description": "使用 LButton 类，您可以控制按钮元件的所有实例。",
            "extends": "LSprite",
            "is_constructor": 1,
            "params": [
                {
                    "name": "upState",
                    "description": "LButton 弹起状态的初始值。",
                    "type": "LDisplayObject"
                },
                {
                    "name": "overState",
                    "description": "LButton 经过状态的初始值。",
                    "type": "LDisplayObject"
                },
                {
                    "name": "downState",
                    "description": "LButton 按下状态的初始值。",
                    "type": "LDisplayObject"
                },
                {
                    "name": "disableState",
                    "description": "LButton 不可用状态的初始值。",
                    "type": "LDisplayObject"
                }
            ],
            "example": [
                "\n\tvar bitmapDataUp = new LBitmapData(result[\"ok_button\"],0,0,98,48);\n\tvar bitmapUp = new LBitmap(bitmapDataUp);\n\tvar bitmapDataOver = new LBitmapData(result[\"ok_button\"],0,48,98,48);\n\tvar bitmapOver = new LBitmap(bitmapDataOver);\n\tvar button02 = new LButton(bitmapUp,bitmapOver);\n\tbackLayer.addChild(button02);"
            ],
            "examplelink": "<p><a href=\"../../../api/LButton/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": ""
        },
        "LDisplayObject": {
            "name": "LDisplayObject",
            "shortname": "LDisplayObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "display/LDisplayObject.js",
            "line": 1,
            "description": "<p>LDisplayObject 类是可放在显示列表中的所有对象的基类。该显示列表管理运行时中显示的所有对象。使用 LDisplayObjectContainer 类排列显示列表中的显示对象。LDisplayObjectContainer 对象可以有子显示对象，而其他显示对象（如 LShape 和 LTextField 对象）是“叶”节点，只有父级和同级，没有子级。</p>\n<p>LDisplayObject 类支持基本功能（如对象的 x 和 y 位置），也支持更高级的对象属性（如它的转换矩阵）。</p>\n<p>LDisplayObject 是一种抽象基类；因此，不能直接调用 LDisplayObject。</p>\n<p>所有显示对象都继承自 LDisplayObject 类。</p>",
            "extends": "LEventDispatcher",
            "is_constructor": 1,
            "since": "1.6.0",
            "access": "public",
            "tagname": ""
        },
        "LDisplayObjectContainer": {
            "name": "LDisplayObjectContainer",
            "shortname": "LDisplayObjectContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "display/LDisplayObjectContainer.js",
            "line": 1,
            "description": "<p>LDisplayObjectContainer 类是可用作显示列表中显示对象容器的所有对象的基类。该显示列表管理 运行时中显示的所有对象。使用 LDisplayObjectContainer 类排列显示列表中的显示对象。每个 LDisplayObjectContainer 对象都有自己的子级列表，用于组织对象的 Z 轴顺序。Z 轴顺序是由前至后的顺序，可确定哪个对象绘制在前，哪个对象绘制在后等。</p>\n<p>LDisplayObjectContainer 是一种抽象基类；因此，不能直接调用 LDisplayObjectContainer。</p>\n<p>LDisplayObjectContainer 类是可以包含子对象的所有对象的抽象基类。无法直接对其进行实例化。</p>",
            "extends": "LInteractiveObject",
            "is_constructor": 1,
            "since": "1.9.0",
            "access": "public",
            "tagname": ""
        },
        "LGraphics": {
            "name": "LGraphics",
            "shortname": "LGraphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "display/LGraphics.js",
            "line": 1,
            "description": "LGraphics 类包含一组可用来创建矢量形状的方法。支持绘制的显示对象包括 LSprite 和 LShape 对象。这些类中的每一个类都包括 graphics 属性，该属性是一个 LGraphics 对象。\n以下是为便于使用而提供的一些辅助函数：drawRect()、drawRoundRect()、drawArc() 和 drawEllipse()。",
            "extends": "LObject",
            "is_constructor": 1,
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tvar shape = new LShape();\n\t\taddChild(shape);\n\t\tshape.graphics.drawRect(2, \"#ff0000\", [10, 10, 50, 100], true, \"#880088\");\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": ""
        },
        "LInteractiveObject": {
            "name": "LInteractiveObject",
            "shortname": "LInteractiveObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "display/LInteractiveObject.js",
            "line": 1,
            "description": "<p>LInteractiveObject 类是用户可以使用鼠标与之交互的所有显示对象的抽象基类。不能直接实例化 LInteractiveObject 类。</p>",
            "extends": "LDisplayObject",
            "is_constructor": 1,
            "since": "1.9.0",
            "access": "public",
            "tagname": ""
        },
        "LLoader": {
            "name": "LLoader",
            "shortname": "LLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "display/LLoader.js",
            "line": 1,
            "description": "LLoader 类可用于加载图像（JPG、PNG 或 GIF）文件。使用 load() 方法来启动加载。",
            "extends": "LEventDispatcher",
            "is_constructor": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": ""
        },
        "LShape": {
            "name": "LShape",
            "shortname": "LShape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "display/LShape.js",
            "line": 1,
            "description": "创建新的 LShape 对象。\nLShape 类包括 graphics 属性，该属性使您可以从 LGraphics 类访问方法。",
            "extends": "LInteractiveObject",
            "is_constructor": 1,
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tvar shape = new LShape();\n\t\taddChild(shape);\n\t\tshape.graphics.drawRect(2, \"#ff0000\", [10, 10, 50, 100], true, \"#880088\");\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LShape/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.8.5",
            "access": "public",
            "tagname": ""
        },
        "LSprite": {
            "name": "LSprite",
            "shortname": "LSprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "display/LSprite.js",
            "line": 1,
            "description": "创建一个新的 LSprite 实例。\nLSprite 类是基本显示列表构造块：一个可显示图形并且也可包含子项的显示列表节点。",
            "extends": "LDisplayObjectContainer",
            "is_constructor": 1,
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tvar layer = new LSprite();\n\t\taddChild(layer);\n\t\t\n\t\tvar bmd = new LBitmapData(\"#FF0000\", 0, 0, 100, 100);\n\t\tvar bm = new LBitmap(bmd);\n\t\tlayer.addChild(bm);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LSprite/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": ""
        },
        "LStageAlign": {
            "name": "LStageAlign",
            "shortname": "LStageAlign",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "display/LStageAlign.js",
            "line": 1,
            "description": "LStageAlign 类提供了舞台的对其方式。",
            "is_constructor": 1,
            "example": [
                "\n\tLInit(50, \"legend\", 240, 240, main);\n\tfunction main () {\n\t\tLGlobal.align = LStageAlign.BOTTOM_MIDDLE;\n\t\tLGlobal.stageScale = LStageScaleMode.NO_SCALE;\n\t\tLSystem.screen(LStage.FULL_SCREEN);\n\t\tvar loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata); \n\t\tloader.load(\"face.jpg\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata (event) {\n\t\tvar bitmapdata = new LBitmapData(event.currentTarget);  \n\t\tvar bitmap = new LBitmap(bitmapdata);\n\t\taddChild(bitmap);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LStageAlign/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.8.6",
            "access": "public",
            "tagname": ""
        },
        "LStageScaleMode": {
            "name": "LStageScaleMode",
            "shortname": "LStageScaleMode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "display/LStageScaleMode.js",
            "line": 1,
            "description": "一个 LStageScaleMode 类中指定要使用哪种缩放模式的值。",
            "is_constructor": 1,
            "example": [
                "\n\tLInit(50, \"legend\", 240, 240, main);\n\tfunction main () {\n\t\tLGlobal.align = LStageAlign.BOTTOM_MIDDLE;\n\t\tLGlobal.stageScale = LStageScaleMode.SHOW_ALL;\n\t\tLSystem.screen(LStage.FULL_SCREEN);\n\t\tvar loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata); \n\t\tloader.load(\"face.jpg\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata (event) {\n\t\tvar bitmapdata = new LBitmapData(event.currentTarget);  \n\t\tvar bitmap = new LBitmap(bitmapdata);\n\t\taddChild(bitmap);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LStageScaleMode/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.8.0",
            "access": "public",
            "tagname": ""
        },
        "LEvent": {
            "name": "LEvent",
            "shortname": "LEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "events/LEvent.js",
            "line": 1,
            "description": "<p>LEvent 类作为创建 Event 对象的基类，当发生事件时，Event 对象将作为参数传递给事件侦听器。</p>",
            "is_constructor": 1,
            "since": "1.9.0",
            "access": "public",
            "tagname": ""
        },
        "LEventDispatcher": {
            "name": "LEventDispatcher",
            "shortname": "LEventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "events/LEventDispatcher.js",
            "line": 1,
            "description": "<p>LEventDispatcher 类是可调度事件的所有类的基类。</p>",
            "extends": "LObject",
            "is_constructor": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": ""
        },
        "LFocusEvent": {
            "name": "LFocusEvent",
            "shortname": "LFocusEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "events/LFocusEvent.js",
            "line": 1,
            "description": "<p>用户将焦点从显示列表中的一个LTextField对象更改到另一个LTextField对象时，对象将调度 LFocusEvent 对象。</p>\n<p>※ LGlobal.stage作为舞台，也可以添加LFocusEvent事件，LFocusEvent.FOCUS_IN表示鼠标(或手指)进入舞台，反之，LFocusEvent.FOCUS_OUT则指的是舞台失去焦点，包括移动端手指移出屏幕，或者因为alert等弹出框而使得画面失去焦点后触发。</p>",
            "is_constructor": 1,
            "since": "1.9.0",
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tLGlobal.setDebug(true);\n\t\tvar theTextField1 = new LTextField();\n\t\ttheTextField1.x = 20;\n\t\ttheTextField1.y = 20;\n\t\ttheTextField1.setType(LTextFieldType.INPUT);\n\t\taddChild(theTextField1);\n\t\ttheTextField1.addEventListener(LFocusEvent.FOCUS_IN, onfocus);\n\t\ttheTextField1.addEventListener(LFocusEvent.FOCUS_OUT, outfocus);\n\t\tvar theTextField2 = new LTextField();\n\t\ttheTextField2.x = 20;\n\t\ttheTextField2.y = 100;\n\t\ttheTextField2.setType(LTextFieldType.INPUT);\n\t\taddChild(theTextField2);\n\t\ttheTextField2.addEventListener(LFocusEvent.FOCUS_IN, onfocus);\n\t\ttheTextField2.addEventListener(LFocusEvent.FOCUS_OUT, outfocus);\n\t}\n\tfunction onfocus(e){\n\t\ttrace(e.currentTarget + \"(\" + e.currentTarget.objectIndex + \") FOCUS_IN\");\n\t}\n\tfunction outfocus(e){\n\t\ttrace(e.currentTarget + \"(\" + e.currentTarget.objectIndex + \") FOCUS_OUT\");\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LFocusEvent/index.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "LKeyboardEvent": {
            "name": "LKeyboardEvent",
            "shortname": "LKeyboardEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "events/LKeyboardEvent.js",
            "line": 1,
            "description": "<p>在响应用户通过键盘输入的内容时将调度的 LKeyboardEvent 对象 ID。有两种类型的键盘事件：LKeyboardEvent.KEY_DOWN 和 LKeyboardEvent.KEY_UP</p>\n<p>加载键盘事件必须使用LGlobal.stage.addEventListener或者LEvent.addEventListener。</p>",
            "is_constructor": 1,
            "since": "1.0.0",
            "example": [
                "\n\tLInit(50, \"legend\", 800, 80, main);\n\tfunction main () {\n\t\tLGlobal.setDebug(true);\n\t\tvar title = new LTextField();\n\t\taddChild(title);\n\t\ttitle.text = \"Click the keyboard, please!\";\n\t\tLGlobal.stage.addEventListener(LKeyboardEvent.KEY_DOWN,keydown);\n\t\t//LEvent.addEventListener(window,LKeyboardEvent.KEY_DOWN,keydown);\n\t\tLGlobal.stage.addEventListener(LKeyboardEvent.KEY_UP,keyup);\n\t\t//LEvent.addEventListener(window,LKeyboardEvent.KEY_DOWN,keydown);\n\t\tLGlobal.stage.addEventListener(LKeyboardEvent.KEY_PRESS,keypress);\n\t\t//LEvent.addEventListener(window,LKeyboardEvent.KEY_PRESS,keypress);\n\t}\n\tfunction keydown (e) {\n\t\ttrace(\"keydown e.keyCode = \" + e.keyCode);\n\t}\n\tfunction keyup (e) {\n\t\ttrace(\"keyup e.keyCode = \" + e.keyCode);\n\t}\n\tfunction keypress (e) {\n\t\ttrace(\"keypress e.keyCode = \" + e.keyCode);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LKeyboardEvent/index.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "LMouseEvent": {
            "name": "LMouseEvent",
            "shortname": "LMouseEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "events/LMouseEvent.js",
            "line": 1,
            "description": "<p>每次发生鼠标事件时，都会将 LMouseEvent 对象调度到事件流中。鼠标事件通常由使用指针的用户输入设备（如鼠标或轨迹球）生成。</p>\n<p>如果是移动浏览器，则MOUSE_DOWN,MOUSE_UP,MOUSE_MOVE会自动转换为TOUCH_DOWN,TOUCH_UP,TOUCH_MOVE，开发者无需自己增加额外的判断。</p>",
            "is_constructor": 1,
            "since": "1.0.0",
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tLGlobal.setDebug(true);\n\t\tvar layer01 = new LSprite();\n\t\tlayer01.x = 50;\n\t\tlayer01.y = 20;\n\t\taddChild(layer01);\n\t\tvar bmd = new LBitmapData(\"#FF0000\", 0, 0, 100, 100);\n\t\tvar bm = new LBitmap(bmd);\n\t\tlayer01.addChild(bm);\n\t\tlayer01.addEventListener(LMouseEvent.MOUSE_DOWN, onmouse);\n\t\tlayer01.addEventListener(LMouseEvent.MOUSE_DOWN, onmouseOther);\n\t\t\n\t\tvar layer02 = new LSprite();\n\t\tlayer02.graphics.drawRect(1,\"#008800\",[0,0,100,100],true);\n\t\tlayer02.x = 200;\n\t\tlayer02.y = 20;\n\t\taddChild(layer02);\n\t\tlayer02.addEventListener(LMouseEvent.MOUSE_DOWN, onmouse);\n\t\tlayer02.addEventListener(LMouseEvent.MOUSE_DOWN, onmouseOther);\n\t}\n\tfunction onmouse(event){\n\t\ttrace(\"event.currentTarget : \" + event.currentTarget + \"(\" + event.currentTarget.objectIndex + \")\");\n\t\ttrace(\"event.target : \" + event.target + \"(\" + event.target.objectIndex + \")\");\n\t\ttrace(\"event.clickTarget == event.currentTarget : \" + (event.clickTarget == event.currentTarget));\n\t\ttrace(\"event.offsetX : \" + event.offsetX, \"event.offsetY : \" + event.offsetY);\n\t\ttrace(\"event.selfX : \" + event.selfX, \"event.selfY : \" + event.selfY, \"\");\n\t}\n\tfunction onmouseOther(event,object){\n\t\ttrace(\"onmouseOther event.currentTarget : \" + event.currentTarget + \"(\" + event.currentTarget.objectIndex + \")\");\n\t\ttrace(\"onmouseOther object : \" + object + \"(\" + object.objectIndex + \")\");\n\t\ttrace(\"onmouseOther object == event.currentTarget : \" + (object == event.currentTarget), \"\");\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LMouseEvent/index.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "LMouseEventContainer": {
            "name": "LMouseEventContainer",
            "shortname": "LMouseEventContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "events/LMouseEventContainer.js",
            "line": 1,
            "description": "<p>LMouseEventContainer是一个鼠标事件监听器的容器，一般的鼠标事件监听需要遍历所有的可视对象，对程序消耗是比较大的，使用LMouseEventContainer后，鼠标监听对象变为只监听加载了鼠标事件的对象，可以大幅度提升鼠标事件监听的效率，但是，缺点是无法使用显示对象对鼠标事件进行遮挡。</p>",
            "is_constructor": 1,
            "since": "1.8.5",
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tLGlobal.setDebug(true);\n\t\tLMouseEventContainer.set(LMouseEvent.MOUSE_DOWN,true);\n\t\tvar layer01 = new LSprite();\n\t\tlayer01.x = 50;\n\t\tlayer01.y = 20;\n\t\taddChild(layer01);\n\t\tvar bmd = new LBitmapData(\"#FF0000\", 0, 0, 100, 100);\n\t\tvar bm = new LBitmap(bmd);\n\t\tlayer01.addChild(bm);\n\t\tlayer01.addEventListener(LMouseEvent.MOUSE_DOWN, onmouse);\n\t\tlayer01.addEventListener(LMouseEvent.MOUSE_DOWN, onmouseOther);\n\t\t\n\t\tvar layer02 = new LSprite();\n\t\tlayer02.graphics.drawRect(1,\"#008800\",[0,0,100,100],true);\n\t\tlayer02.x = 200;\n\t\tlayer02.y = 20;\n\t\taddChild(layer02);\n\t\tlayer02.addEventListener(LMouseEvent.MOUSE_DOWN, onmouse);\n\t\tlayer02.addEventListener(LMouseEvent.MOUSE_DOWN, onmouseOther);\n\t}\n\tfunction onmouse(event){\n\t\ttrace(\"event.currentTarget : \" + event.currentTarget + \"(\" + event.currentTarget.objectIndex + \")\");\n\t\ttrace(\"event.target : \" + event.target + \"(\" + event.target.objectIndex + \")\");\n\t\ttrace(\"event.clickTarget == event.currentTarget : \" + (event.clickTarget == event.currentTarget));\n\t\ttrace(\"event.offsetX : \" + event.offsetX, \"event.offsetY : \" + event.offsetY);\n\t\ttrace(\"event.selfX : \" + event.selfX, \"event.selfY : \" + event.selfY, \"\");\n\t}\n\tfunction onmouseOther(event,object){\n\t\ttrace(\"onmouseOther event.currentTarget : \" + event.currentTarget + \"(\" + event.currentTarget.objectIndex + \")\");\n\t\ttrace(\"onmouseOther object : \" + object + \"(\" + object.objectIndex + \")\");\n\t\ttrace(\"onmouseOther object == event.currentTarget : \" + (object == event.currentTarget), \"\");\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LMouseEventContainer/index.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "LTextEvent": {
            "name": "LTextEvent",
            "shortname": "LTextEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "events/LTextEvent.js",
            "line": 1,
            "description": "<p>用户在文本字段中输入文本或在启用 HTML 的文本字段中单击超链接时，对象将调度 LTextEvent 对象。有两种类型的文本事件：LTextEvent.TEXT_INPUT 和 LTextEvent.WIND_COMPLETE。</p>",
            "is_constructor": 1,
            "since": "1.9.0",
            "access": "public",
            "tagname": ""
        },
        "LTimerEvent": {
            "name": "LTimerEvent",
            "shortname": "LTimerEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "events/LTimerEvent.js",
            "line": 1,
            "description": "<p>每当 LTimer 对象达到由 LTimer.delay 属性指定的间隔时，LTimer 对象即会调度 LTimerEvent 对象。</p>",
            "is_constructor": 1,
            "since": "1.9.0",
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tLGlobal.setDebug(true);\n\t\tvar myTimer = new LTimer(1000, 2);\n\t\tmyTimer.addEventListener(LTimerEvent.TIMER, timerHandler);\n\t\tmyTimer.start();\n\t}\n\tfunction timerHandler(e){\n\t\ttrace(\"timerHandler: \" + event);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LTimerEvent/index.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "LBitmapFilter": {
            "name": "LBitmapFilter",
            "shortname": "LBitmapFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "filters/LBitmapFilter.js",
            "line": 1,
            "description": "<p>LBitmapFilter 类是所有图像滤镜效果的基类。</p>\n<p>ColorMatrixFilter、LConvolutionFilter、LDropShadowFilter都扩展了 LBitmapFilter 类。</p>\n<p>不可以直接实例化或扩展 LBitmapFilter。</p>",
            "extends": "LObject",
            "is_constructor": 1,
            "since": "1.9.11",
            "access": "public",
            "tagname": ""
        },
        "LColorMatrixFilter": {
            "name": "LColorMatrixFilter",
            "shortname": "LColorMatrixFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "filters/LColorMatrixFilter.js",
            "line": 1,
            "description": "<p>使用 LColorMatrixFilter 类可以将 4 x 5 矩阵转换应用于输入图像上的每个像素的 RGBA 颜色和 Alpha 值，以生成具有一组新的 RGBA 颜色和 Alpha 值的结果。该类允许饱和度更改、色相旋转、亮度为 Alpha 以及各种其他效果。您可以将滤镜应用于任何显示对象（即，从 LDisplayObject 类继承的对象），以及 LBitmapData 对象。</p>\n<p>注意：对于 RGBA 值，最高有效字节代表红色通道值，其后的有效字节分别代表绿色、蓝色和 Alpha 通道值。</p>\n<p>要创建新的颜色矩阵滤镜，请使用 new LColorMatrixFilter() 语法。滤镜的具体使用取决于要应用滤镜的对象：</p>\n<p>・要对影片剪辑、文本字段、按钮应用滤镜，请使用 filters 属性（继承自 LDisplayObject）。设置对象的 filters 属性不会修改相应的对象，而清除 filters 属性可以删除相应的滤镜。</p>\n<p>・要对 LBitmapData 对象应用滤镜，请使用 LBitmapData.applyFilter() 方法。对 LBitmapData 对象调用 applyFilter() 会取得源 LBitmapData 对象和滤镜对象，并最终生成一个过滤图像。</p>\n<p>如果对显示对象应用滤镜，则会自动调用该对象的 cacheAsBitmap(true) 。</p>",
            "extends": "LBitmapFilter",
            "is_constructor": 1,
            "params": [
                {
                    "name": "matrix",
                    "description": "<p>由 20 个项目（排列成 4 x 5 矩阵）组成的数组。</p>\n<p>由 20 个项目组成的数组，适用于 4 x 5 颜色转换。matrix 属性不能通过直接修改它的值来更改（例如 myFilter.matrix[2] = 1;）。相反，必须先获取对数组的引用，对引用进行更改，然后重置该值。</p>\n<p>颜色矩阵滤镜将每个源像素分离成它的红色、绿色、蓝色和 Alpha 成分，分别以 srcR、srcG、srcB 和 srcA 表示。要计算四个通道中每个通道的结果，可将图像中每个像素的值乘以转换矩阵中的值。（可选）可以将偏移量（介于 -255 至 255 之间）添加到每个结果（矩阵的每行中的第五项）中。滤镜将各颜色成分重新组合为单一像素，并写出结果。</p>\n<p>在下列公式中，a[0] 到 a[19] 对应于由 20 个项目组成的数组中的条目 0 至 19，该数组已传递到 matrix 属性：</p>\n<p>如果对显示对象应用滤镜，则会自动调用该对象的 cacheAsBitmap(true) 。</p>\n<p>・redResult   = (a[0]  * srcR) + (a[1]  * srcG) + (a[2]  * srcB) + (a[3]  * srcA) + a[4]</p>\n<p>・greenResult = (a[5]  * srcR) + (a[6]  * srcG) + (a[7]  * srcB) + (a[8]  * srcA) + a[9]</p>\n<p>・blueResult  = (a[10] * srcR) + (a[11] * srcG) + (a[12] * srcB) + (a[13] * srcA) + a[14]</p>\n<p>・alphaResult = (a[15] * srcR) + (a[16] * srcG) + (a[17] * srcB) + (a[18] * srcA) + a[19]</p>\n<p>对于数组中的每个颜色值，值 1 等于正发送到输出的通道的 100%，同时保留颜色通道的值。</p>",
                    "type": "Array"
                }
            ],
            "example": [
                "\n\tLInit(1000/60, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tloader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata); \n\t\tloader.load(\"face.jpg\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata (event) {\n\t\tvar layer = new LSprite();\n\t\tlayer.x = layer.y = 100;\n\t\taddChild(layer);\n\t\tvar bitmapdata = new LBitmapData(event.target);\t\n\t\tvar bitmap = new LBitmap(bitmapdata);\t\n\t\tlayer.addChild(bitmap);\t\n\t\tvar sprite = new LSprite();\t\n\t\tsprite.graphics.drawRect(3, \"#000000\", [0, 0, 190, 100],true,\"#00FF00\");\t\n\t\tsprite.x = -100;\t\t\n\t\tlayer.addChild(sprite);\t\t\n\t\tlayer.filters = [new LColorMatrixFilter([0.3086,0.6094, 0.0820, 0, 0, 0.3086, 0.6094, 0.0820, 0, 0, 0.3086, 0.6094, 0.0820, 0, 0, 0, 0, 0, 1, 0])];\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LColorMatrixFilter/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.9.11",
            "access": "public",
            "tagname": ""
        },
        "LConvolutionFilter": {
            "name": "LConvolutionFilter",
            "shortname": "LConvolutionFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "filters/LConvolutionFilter.js",
            "line": 1,
            "description": "<p>LConvolutionFilter 类应用矩阵盘绕滤镜效果。卷积将输入图像的像素与相邻的像素合并以生成图像。通过卷积，可以实现大量的图像效果，包括模糊、边缘检测、锐化、浮雕和斜角。您可以将滤镜应用于任何显示对象（即，从 LDisplayObject 类继承的对象）</p>\n<p>・要对影片剪辑、文本字段、按钮应用滤镜，请使用 filters 属性（继承自 LDisplayObject）。设置对象的 filters 属性不会修改相应的对象，而清除 filters 属性可以删除相应的滤镜。</p>\n<p>・要对 LBitmapData 对象应用滤镜，请使用 LBitmapData.applyFilter() 方法。对 LBitmapData 对象调用 applyFilter() 会取得源 LBitmapData 对象和滤镜对象，并最终生成一个过滤图像。</p>\n<p>如果对显示对象应用滤镜，则会自动调用该对象的 cacheAsBitmap(true) 。</p>",
            "extends": "LBitmapFilter",
            "is_constructor": 1,
            "params": [
                {
                    "name": "matrixX",
                    "description": "矩阵的 x 维度（矩阵中列的数目）。默认值为 0。",
                    "type": "Int"
                },
                {
                    "name": "matrixY",
                    "description": "矩阵的 y 维度（矩阵中行的数目）。默认值为 0。",
                    "type": "Int"
                },
                {
                    "name": "matrix",
                    "description": "用于矩阵转换的值的数组。数组中的项数必须等于 matrixX * matrixY。",
                    "type": "Array"
                },
                {
                    "name": "divisor",
                    "description": "矩阵转换中使用的除数。默认值为 1。",
                    "type": "Int"
                },
                {
                    "name": "bias",
                    "description": "要添加到矩阵转换结果的偏差。默认值为 0。",
                    "type": "Int"
                }
            ],
            "example": [
                "\n\tLInit(1000/60, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tloader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata); \n\t\tloader.load(\"face.jpg\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata (event) {\n\t\tvar layer = new LSprite();\n\t\tlayer.x = layer.y = 100;\n\t\taddChild(layer);\n\t\tvar bitmapdata = new LBitmapData(event.target);\t\n\t\tvar bitmap = new LBitmap(bitmapdata);\t\n\t\tlayer.addChild(bitmap);\t\n\t\tvar sprite = new LSprite();\t\n\t\tsprite.graphics.drawRect(3, \"#000000\", [0, 0, 190, 100],true,\"#00FF00\");\t\n\t\tsprite.x = -100;\t\t\n\t\tlayer.addChild(sprite);\t\t\n\t\tlayer.filters = [new LConvolutionFilter(3,3,[-5, 0, 0, 0, 0, 0, 0, 0, 5])];\t\t\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LConvolutionFilter/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.9.11",
            "access": "public",
            "tagname": ""
        },
        "LDropShadowFilter": {
            "name": "LDropShadowFilter",
            "shortname": "LDropShadowFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "filters/LDropShadowFilter.js",
            "line": 1,
            "description": "可使用 DropShadowFilter 类向显示对象添加投影。阴影算法基于模糊滤镜使用的同一个框型滤镜。投影样式有多个选项，包括内侧或外侧阴影和挖空模式。您可以将滤镜应用于任何显示对象（即，从 DisplayObject 类继承的对象）。",
            "extends": "LObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "distance",
                    "description": "阴影的偏移距离，以像素为单位。",
                    "type": "Int"
                },
                {
                    "name": "angle",
                    "description": "阴影的角度。",
                    "type": "Int"
                },
                {
                    "name": "color",
                    "description": "阴影的颜色。",
                    "type": "Int"
                },
                {
                    "name": "blur",
                    "description": "模糊量。",
                    "type": "Int"
                }
            ],
            "example": [
                "\n\tvar bitmapdata = new LBitmapData(event.target);  \n\tvar bitmap = new LBitmap(bitmapdata);\n\taddChild(bitmap);\n\tvar shadow = new LDropShadowFilter(5,45,\"#000000\");\n\tbitmap.filters = [shadow];"
            ],
            "examplelink": "<p><a href=\"../../../api/LDropShadowFilter/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.6.0",
            "access": "public",
            "tagname": ""
        },
        "LColorTransform": {
            "name": "LColorTransform",
            "shortname": "LColorTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "geom/LColorTransform.js",
            "line": 1,
            "description": "用指定的颜色通道值和 Alpha 值为显示对象创建 LColorTransform 对象。\n可使用 LColorTransform 类调整显示对象的颜色值。可以将颜色调整或颜色转换应用于所有四种通道：红色、绿色、蓝色和 Alpha 透明度。\n当 LColorTransform 对象应用于显示对象时，将按如下方法为每个颜色通道计算新值：\n・新红色值 = (旧红色值 * redMultiplier) + redOffset\n・新绿色值 = (旧绿色值 * greenMultiplier) + greenOffset\n・新蓝色值 = (旧蓝色值 * blueMultiplier) + blueOffset\n・新 Alpha 值 = (旧 Alpha 值 * alphaMultiplier) + alphaOffset\n如果计算后任何一个颜色通道值大于 255，则该值将被设置为 255。如果该值小于 0，它将被设置为 0。\n可以通过下列方式使用 LColorTransform 对象：\n・在 LBitmapData 类的 colorTransform() 方法的 colorTransform 参数中",
            "extends": "LObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "redMultiplier",
                    "description": "红色乘数的值，在 0 到 1 范围内。",
                    "type": "Float"
                },
                {
                    "name": "greenMultiplier",
                    "description": "绿色乘数的值，在 0 到 1 范围内。",
                    "type": "Float"
                },
                {
                    "name": "blueMultiplier",
                    "description": "蓝色乘数的值，在 0 到 1 范围内。",
                    "type": "Float"
                },
                {
                    "name": "alphaMultiplier",
                    "description": "Alpha 透明度乘数的值，在 0 到 1 范围内。",
                    "type": "Float"
                },
                {
                    "name": "redOffset",
                    "description": "红色通道值的偏移量，在 -255 到 255 范围内。",
                    "type": "Float"
                },
                {
                    "name": "greenOffset",
                    "description": "绿色通道值的偏移量，在 -255 到 255 范围内。",
                    "type": "Float"
                },
                {
                    "name": "blueOffset",
                    "description": "蓝色通道值的偏移量，在 -255 到 255 范围内。",
                    "type": "Float"
                },
                {
                    "name": "alphaOffset",
                    "description": "Alpha 透明度通道值的偏移量，在 -255 到 255 范围内。",
                    "type": "Float"
                }
            ],
            "since": "1.9.4",
            "access": "public",
            "tagname": ""
        },
        "LMatrix": {
            "name": "LMatrix",
            "shortname": "LMatrix",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "geom/LMatrix.js",
            "line": 1,
            "description": "LMatrix 类表示一个转换矩阵，它确定如何将点从一个坐标空间映射到另一个坐标空间。",
            "is_constructor": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": ""
        },
        "LPoint": {
            "name": "LPoint",
            "shortname": "LPoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "geom/LPoint.js",
            "line": 1,
            "description": "创建一个新点。LPoint 对象表示二维坐标系统中的某个位置，其中 x 表示水平轴，y 表示垂直轴。",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "水平坐标。",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "垂直坐标。",
                    "type": "Float"
                }
            ],
            "example": [
                "\n\tvar myPoint = new LPoint(100,100);"
            ],
            "since": "1.7.7",
            "access": "public",
            "tagname": ""
        },
        "LRectangle": {
            "name": "LRectangle",
            "shortname": "LRectangle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "geom/LRectangle.js",
            "line": 1,
            "description": "<p>LRectangle 对象是按其位置（由它左上角的点 (x, y) 确定）以及宽度和高度定义的区域。</p>\n<p>LRectangle 类的 x、y、width 和 height 属性相互独立；更改一个属性的值不会影响其他属性。但是，right 和 bottom 属性与这四个属性是整体相关的。例如，如果更改 right 属性的值，则 width 属性的值将发生变化；如果更改 bottom 属性，则 height 属性的值将发生变化。</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "矩形左上角的 x 坐标。",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "矩形左上角的 y 坐标。",
                    "type": "Float"
                },
                {
                    "name": "width",
                    "description": "矩形的宽度（以像素为单位）。",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "矩形的高度（以像素为单位）。",
                    "type": "Float"
                }
            ],
            "since": "1.4.1",
            "access": "public",
            "tagname": ""
        },
        "LTransform": {
            "name": "LTransform",
            "shortname": "LTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "geom/LTransform.js",
            "line": 1,
            "description": "利用 LTransform 类，可以访问可应用于显示对象的二维转换对象。\n要应用二维转换，请执行下列操作：创建一个 LMatrix 对象，并设置该矩阵的二维转换，然后将显示对象的 transform.matrix 属性分配给新的 LMatrix 对象。",
            "extends": "LObject",
            "is_constructor": 1,
            "since": "1.9.8",
            "access": "public",
            "tagname": ""
        },
        "LVec2": {
            "name": "LVec2",
            "shortname": "LVec2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "geom/LVec2.js",
            "line": 1,
            "description": "LVec2 类表示一个向量，包含一些向量相关的计算方法。",
            "is_constructor": 1,
            "since": "1.9.0",
            "access": "public",
            "tagname": ""
        },
        "UI:LButtonSample1": {
            "name": "UI:LButtonSample1",
            "shortname": "UI:LButtonSample1",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/ui/LButtonSample-0.1.0.js",
            "line": 1,
            "description": "<p>lufylegend.js专用UI，按钮类。</p>\n<p>使用时需要引进lufylegend.ui-x.x.x.js文件。</p>",
            "is_constructor": 1,
            "extends": "LSprite",
            "params": [
                {
                    "name": "name",
                    "description": "按钮文字。",
                    "type": "String"
                },
                {
                    "name": "size",
                    "description": "[可选]按钮文字的大小。",
                    "type": "Int"
                },
                {
                    "name": "font",
                    "description": "[可选]按钮文字的格式。",
                    "type": "String"
                },
                {
                    "name": "color",
                    "description": "[可选]按钮文字的颜色。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "examplelink": "<p><a href=\"../../../api/ui/LButtonSampleX.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "UI:LButtonSample2": {
            "name": "UI:LButtonSample2",
            "shortname": "UI:LButtonSample2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/ui/LButtonSample-0.1.0.js",
            "line": 140,
            "description": "<p>lufylegend.js专用UI，按钮类。</p>\n<p>使用时需要引进lufylegend.ui-x.x.x.js文件。</p>",
            "is_constructor": 1,
            "extends": "LSprite",
            "params": [
                {
                    "name": "name",
                    "description": "按钮文字。",
                    "type": "String"
                },
                {
                    "name": "size",
                    "description": "按钮文字的大小。",
                    "type": "Int"
                },
                {
                    "name": "font",
                    "description": "按钮文字的格式。",
                    "type": "String"
                },
                {
                    "name": "color",
                    "description": "按钮文字的颜色。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "examplelink": "<p><a href=\"../../../api/ui/LButtonSampleX.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "UI:LCheckBox": {
            "name": "UI:LCheckBox",
            "shortname": "UI:LCheckBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/ui/LCheckBox-0.1.1.js",
            "line": 1,
            "description": "<p>lufylegend.js专用UI，多选按钮。</p>\n<p>使用时需要引进lufylegend.ui-x.x.x.js文件。</p>",
            "is_constructor": 1,
            "extends": "LSprite",
            "params": [
                {
                    "name": "layer",
                    "description": "[可选]多选按钮的未选中状态样式。",
                    "type": "LDisplayObject"
                },
                {
                    "name": "layerSelect",
                    "description": "[可选]多选按钮的选中状态样式。",
                    "type": "LDisplayObject"
                }
            ],
            "since": "0.1.0",
            "examplelink": "<p><a href=\"../../../api/ui/LCheckBox.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "UI:LComboBox": {
            "name": "UI:LComboBox",
            "shortname": "UI:LComboBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/ui/LComboBox-0.1.2.js",
            "line": 1,
            "description": "<p>lufylegend.js专用UI，组合框。</p>\n<p>使用时需要引进lufylegend.ui-x.x.x.js文件。</p>",
            "is_constructor": 1,
            "extends": "LSprite",
            "params": [
                {
                    "name": "size",
                    "description": "[可选]组合框文字的大小。",
                    "type": "Int"
                },
                {
                    "name": "color",
                    "description": "[可选]组合框文字的颜色。",
                    "type": "String"
                },
                {
                    "name": "font",
                    "description": "[可选]组合框文字的格式。",
                    "type": "String"
                },
                {
                    "name": "layer",
                    "description": "[可选]组合框的背景样式。",
                    "type": "LPanel"
                },
                {
                    "name": "layerUp",
                    "description": "[可选]组合框的按钮抬起状态样式。",
                    "type": "LDisplayObject"
                },
                {
                    "name": "layerOver",
                    "description": "[可选]组合框的按钮抬起状态样式。",
                    "type": "LDisplayObject"
                }
            ],
            "since": "0.1.0",
            "examplelink": "<p><a href=\"../../../api/ui/LComboBox.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "UI:LListView": {
            "name": "UI:LListView",
            "shortname": "UI:LListView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 1,
            "description": "<p>lufylegend.js专用UI，list列表。</p>\n<p>※此组件不可以添加LMouseEvent事件，如果需要使用点击事件，需要重写子项的onClick函数，具体做法参照 LListChildView。</p>\n<p>使用时需要引进lufylegend.ui-x.x.x.js文件。</p>",
            "is_constructor": 1,
            "extends": "LSprite",
            "since": "1.10.0",
            "examplelink": "<p><a href=\"../../../api/ui/LListView.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "UI:LListScrollBar": {
            "name": "UI:LListScrollBar",
            "shortname": "UI:LListScrollBar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 406,
            "description": "<p>lufylegend.js专用UI，LListView 列表的专用滚动条。</p>\n<p>使用时需要引进lufylegend.ui-x.x.x.js文件。</p>",
            "is_constructor": 1,
            "extends": "LSprite",
            "since": "1.10.0",
            "params": [
                {
                    "name": "background",
                    "description": "滚动条背景。",
                    "type": "LPanel"
                },
                {
                    "name": "foreground",
                    "description": "滚动条样式。",
                    "type": "LPanel"
                },
                {
                    "name": "showCondition",
                    "description": "滚动条的种类。",
                    "type": "LListView.ScrollBarCondition"
                }
            ],
            "examplelink": "<p><a href=\"../../../api/ui/LListScrollBar.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "UI:LListChildView": {
            "name": "UI:LListChildView",
            "shortname": "UI:LListChildView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 473,
            "description": "<p>lufylegend.js专用UI，LListView 列表的一个单元子项。</p>\n<p>在使用LListView的子项的时候，需要先从LListChildView继承。</p>\n<p>使用时需要引进lufylegend.ui-x.x.x.js文件。</p>",
            "is_constructor": 1,
            "extends": "LSprite",
            "since": "1.10.0",
            "examplelink": "<p><a href=\"../../../api/ui/LListView.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "UI:LMenubar": {
            "name": "UI:LMenubar",
            "shortname": "UI:LMenubar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/ui/LMenubar-0.1.1.js",
            "line": 1,
            "description": "<p>lufylegend.js专用UI，定义包含一个或多个菜单的顶级水平菜单栏</p>\n<p>使用时需要引进lufylegend.ui-x.x.x.js文件。</p>",
            "is_constructor": 1,
            "extends": "LSprite",
            "params": [
                {
                    "name": "list",
                    "description": "菜单列表，列表的具体格式请看下面的使用举例。",
                    "type": "Array"
                },
                {
                    "name": "style",
                    "description": "[可选]菜单属性，包含textSize（文字大小），horizontalIndent（水平间隔），verticalIndent（垂直间隔），textColor（文字颜色），lineColor（分割线颜色），backgroundColor（菜单背景颜色），itemBackgroundColor（子菜单背景颜色），selectColor（菜单选中颜色）。",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "examplelink": "<p><a href=\"../../../api/ui/LMenubar.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "UI:LMessageBox": {
            "name": "UI:LMessageBox",
            "shortname": "UI:LMessageBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/ui/LMessageBox-0.1.1.js",
            "line": 1,
            "description": "<p>lufylegend.js专用UI，显示一个消息框/p>\n<p>使用时需要引进lufylegend.ui-x.x.x.js文件。</p>",
            "is_constructor": 1,
            "extends": "LSprite",
            "params": [
                {
                    "name": "properties",
                    "description": "弹出框的信息，包含message（内容）［必须］，title（标题）[可省略]，width（宽度）[可省略]，height（高度）[可省略]，size（文字大小）[可省略]，textHeight（文本行高）[可省略]，displayObject（此属性允许向弹出框中添加一个可视对象）[可省略]。",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "examplelink": "<p><a href=\"../../../api/ui/LMessageBox.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "UI:LPanel": {
            "name": "UI:LPanel",
            "shortname": "UI:LPanel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/ui/LPanel-0.1.2.js",
            "line": 1,
            "description": "<p>lufylegend.js专用UI，Panel。可以利用九宫格对图片进行缩放，实现图片缩放后不失真效果。</p>\n<p>使用时需要引进lufylegend.ui-x.x.x.js文件。</p>",
            "is_constructor": 1,
            "extends": "LSprite",
            "params": [
                {
                    "name": "data",
                    "description": "一个LBitmapData对象，或者是一个表示颜色的字符串，如“＃FF0000”。",
                    "type": "LBitmapData|String"
                },
                {
                    "name": "width",
                    "description": "想要表示的Panel的宽。",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "想要表示的Panel的高。",
                    "type": "Float"
                },
                {
                    "name": "x1",
                    "description": "x方向上第一个分割线位置。",
                    "type": "Float"
                },
                {
                    "name": "x2",
                    "description": "x方向上第二个分割线位置。",
                    "type": "Float"
                },
                {
                    "name": "y1",
                    "description": "y方向上第一个分割线位置。",
                    "type": "Float"
                },
                {
                    "name": "y2",
                    "description": "y方向上第二个分割线位置。",
                    "type": "Float"
                }
            ],
            "since": "0.1.0",
            "examplelink": "<p><a href=\"../../../api/ui/LPanel.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "UI:LRadioChild": {
            "name": "UI:LRadioChild",
            "shortname": "UI:LRadioChild",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/ui/LRadio-0.1.0.js",
            "line": 1,
            "description": "<p>lufylegend.js专用UI，单选按钮的子元素。</p>\n<p>需要和<a href=\"UI:LRadio.html\">LRadio</a>一起使用。</p>\n<p>使用时需要引进lufylegend.ui-x.x.x.js文件。</p>",
            "is_constructor": 1,
            "extends": "LSprite",
            "params": [
                {
                    "name": "value",
                    "description": "单选按钮的子元素的值。",
                    "type": "Float|String"
                },
                {
                    "name": "layer",
                    "description": "[可选]单选按钮的子元素的未选中状态。",
                    "type": "LDisplayObject"
                },
                {
                    "name": "layerSelect",
                    "description": "[可选]单选按钮的子元素的选中状态。",
                    "type": "LDisplayObject"
                }
            ],
            "since": "0.1.0",
            "examplelink": "<p><a href=\"../../../api/ui/LRadio.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "UI:LRadio": {
            "name": "UI:LRadio",
            "shortname": "UI:LRadio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/ui/LRadio-0.1.0.js",
            "line": 62,
            "description": "<p>lufylegend.js专用UI，单选按钮</p>\n<p>需要和<a href=\"UI:LRadioChild.html\">LRadioChild</a>一起使用。</p>\n<p>使用时需要引进lufylegend.ui-x.x.x.js文件。</p>",
            "is_constructor": 1,
            "extends": "LSprite",
            "since": "0.1.0",
            "examplelink": "<p><a href=\"../../../api/ui/LRadio.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "UI:LRange": {
            "name": "UI:LRange",
            "shortname": "UI:LRange",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/ui/LRange-0.1.1.js",
            "line": 1,
            "description": "<p>lufylegend.js专用UI，区域范围对象</p>\n<p>此函数为多态，另一种形式请点击这里<a href=\"LRange.html\">LRange</a></p>\n<p>使用时需要引进lufylegend.ui-x.x.x.js文件。</p>",
            "is_constructor": 1,
            "extends": "LSprite",
            "params": [
                {
                    "name": "width",
                    "description": "区域范围对象的宽。",
                    "type": "Float"
                }
            ],
            "since": "0.1.0",
            "examplelink": "<p><a href=\"../../../api/ui/LRange.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "LRange": {
            "name": "LRange",
            "shortname": "LRange",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/ui/LRange-0.1.1.js",
            "line": 13,
            "description": "<p>lufylegend.js专用UI，区域范围对象</p>\n<p>此函数为多态，另一种形式请点击这里<a href=\"UI:LRange.html\">LRange</a></p>\n<p>使用时需要引进lufylegend.ui-x.x.x.js文件。</p>",
            "is_constructor": 1,
            "extends": "LSprite",
            "params": [
                {
                    "name": "backLayer",
                    "description": "区域范围对象的背景。",
                    "type": "LDisplayObject"
                },
                {
                    "name": "selectLayer",
                    "description": "区域范围对象的拖动样式。",
                    "type": "LDisplayObject"
                }
            ],
            "since": "0.1.0",
            "examplelink": "<p><a href=\"../../../api/ui/LRange.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "UI:LScrollbar": {
            "name": "UI:LScrollbar",
            "shortname": "UI:LScrollbar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/ui/LScrollbar-0.1.4.js",
            "line": 1,
            "description": "<p>lufylegend.js专用UI，滚动条</p>\n<p>使用时需要引进lufylegend.ui-x.x.x.js文件。</p>",
            "is_constructor": 1,
            "extends": "LSprite",
            "params": [
                {
                    "name": "showObject",
                    "description": "需要加入滚动条的对象。",
                    "type": "LDisplayObject"
                },
                {
                    "name": "maskW",
                    "description": "滚动条对象的可视大小的宽。",
                    "type": "Float"
                },
                {
                    "name": "maskH",
                    "description": "滚动条对象的可视大小的高。",
                    "type": "Float"
                },
                {
                    "name": "param",
                    "description": "如果是float类型，则表示滚动条的宽。如果是Object类型，则为{back:滚动条的背景,select:滚动条,arraw:向上的箭头}。",
                    "type": "Float|Object"
                },
                {
                    "name": "wVisible",
                    "description": "是否显示横向滚动条，未设定则为默认。",
                    "type": "Boolean"
                },
                {
                    "name": "hVisible",
                    "description": "是否显示纵向滚动条，未设定则为默认。",
                    "type": "Boolean"
                }
            ],
            "since": "0.1.0",
            "examplelink": "<p><a href=\"../../../api/ui/LScrollbar.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "UI:LTable": {
            "name": "UI:LTable",
            "shortname": "UI:LTable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/ui/LTable-0.1.0.js",
            "line": 1,
            "description": "<p>lufylegend.js专用UI，表格</p>\n<p>使用时需要引进lufylegend.ui-x.x.x.js文件。</p>\n<p>*此类由网友Yorhom提供，表示感谢。</p>",
            "is_constructor": 1,
            "extends": "LSprite",
            "params": [
                {
                    "name": "row",
                    "description": "表格行数。",
                    "type": "Int"
                },
                {
                    "name": "col",
                    "description": "表格列数。",
                    "type": "Int"
                },
                {
                    "name": "style",
                    "description": "表格样式，是一个Object。包含cellWidth（单元格宽度），cellHeight（单元格高度），borderWidth（表格边框宽度），borderColor（表格边框颜色），backgroundColor（表格背景颜色），selectColor（鼠标盘旋在单元格上时，单元格的背景颜色），indentX（单元格内容与边框的x方向上的间距），indentY（单元格内容与边框的y方向上的间距）。",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "examplelink": "<p><a href=\"../../../api/ui/LTable.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "UI:LTreeWidget": {
            "name": "UI:LTreeWidget",
            "shortname": "UI:LTreeWidget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/ui/LTreeWidget-0.1.0.js",
            "line": 1,
            "description": "<p>lufylegend.js专用UI，树形组件</p>\n<p>使用时需要引进lufylegend.ui-x.x.x.js文件。</p>\n<p>*此类由网友Yorhom提供，表示感谢。</p>",
            "is_constructor": 1,
            "extends": "LSprite",
            "params": [
                {
                    "name": "list",
                    "description": "列表，列表的具体格式请看下面的使用举例。",
                    "type": "Array"
                },
                {
                    "name": "style",
                    "description": "树形组件样式。包含textColor，textSize，textWeight，textFont，branchIndent（节点间的间隔），branchButtonColor（展开/关闭节点的按钮的颜色）",
                    "type": "Object"
                }
            ],
            "since": "0.1.0",
            "examplelink": "<p><a href=\"../../../api/ui/LTreeWidget.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "UI:LWindow": {
            "name": "UI:LWindow",
            "shortname": "UI:LWindow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/ui/LWindow-0.1.2.js",
            "line": 1,
            "description": "<p>lufylegend.js专用UI，窗口</p>\n<p>使用时需要引进lufylegend.ui-x.x.x.js文件。</p>\n<p>其中参数也可以是一个Object对象。</p>\n<table>\n<tr><th>对象</th><th>说明</th></tr>\n<tr><td>LLoader</td><td>图片加载完成事件。</td></tr>\n<tr><td>LURLLoader</td><td>js文件或者文本文件加载完成事件。</td></tr>\n<tr><td>LMedia</td><td>多媒体文件加载完成事件。</td></tr>\n<tr><td>LAnimation</td><td>一组动画播放完成事件。</td></tr>\n<tr><td>LStageWebView</td><td>网页加载完成事件。</td></tr>\n</table>",
            "is_constructor": 1,
            "extends": "LSprite",
            "params": [
                {
                    "name": "width",
                    "description": "窗口的宽。",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "窗口的高。",
                    "type": "Float"
                },
                {
                    "name": "title",
                    "description": "窗口的标题。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "examplelink": "<p><a href=\"../../../api/ui/LWindow.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "InteractivePNG": {
            "name": "InteractivePNG",
            "shortname": "InteractivePNG",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/InteractivePNG-0.1.0.js",
            "line": 1,
            "description": "<p>Library:lufylegend.InteractivePNG-x.x.x.min.js</p>\n<p>在相应鼠标事件的时候，过滤图片中的透明区域，使用上和LSprite没有区别，只是子对象只能是LBitmap。</p>",
            "extends": "LSprite",
            "is_constructor": 1,
            "since": "1.9.12",
            "examplelink": "<p><a href=\"../../../api/InteractivePNG/index.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "LBox2d": {
            "name": "LBox2d",
            "shortname": "LBox2d",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/LBox2d-0.4.0.js",
            "line": 1,
            "description": "<p>Library:lufylegend.LBox2d-x.x.x.min.js</p>\n<p>在lufylegend库件里使用box2dweb。</p>\n<p>下面是几篇相关的文章。</p>\n<p><a href=\"http://blog.csdn.net/lufy_legend/article/details/7654607\" target=\"_blank\">HTML5游戏开发-Box2dWeb应用(一)-创建各种各样的刚体</a></p>\n<p><a href=\"http://blog.csdn.net/lufy_legend/article/details/7672110\" target=\"_blank\">HTML5游戏开发-Box2dWeb应用(二)-碰撞以及各种连接</a></p>\n<p><a href=\"http://blog.csdn.net/lufy_legend/article/details/7765599\" target=\"_blank\">html5游戏开发-愤怒的小鸟-开源讲座</a></p>\n<p><a href=\"http://blog.csdn.net/lufy_legend/article/details/8758585\" target=\"_blank\">制作一款简单的物理小游戏(绳子原理)</a></p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "gravity",
                    "description": "世界重力向量(例：[0,9.8])，可省略。",
                    "type": "Array"
                },
                {
                    "name": "doSleep",
                    "description": "物体是否可休眠，可省略。",
                    "type": "Boolean"
                },
                {
                    "name": "drawScale",
                    "description": "缩放比例，可省略。",
                    "type": "Float"
                }
            ],
            "since": "1.4.0",
            "access": "public",
            "tagname": ""
        },
        "LFlash": {
            "name": "LFlash",
            "shortname": "LFlash",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/LFlash-0.1.0.js",
            "line": 1,
            "description": "<p>Library:lufylegend.LFlash-x.x.x.min.js</p>\n<p>为adobe flash cs导出的纹理提供动画转换支持。</p>",
            "is_constructor": 1,
            "since": "1.8.11",
            "access": "public",
            "tagname": ""
        },
        "LQuadTree": {
            "name": "LQuadTree",
            "shortname": "LQuadTree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/LQuadTree-0.1.1.js",
            "line": 1,
            "description": "<p>Library:lufylegend.LQuadTree-x.x.x.min.js</p>\n<p>四叉树类，可拥有高速检测矩形碰撞。下面两个demo可以说明LQuadTree的强大</p>\n<p><a href=\"../../../api/LQuadTree/index.html\" target=\"_blank\">碰撞检测 一般方法</a></p>\n<p><a href=\"../../../api/LQuadTree/index2.html\" target=\"_blank\">碰撞检测 四叉树方法</a></p>",
            "extends": "LObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "rect",
                    "description": "矩形区域，是一个LRectangle对象。",
                    "type": "LRectangle"
                }
            ],
            "since": "1.4.1",
            "access": "public",
            "tagname": ""
        },
        "LTransition": {
            "name": "LTransition",
            "shortname": "LTransition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/LTransitionManager-0.1.1.js",
            "line": 1,
            "description": "<p>Library:lufylegend.LTransitionManager-x.x.x.min.js</p>\n<p>为LTransitionManager提供动画效果。</p>",
            "is_constructor": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": ""
        },
        "LTransitionManager": {
            "name": "LTransitionManager",
            "shortname": "LTransitionManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/LTransitionManager-0.1.1.js",
            "line": 771,
            "description": "<p>Library:lufylegend.LTransitionManager-x.x.x.min.js</p>\n<p>定义动画效果。 它允许您将九种动画效果中的一种应用于影片剪辑。 在创建自定义组件时，您可以使用 LTransitionManager 类将动画效果应用于组件可视界面中的影片剪辑。整体来说，有九个不同的动画可以用。</p>\n<p>您可以通过两种方式创建 TransitionManager 实例：</p>\n<p>请调用 LTransitionManager.start() 方法。 这是创建 LTransitionManager 实例最简单的方式，建议使用该方式。</p>\n<p>使用 new 运算符。 然后可以指定过渡属性，并通过调用 LTransitionManager.startTransition() 方法在另一步中启动过渡效果。</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "displayObject",
                    "description": "要应用过渡效果的对象。",
                    "type": "LDisplayObject"
                }
            ],
            "examplelink": "<p><a href=\"../../../api/LTransitionManager/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.8.0",
            "access": "public",
            "tagname": ""
        },
        "LoadingSample": {
            "name": "LoadingSample",
            "shortname": "LoadingSample",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/LoadingSample1-0.1.1.js",
            "line": 1,
            "description": "<p>Library:lufylegend.LoadingSampleX-x.x.x.min.js</p>\n<p>用来显示进度条的对象。</p>\n<p>引擎中目前提供的进度条类有：LoadingSample1～7</p>\n<p>你可以制作自己的进度条，自制进度条类中要包含setProgress函数。</p>",
            "extends": "LSprite",
            "is_constructor": 1,
            "example": [
                "\n\tvar loadData = [\n\t\t{path:\"./js/jsfile01.js\",type:\"js\"},\n\t\t{path:\"./js/jsfile02.js\",type:\"js\"},\n\t\t{name:\"img0\",path:\"./images/img0.png\"},\n\t\t{name:\"img1\",path:\"./images/img1.png\"},\n\t\t{name:\"text01\",path:\"./files/text01.txt\",type:\"text\"},\n\t\t{name:\"text02\",path:\"./files/text02.txt\",type:\"text\"},\n\t\t{name:\"sound01\",path:\"./sounds/sound01.wav\",type:\"sound\"},\n\t\t{name:\"sound02\",path:\"./sounds/sound02.wav\",type:\"sound\"}\n\t];\n\tvar loadingLayer;\n\tvar datalist=[];\n\tfunction main(){\n\t\tloadingLayer = new LoadingSample1();\n\t\taddChild(loadingLayer);\n\t\tLLoadManage.load(\n\t\t\tloadData,\n\t\t\tfunction(progress){\n\t\t\t    loadingLayer.setProgress(progress);\n\t\t\t },\n\t\t\tgameInit\n\t\t);\n\t}\n\tfunction gameInit (result) {\n\t\tdatalist = result;\n\t\tremoveChild(loadingLayer);\n\t\tloadingLayer = null;\n\t\t//do something\n\t}"
            ],
            "since": "1.4.0",
            "access": "public",
            "tagname": ""
        },
        "LMedia": {
            "name": "LMedia",
            "shortname": "LMedia",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "media/LMedia.js",
            "line": 1,
            "description": "<p>LMedia 类是LSound对象和LVideo对象的基类。</p>\n<p>LMedia 是一种抽象基类；因此，不能直接调用 LMedia。</p>\n<p>LMedia 类是可以包含子对象的所有对象的抽象基类。无法直接对其进行实例化。</p>",
            "extends": "LDisplayObject",
            "is_constructor": 1,
            "since": "1.7.0",
            "access": "public",
            "tagname": ""
        },
        "LSound(LMedia)": {
            "name": "LSound(LMedia)",
            "shortname": "LSound(LMedia)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "media/LSound.js",
            "line": 1,
            "description": "<p>此类创建和播放音频的 LSound 对象。</p>\n<p>当浏览器不支持Web Audio Api或者设置LGlobal.webAudio = false的时候，LSound会自动继承LMedia对象。</p>\n<p>当LSound继承LMedia的时候，IOS浏览器下加载音频需要在点击事件中进行，并且同一时间只能播放一个音频文件。</p>",
            "extends": "LMedia",
            "is_constructor": 1,
            "example": [
                "\n\tvar backLayer;\n\tvar sound;\n\tfunction main () {\n\t\tbackLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tsound = new LSound();\n\t\t......\n\t\tbackLayer.addEventListener(LMouseEvent.MOUSE_UP,onup);\n\t}\n\tfunction onup (e) {\n\t\t......\n\t\tvar url = \"./sample.\";\n\t\tsound.load(url+\"mp3,\"+url+\"ogg,\"+url+\"wav\");\n\t\tsound.addEventListener(LEvent.COMPLETE,loadOver);\n\t}\n\tfunction loadOver (e) {\n\t\tsound.play();\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LSound/LMedia.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.7.0",
            "access": "public",
            "tagname": ""
        },
        "LSound(LWebAudio)": {
            "name": "LSound(LWebAudio)",
            "shortname": "LSound(LWebAudio)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "media/LSound.js",
            "line": 40,
            "description": "<p>此类创建和播放音频的 LSound 对象。</p>\n<p>当浏览器支持Web Audio Api并且设置LGlobal.webAudio = true(默认值是true)的时候，LSound会自动继承LWebAudio对象。</p>\n<p>当LSound继承LWebAudio的时候，IOS浏览器下可以预先加载音频文件，但是播放音频必须在点击事件中进行。</p>\n<p>当LSound继承LWebAudio的时候，IOS浏览器下可以同时播放多个音频文件，但是有上线，IOS浏览器的播放上限大约为4个。</p>",
            "extends": "LWebAudio",
            "is_constructor": 1,
            "example": [
                "\n\tvar backLayer;\n\tvar sound;\n\tfunction main () {\n\t\tbackLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tsound = new LSound();\n\t\t......\n\t\tvar url = \"./sample.\";\n\t\tsound.load(url+\"mp3,\"+url+\"ogg,\"+url+\"wav\");\n\t\tsound.addEventListener(LEvent.COMPLETE,loadOver);\n\t}\n\tfunction onup (e) {\n\t\t......\n\t\tsound.play();\n\t}\n\tfunction loadOver (e) {\n\t\tbackLayer.addEventListener(LMouseEvent.MOUSE_UP,onup);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LSound/LWebAudio.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.9.0",
            "access": "public",
            "tagname": ""
        },
        "LStageWebView": {
            "name": "LStageWebView",
            "shortname": "LStageWebView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "media/LStageWebView.js",
            "line": 1,
            "description": "<p>LStageWebView 类在舞台视口中显示 HTML 内容。</p>",
            "extends": "LEventDispatcher",
            "is_constructor": 1,
            "example": [
                "\n\tvar webview = new LStageWebView();\n\twebview.setViewPort(new LRectangle(100,10,600,400));\n\twebview.loadURL(\"http://www.lufylegend.com\");\n\twebview.show();"
            ],
            "examplelink": "<p><a href=\"../../../api/LStageWebView/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.7.2",
            "access": "public",
            "tagname": ""
        },
        "LVideo": {
            "name": "LVideo",
            "shortname": "LVideo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "media/LVideo.js",
            "line": 1,
            "description": "此类创建播放视频的 LVideo 对象。",
            "extends": "LMedia",
            "is_constructor": 1,
            "example": [
                "\n\tvar backLayer;\n\tvar video;\n\tfunction main () {\n\t\tbackLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tvideo = new LVideo();\n\t\t......\n\t\tbackLayer.addEventListener(LMouseEvent.MOUSE_UP,onup);\n\t}\n\tfunction onup (e) {\n\t\t......\n\t\tvar url = \"./sample.\";\n\t\tvideo.load(url+\"mp4,\"+url+\"3gp,\"+url+\"mov,\"+url+\"3g2,\"+url+\"ogv,\"+url+\"webm\");\n\t\tvideo.addEventListener(LEvent.COMPLETE,loadOver);\n\t}\n\tfunction loadOver (e) {\n\t\tvar layer = new LSprite();\n\t\tlayer.addChild(video);\n\t\tbackLayer.addChild(layer);\n\t\tvideo.play();\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LVideo/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.6.0",
            "access": "public",
            "tagname": ""
        },
        "LWebAudio": {
            "name": "LWebAudio",
            "shortname": "LWebAudio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "media/LWebAudio.js",
            "line": 1,
            "description": "<p>LWebAudio 类是LSound对象的基类。可以让LSound对象使用Web Audio Api来播放音频文件，可以解决IOS下无法多声道的问题。</p>\n<p>LWebAudio 是一种抽象基类；因此，不能直接调用 LWebAudio。</p>\n<p>LWebAudio 类是可以包含子对象的所有对象的抽象基类。无法直接对其进行实例化。</p>",
            "extends": "LEventDispatcher",
            "is_constructor": 1,
            "since": "1.9.0",
            "access": "public",
            "tagname": ""
        },
        "LAjax": {
            "name": "LAjax",
            "shortname": "LAjax",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "net/LAjax.js",
            "line": 1,
            "description": "Ajax 操作函数。允许我们在不刷新浏览器的情况下从服务器加载数据。",
            "is_constructor": 1,
            "since": "1.7.1",
            "access": "public",
            "tagname": ""
        },
        "LFontLoader": {
            "name": "LFontLoader",
            "shortname": "LFontLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "net/LFontLoader.js",
            "line": 1,
            "description": "LFontLoader 类可用于加载外部Font文件。使用 load() 方法来启动加载。",
            "extends": "LEventDispatcher",
            "is_constructor": 1,
            "since": "1.10.0",
            "access": "public",
            "tagname": ""
        },
        "LURLLoader": {
            "name": "LURLLoader",
            "shortname": "LURLLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "net/LURLLoader.js",
            "line": 1,
            "description": "LURLLoader 类以文本、二进制数据或 URL 编码变量的形式从 URL 下载数据，LURLLoader 类读取文本数据时无法在本地环境下运行。",
            "extends": "LEventDispatcher",
            "is_constructor": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": ""
        },
        "LLoadManage": {
            "name": "LLoadManage",
            "shortname": "LLoadManage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "system/LLoadManage.js",
            "line": 1,
            "description": "LLoadManage类是可以用来同时读取图片，文本以及js多种类型的文件。",
            "is_constructor": 1,
            "since": "1.4.0",
            "access": "public",
            "tagname": ""
        },
        "LStyleSheet": {
            "name": "LStyleSheet",
            "shortname": "LStyleSheet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "text/LStyleSheet.js",
            "line": 1,
            "description": "<p>使用 LStyleSheet 类可以创建包含文本格式设置规则（例如，字体大小、颜色和其他格式样式）的 LStyleSheet 对象。然后，可以将样式表定义的样式应用到包含 HTML 或 XML 格式文本的 LTextField 对象。根据 LStyleSheet 对象定义的标签样式自动设置 LTextField 对象中文本的格式。可以使用文本样式来定义新的格式标签，重新定义内置的 HTML 标签，或创建可应用到某些 HTML 标签的样式类。</p>\n<p>要对一个 LTextField 对象应用样式，请将该 LStyleSheet 对象赋给 LTextField 对象的 styleSheet 属性。</p>\n<p>注意：具有样式表的文本字段不可编辑。</p>\n<p>下表显示目前支持的层叠样式表 (CSS) 属性和值。</p>\n<table>\n<tr><th>CSS 属性</th><th>用法和支持的值</th></tr>\n<tr><td>color</td><td>颜色。</td></tr>\n<tr><td>font-family</td><td>字体名称。</td></tr>\n<tr><td>font-size</td><td>文本大小。</td></tr>\n<tr><td>font-style</td><td>可识别的值为 normal 和 italic。</td></tr>\n<tr><td>font-weight</td><td>可识别的值为 normal 和 bold。</td></tr>\n<tr><td>text-decoration</td><td>可识别的值为 none 和 underline。</td></tr>\n</table>",
            "extends": "LObject",
            "is_constructor": 1,
            "example": [
                "\n\tvar styleSheet = new LStyleSheet();\n\tstyleSheet.setStyle(\".test\",\"{color:#FF0000;font-size:40}\");\n\tstyleSheet.setStyle(\"myText\",\"{color:#008800;font-size:30}\");\n\tvar theTextField = new LTextField();\n\ttheTextField.htmlText = \"ABC<span class='test'>ABC<myText><i>ABC</i>ABC</myText>ABC</span>ABC<b>ABC</b><u>ABC</u>\";\n\ttheTextField.x = 10;\n\ttheTextField.y = 100;\n\ttheTextField.styleSheet = styleSheet;\n\taddChild(theTextField);"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/styleSheet.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.9.8",
            "access": "public",
            "tagname": ""
        },
        "LTextField": {
            "name": "LTextField",
            "shortname": "LTextField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "text/LTextField.js",
            "line": 1,
            "description": "创建新的 LTextField 实例。在创建 LTextField 实例后，调用父 LSprite 对象的 addChild() 或 addChildAt() 方法可将 LTextField 实例添加到显示列表中。\nLTextField 类的方法允许您设置、选择并操作在创作过程中或运行时创建的动态或输入文本字段中的文本。",
            "extends": "LInteractiveObject",
            "is_constructor": 1,
            "example": [
                "\n\tvar theTextField = new LTextField();\n\ttheTextField.setType(LTextFieldType.INPUT);\n\ttheTextField.x = 10;\n\ttheTextField.y = 10;\n\taddChild(theTextField);"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/index.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": ""
        },
        "LEasing": {
            "name": "LEasing",
            "shortname": "LEasing",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "transitions/LEasing.js",
            "line": 1,
            "description": "<p>LTweenLite的各种效果。</p>\n<p><img src=\"../../../api/LEasing/None.png\" /></p>\n<p><img src=\"../../../api/LEasing/Quad.png\" /></p>\n<p><img src=\"../../../api/LEasing/Cubic.png\" /></p>\n<p><img src=\"../../../api/LEasing/Quart.png\" /></p>\n<p><img src=\"../../../api/LEasing/Quint.png\" /></p>\n<p><img src=\"../../../api/LEasing/Sine.png\" /></p>\n<p><img src=\"../../../api/LEasing/Strong.png\" /></p>\n<p><img src=\"../../../api/LEasing/Expo.png\" /></p>\n<p><img src=\"../../../api/LEasing/Circ.png\" /></p>\n<p><img src=\"../../../api/LEasing/Elastic.png\" /></p>\n<p><img src=\"../../../api/LEasing/Back.png\" /></p>\n<p><img src=\"../../../api/LEasing/Bounce.png\" /></p>",
            "is_constructor": 1,
            "since": "1.4.0",
            "examplelink": "<p><a href=\"../../../api/LEasing/index.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "LTweenLiteChild": {
            "name": "LTweenLiteChild",
            "shortname": "LTweenLiteChild",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "transitions/LTweenLite.js",
            "line": 3,
            "description": "<p>LTweenLite用来控制动画的一个单位。</p>",
            "is_constructor": 1,
            "since": "1.4.0",
            "access": "public",
            "tagname": ""
        },
        "LTweenLite": {
            "name": "LTweenLite",
            "shortname": "LTweenLite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "transitions/LTweenLite.js",
            "line": 236,
            "description": "<p>LTweenLite是比较常用的一个动画库，包含各种缓动效果，使用LTweenLite能够简化动画制作的代码编写工作。</p>",
            "is_constructor": 1,
            "since": "1.4.0",
            "access": "public",
            "tagname": ""
        },
        "LMultitouch": {
            "name": "LMultitouch",
            "shortname": "LMultitouch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "ui/LMultitouch.js",
            "line": 1,
            "description": "LMultitouch 类管理并提供有关当前环境支持用于处理来自用户输入设备的接触的信息，包括有两个或多个触点（例如，用户在触摸屏上使用的手指）的接触。当用户与带有触摸屏的移动电话或平板电脑等设备交互时，用户通常使用手指或指针设备接触屏幕。有很多种指针设备，如鼠标或笔针，其中很多种设备在某个应用程序中仅具有一个触控点。对于具有一个触控点的指针设备，用户交互事件可处理为鼠标事件，或者使用基本 touch 事件集（称为“接触点”事件）。",
            "is_constructor": 1,
            "since": "1.8.9",
            "example": [
                "\n\tLInit(1000/50,\"legend\",800,450,main);\n\tvar layer,backLayer,touchPointIDList = [];\n\tfunction main () {\n\t\tif(LGlobal.canTouch){\n\t\t\t\tLGlobal.stageScale = LStageScaleMode.EXACT_FIT;\n\t\t\t\t\tLSystem.screen(LStage.FULL_SCREEN);\n\t\t}\n\t\tLMultitouch.inputMode = LMultitouchInputMode.TOUCH_POINT;\n\t\tlayer = new LSprite();\n\t\tlayer.graphics.drawRect(2,\"#ffffff\",[0,0,LGlobal.width,LGlobal.height],true,\"#ffffff\");\n\t\taddChild(layer);\n\t\tbackLayer = new LSprite();\n\t\tbackLayer.y = 50;\n\t\tlayer.addChild(backLayer);\n\t\tvar txtLabel = new LTextField();\n\t\ttxtLabel.size = 18;\n\t\ttxtLabel.x = 10;\n\t\ttxtLabel.y = 5;\n\t\tlayer.addChild(txtLabel);\n\t\tif(!LGlobal.canTouch){\n\t\t\ttxtLabel.text = \"多点触屏测试：请用手机或平板电脑测试\";\n\t\t}else{\n\t\t\ttxtLabel.text = \"多点触屏测试：请点击屏幕进行测试\";\n\t\t}\n\t\tlayer.addEventListener(LMouseEvent.MOUSE_DOWN,addTouchPointID);\n\t\tlayer.addEventListener(LMouseEvent.MOUSE_MOVE,addTouchPointID);\n\t\tlayer.addEventListener(LMouseEvent.MOUSE_UP,removeTouchPointID);\n\t}\n\tfunction addTouchPointID(e){\n\t\tvar f = false;\n\t\tfor(var i=0;i<touchPointIDList.length;i++){\n\t\t\tif(touchPointIDList[i].touchPointID == e.touchPointID){\n\t\t\t\ttouchPointIDList[i] = e;\n\t\t\t\tf = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!f)touchPointIDList.push(e);\n\t\tdraw();\n\t}\n\tfunction removeTouchPointID(e){\n\t\tfor(var i=0;i<touchPointIDList.length;i++){\n\t\t\tif(touchPointIDList[i].touchPointID == e.touchPointID){\n\t\t\t\ttouchPointIDList.splice(i,1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tdraw();\n\t}\n\tfunction draw(){\n\t\tbackLayer.removeAllChild();\n\t\tfor(var i=0;i<touchPointIDList.length;i++){\n\t\t\tvar eve = touchPointIDList[i];\n\t\t\tvar title = new LTextField();\n\t\t\ttitle.text = \"id:\"+eve.touchPointID+\",\"+eve.offsetX+\",\"+eve.offsetY;\n\t\t\ttitle.size = 18;\n\t\t\ttitle.x = 10;\n\t\t\ttitle.y = i*23;\n\t\t\tbackLayer.addChild(title);\n\t\t}\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LMultitouch/index.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        },
        "LMultitouchInputMode": {
            "name": "LMultitouchInputMode",
            "shortname": "LMultitouchInputMode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "ui/LMultitouchInputMode.js",
            "line": 1,
            "description": "LMultitouchInputMode 类提供 LMultitouch 类的 inputMode 属性值。这些值设置用户与启用触屏的设备交互时canvas运行时调度的接触事件类型。",
            "is_constructor": 1,
            "since": "1.8.9",
            "access": "public",
            "tagname": ""
        },
        "全局函数": {
            "name": "全局函数",
            "shortname": "全局函数",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "utils/Function.js",
            "line": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": ""
        },
        "全局变量": {
            "name": "全局变量",
            "shortname": "全局变量",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "utils/LConstant.js",
            "line": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": ""
        },
        "LGlobal": {
            "name": "LGlobal",
            "shortname": "LGlobal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "utils/LGlobal.js",
            "line": 1,
            "description": "<p>全局类。</p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": ""
        },
        "LObject": {
            "name": "LObject",
            "shortname": "LObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "utils/LObject.js",
            "line": 1,
            "description": "LObject 类位于 lufylegend.js 类层次结构的根处。",
            "is_constructor": 1,
            "since": "1.6.0",
            "access": "public",
            "tagname": ""
        },
        "LTimer": {
            "name": "LTimer",
            "shortname": "LTimer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "utils/LTimer.js",
            "line": 1,
            "description": "<p>LTimer 类是计时器的接口，它使您能按指定的时间序列运行代码。使用 start() 方法来启动计时器。为 timer 事件添加事件侦听器，以便将代码设置为按计时器间隔运行。</p>\n<p>可以创建 LTimer 对象以运行一次或按指定间隔重复运行，从而按计划执行代码。根据 帧速率或运行时环境（可用内存和其他因素），运行时调度事件的间隔可能稍有不同。例如，如果设置为以每秒 10 帧 (fps)（也就是 100 毫秒的间隔）的速度播放，但计时器设置为在 80 毫秒时触发事件，则将按接近于 100 毫秒的间隔触发事件。大量耗费内存的脚本也可能使事件发生偏差。</p>",
            "extends": "LEventDispatcher",
            "is_constructor": 1,
            "params": [
                {
                    "name": "delay",
                    "description": "计时器事件间的延迟（以毫秒为单位）。建议 delay 不要低于 20 毫秒。计时器频率不得超过 60 帧/秒，这意味着低于 16.6 毫秒的延迟可导致出现运行时问题。",
                    "type": "Float"
                },
                {
                    "name": "repeatCount",
                    "description": "指定重复次数。如果为零，则计时器将持续不断重复运行，最长可运行 24.86 天 (int.MAX_VALUE + 1)。如果不为 0，则将运行计时器，运行次数为指定的次数，然后停止。",
                    "type": "Int"
                }
            ],
            "since": "1.9.11",
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tLGlobal.setDebug(true);\n\t\tvar myTimer = new LTimer(1000, 2);\n\t\tmyTimer.addEventListener(LTimerEvent.TIMER, timerHandler);\n\t\tmyTimer.start();\n\t}\n\tfunction timerHandler(e){\n\t\ttrace(\"timerHandler: \" + e);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LTimerEvent/index.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": ""
        }
    },
    "classitems": [
        {
            "file": "api/Q_and_A.js",
            "line": 5,
            "description": "<p>因为新版API还在继续更新，lib文件夹下的文件都属于外部库，还未完全添加到新的api文档中，请先查看旧版API，旧版api地址如下：</p>\n<p><a href=\"http://lufylegend.com/lufylegend/oldapi\" target=\"_blank\">http://lufylegend.com/lufylegend/oldapi</a></p>",
            "itemtype": "property",
            "name": "1,找不到相关API：为什么有些类和属性API中找不到？",
            "class": "Q & A (常见问题)"
        },
        {
            "file": "api/Q_and_A.js",
            "line": 10,
            "description": "引擎提供了自动全屏适配的设置，请参考<a href=\"全屏设置.html\">全屏设置</a>部分。",
            "itemtype": "property",
            "name": "1,自动适配：如何自动适配不同大小的屏幕。",
            "class": "Q & A (常见问题)"
        },
        {
            "file": "api/Q_and_A.js",
            "line": 14,
            "description": "一般这个问题，都是因为将游戏的刷新速度当成了FPS来设置了，在引擎初始化函数LInit中设置的速度speed是游戏画面的刷新速度，这个速度speed与FPS之间的关系为FPS=1000/speed。",
            "itemtype": "property",
            "name": "2,FPS很低：游戏画面很简单，但是为什么FPS就是上不去？",
            "class": "Q & A (常见问题)"
        },
        {
            "file": "api/Q_and_A.js",
            "line": 18,
            "description": "这个一般是由LBitmap的旋转导致的，LBitmap对象默认是以自身的中心为参考点来进行旋转的，这个旋转会导致碰撞以及鼠标点击事件发生错位，解决的办法就是通过设置rotateCenter的值，取消LBitmap对象的旋转中心。",
            "itemtype": "property",
            "name": "3,碰撞失效：为什么对象进行了旋转之后鼠标点击或者碰撞失效了？",
            "example": [
                "\n\tvar bitmap = LBitmap(bitmapData);\n\tbitmap.rotateCenter = false;"
            ],
            "class": "Q & A (常见问题)"
        },
        {
            "file": "api/Q_and_A.js",
            "line": 25,
            "description": "<p>对象旋转一般是指LBitmap和LSprite对象的旋转，如果要改变旋转的中心点，请参考下面这个帖子中介绍的方法。</p>\n<p><a href=\"http://lufylegend.com/forum/forum.php?mod=viewthread&tid=17755\" target=\"_blank\">关于对象的旋转中心和缩放中心的设置</a></p>",
            "itemtype": "property",
            "name": "4,旋转中心点：关于如何设置旋转中心点的问题。",
            "class": "Q & A (常见问题)"
        },
        {
            "file": "api/Q_and_A.js",
            "line": 30,
            "description": "这是因为lufylegend中拦截了触屏事件导致的，可以通过设置LGlobal.preventDefault的值来禁止拦截触屏事件。",
            "itemtype": "property",
            "name": "5,链接,滚屏失效：移动开发中，页面引入lufylegend之后，页面的触屏事件失效了，链接也无法点击了，无法滚动屏幕了。",
            "example": [
                "\n\tLGlobal.preventDefault = false;"
            ],
            "class": "Q & A (常见问题)"
        },
        {
            "file": "api/Q_and_A.js",
            "line": 36,
            "description": "这可能是你音频加载完成之后，没有移除相应的加载事件导致的。",
            "itemtype": "property",
            "name": "6,音频不断重复播放：有些浏览器中音频会不断的重复播放？",
            "class": "Q & A (常见问题)"
        },
        {
            "file": "api/Q_and_A.js",
            "line": 40,
            "description": "<p>使用LGraphics来绘制图形的时候，每个绘图指令都会以单个元素储存到数组当中，如果不断的添加绘图指令，而又要保留原有的图形，就会使绘图指令不断增加，导致每桢需要执行的绘图指令增加，所以会越来越卡。</p>\n<p>解决的办法，一个是将绘制的图形及时的转为LBitmapData对象。或者利用LBitmapData的setPixels或者putPixels等函数来绘图。</p>\n<p>一个持续绘图的例子：<a href=\"../../../api/Q_and_A/drawEM.html\" target=\"_blank\">drawEM demo</a></p>",
            "itemtype": "property",
            "name": "7,持续绘图：不断的绘制图形，导致游戏越来越卡怎么办？",
            "class": "Q & A (常见问题)"
        },
        {
            "file": "display/LAnimation.js",
            "line": 38,
            "description": "对象的类型",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "LAnimation",
            "since": "1.3.1",
            "access": "public",
            "tagname": "",
            "class": "LAnimation"
        },
        {
            "file": "display/LAnimation.js",
            "line": 58,
            "description": "一个LBitmap对象，LAnimation对象用它来显示纹理图",
            "itemtype": "property",
            "name": "bitmap",
            "type": "LBitmap",
            "since": "1.3.1",
            "access": "public",
            "tagname": "",
            "class": "LAnimation"
        },
        {
            "file": "display/LAnimation.js",
            "line": 75,
            "description": "设置播放的贞动画。",
            "itemtype": "method",
            "name": "setAction",
            "params": [
                {
                    "name": "rowIndex",
                    "description": "播放动画的行号。",
                    "type": "Int"
                },
                {
                    "name": "colIndex",
                    "description": "播放动画的列号。",
                    "type": "Int"
                },
                {
                    "name": "mode",
                    "description": "(1,0,-1)分别代表(正序播放,静止,倒序播放)。",
                    "type": "Int"
                },
                {
                    "name": "isMirror",
                    "description": "是否使用镜像来水平翻转显示对象。",
                    "type": "Boolean"
                }
            ],
            "since": "1.3.1",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(200,\"legend\",800,450,main);\n\tvar player;\n\tvar player2;\n\tfunction main(){\n\t\tvar loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata);\n\t\tloader.load(\"player.png\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata(event){\n\t\tvar backLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tvar list = LGlobal.divideCoordinate(480,630,3,4);\n\t\tvar data = new LBitmapData(event.target,0,0,120,210);\n\t\tplayer = new LAnimation(backLayer,data,list);\n\t\tplayer2 = new LAnimation(backLayer,data.clone(),list);\n\t\tplayer.setAction(2,0,1,true);\n\t\tplayer2.setAction(2,0,1,false);\n\t\tplayer2.x = 150;\n\t\tbackLayer.addEventListener(LEvent.ENTER_FRAME,onframe);\n\t}\n\tfunction onframe(){\n\t\tplayer.onframe();\n\t\tplayer2.onframe();\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LAnimation/setAction.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LAnimation"
        },
        {
            "file": "display/LAnimation.js",
            "line": 141,
            "description": "获取当前播放的贞动画的属性。",
            "itemtype": "method",
            "name": "getAction",
            "return": {
                "description": "当前播放的贞动画的属性:[rowIndex,colIndex,mode,isMirror]([行号,列号,播放模式,是否为镜像])。",
                "type": "Array"
            },
            "since": "1.3.1",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(200,\"legend\",800,450,main);\n\tvar player;\n\tfunction main(){\n\t\tvar loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata);\n\t\tloader.load(\"player.png\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata(event){\n\t\tvar backLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tvar list = LGlobal.divideCoordinate(480,630,3,4);\n\t\tvar data = new LBitmapData(event.target,0,0,120,210);\n\t\tplayer = new LAnimation(backLayer,data,list);\n\t\tbackLayer.addEventListener(LEvent.ENTER_FRAME,onframe);\n\t}\n\tfunction onframe(){\n\t\tplayer.onframe();\n\t\tvar result = player.getAction();\n\t\ttrace(result);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LAnimation/getAction.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LAnimation"
        },
        {
            "file": "display/LAnimation.js",
            "line": 174,
            "description": "播放下一贞动画。",
            "itemtype": "method",
            "name": "onframe",
            "since": "1.3.1",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(200,\"legend\",800,450,main);\n\tvar player;\n\tfunction main(){\n\t\tvar loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata);\n\t\tloader.load(\"player.png\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata(event){\n\t\tvar backLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tvar list = LGlobal.divideCoordinate(480,630,3,4);\n\t\tvar data = new LBitmapData(event.target,0,0,120,210);\n\t\tplayer = new LAnimation(backLayer,data,list);\n\t\tbackLayer.addEventListener(LEvent.ENTER_FRAME,onframe);\n\t}\n\tfunction onframe(){\n\t\tplayer.onframe();\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LAnimation/onframe.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LAnimation"
        },
        {
            "file": "display/LAnimation.js",
            "line": 255,
            "description": "返回一个LAnimation的克隆对象。",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "一个新的 LAnimation 对象，它与原始对象相同.",
                "type": "LAnimation"
            },
            "since": "1.8.8",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(200,\"legend\",800,450,main);\n\tvar player;\n\tvar player2;\n\tfunction main(){\n\t\tvar loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata);\n\t\tloader.load(\"player.png\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata(event){\n\t\tvar backLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tvar list = LGlobal.divideCoordinate(480,630,3,4);\n\t\tvar data = new LBitmapData(event.target,0,0,120,210);\n\t\tplayer = new LAnimation(backLayer,data,list);\n\t\tplayer2 = player.clone();\n\t\tplayer2.setAction(2,0);\n\t\tplayer2.x = 150;\n\t\tbackLayer.addChild(player2);\n\t\tbackLayer.addEventListener(LEvent.ENTER_FRAME,onframe);\n\t}\n\tfunction onframe(event){\n\t\tplayer.onframe();\n\t\tplayer2.onframe();\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LAnimation/clone.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LAnimation"
        },
        {
            "file": "display/LAnimation.js",
            "line": 302,
            "description": "一组动画播放完成事件。\n<p><a href=\"LEvent.html#property_COMPLETE\">LEvent.COMPLETE</a></p>",
            "itemtype": "event",
            "name": "LEvent.COMPLETE",
            "class": "LAnimation"
        },
        {
            "file": "display/LAnimationTimeline.js",
            "line": 49,
            "description": "对象的类型",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "LAnimationTimeline",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LAnimationTimeline"
        },
        {
            "file": "display/LAnimationTimeline.js",
            "line": 58,
            "description": "动画播放速度",
            "itemtype": "property",
            "name": "speed",
            "type": "int",
            "default": "0",
            "since": "1.8.0",
            "example": [
                "\n\tfunction loadBitmapdata(event){\n\t\tvar backLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tvar list = LGlobal.divideCoordinate(480,630,3,4);\n\t\tvar data = new LBitmapData(event.target,0,0,120,210);\n\t\tvar player = new LAnimationTimeline(data,list);\n\t\tplayer.speed = 10;\n\t\tbackLayer.addChild(player);\n\t\tvar player2 = new LAnimationTimeline(data.clone(),list);\n\t\tplayer2.speed = 5;\n\t\tplayer2.x = 150;\n\t\tbackLayer.addChild(player2);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LAnimationTimeline/speed.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LAnimationTimeline"
        },
        {
            "file": "display/LAnimationTimeline.js",
            "line": 96,
            "description": "返回一个LAnimationTimeline的克隆对象。",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "一个新的 LAnimationTimeline 对象，它与原始对象相同.",
                "type": "LAnimationTimeline"
            },
            "since": "1.8.8",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(200,\"legend\",800,450,main);\n\tvar player;\n\tvar player2;\n\tfunction main(){\n\t\tvar loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata);\n\t\tloader.load(\"player.png\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata(event){\n\t\tvar backLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tvar list = LGlobal.divideCoordinate(480,630,3,4);\n\t\tvar data = new LBitmapData(event.target,0,0,120,210);\n\t\tplayer = new LAnimation(backLayer,data,list);\n\t\tplayer2 = player.clone();\n\t\tplayer2.setAction(2,0);\n\t\tplayer2.x = 150;\n\t\tbackLayer.addChild(player2);\n\t\tbackLayer.addEventListener(LEvent.ENTER_FRAME,onframe);\n\t}\n\tfunction onframe(event){\n\t\tplayer.onframe();\n\t\tplayer2.onframe();\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LAnimationTimeline/clone.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LAnimationTimeline"
        },
        {
            "file": "display/LAnimationTimeline.js",
            "line": 171,
            "description": "在LAnimationTimeline实例的时间轴中设置标签。",
            "itemtype": "method",
            "name": "setLabel",
            "params": [
                {
                    "name": "name",
                    "description": "标签名称.",
                    "type": "String"
                },
                {
                    "name": "rowIndex",
                    "description": "行号.",
                    "type": "Int"
                },
                {
                    "name": "colIndex",
                    "description": "列号.",
                    "type": "Int"
                },
                {
                    "name": "mode",
                    "description": "(1,0,-1)分别代表(正序播放,静止,倒序播放)。",
                    "type": "Int"
                },
                {
                    "name": "isMirror",
                    "description": "是否使用镜像来水平翻转显示对象。",
                    "type": "Boolean"
                }
            ],
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(200,\"legend\",800,450,main);\n\tfunction loadBitmapdata(event){\n\t\tvar backLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tvar list = LGlobal.divideCoordinate(480,630,3,4);\n\t\tvar data = new LBitmapData(event.target,0,0,120,210);\n\t\tvar player = new LAnimationTimeline(backLayer,data,list);\n\t\tplayer.setLabel(\"right\",2,0,1,true);\n\t\tbackLayer.addChild(player);\n\t\tplayer.gotoAndPlay(\"right\");\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LAnimationTimeline/setLabel.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LAnimationTimeline"
        },
        {
            "file": "display/LAnimationTimeline.js",
            "line": 203,
            "description": "开始播放 LAnimationTimeline 动画。",
            "itemtype": "method",
            "name": "play",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(200,\"legend\",800,450,main);\n\tfunction loadBitmapdata(event){\n\t\tvar backLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tvar list = LGlobal.divideCoordinate(480,630,3,4);\n\t\tvar data = new LBitmapData(event.target,0,0,120,210);\n\t\tvar player = new LAnimationTimeline(backLayer,data,list);\n\t\tplayer.setLabel(\"right\",2,0,1,true);\n\t\tbackLayer.addChild(player);\n\t\tplayer.gotoAndPlay(\"right\");\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LAnimationTimeline/play_stop.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LAnimationTimeline"
        },
        {
            "file": "display/LAnimationTimeline.js",
            "line": 225,
            "description": "停止播放 LAnimationTimeline 动画。",
            "itemtype": "method",
            "name": "stop",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(200,\"legend\",800,450,main);\n\tfunction loadBitmapdata(event){\n\t\tvar backLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tvar list = LGlobal.divideCoordinate(480,630,3,4);\n\t\tvar data = new LBitmapData(event.target,0,0,120,210);\n\t\tvar player = new LAnimationTimeline(backLayer,data,list);\n\t\tplayer.setLabel(\"right\",2,0,1,true);\n\t\tbackLayer.addChild(player);\n\t\tplayer.gotoAndPlay(\"right\");\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LAnimationTimeline/play_stop.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LAnimationTimeline"
        },
        {
            "file": "display/LAnimationTimeline.js",
            "line": 247,
            "description": "从指定标签开始播放 LAnimationTimeline 动画。",
            "itemtype": "method",
            "name": "gotoAndPlay",
            "params": [
                {
                    "name": "label",
                    "description": "表示播放头转到的帧标签的字符串。",
                    "type": "String"
                }
            ],
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(200,\"legend\",800,450,main);\n\tfunction loadBitmapdata(event){\n\t\tvar backLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tvar list = LGlobal.divideCoordinate(480,630,3,4);\n\t\tvar data = new LBitmapData(event.target,0,0,120,210);\n\t\tvar player = new LAnimationTimeline(backLayer,data,list);\n\t\tplayer.setLabel(\"right\",2,0,1,true);\n\t\tbackLayer.addChild(player);\n\t\tplayer.gotoAndPlay(\"right\");\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LAnimationTimeline/gotoAndPlay.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LAnimationTimeline"
        },
        {
            "file": "display/LAnimationTimeline.js",
            "line": 273,
            "description": "将播放头移到影片剪辑的指定标签并停在那里。",
            "itemtype": "method",
            "name": "gotoAndStop",
            "params": [
                {
                    "name": "label",
                    "description": "表示播放头转到的帧标签的字符串。",
                    "type": "String"
                }
            ],
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(200,\"legend\",800,450,main);\n\tfunction loadBitmapdata(event){\n\t\tvar backLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tvar list = LGlobal.divideCoordinate(480,630,3,4);\n\t\tvar data = new LBitmapData(event.target,0,0,120,210);\n\t\tvar player = new LAnimationTimeline(backLayer,data,list);\n\t\tplayer.setLabel(\"right\",2,0,1,true);\n\t\tbackLayer.addChild(player);\n\t\tplayer.gotoAndStop(\"right\");\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LAnimationTimeline/gotoAndStop.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LAnimationTimeline"
        },
        {
            "file": "display/LAnimationTimeline.js",
            "line": 299,
            "description": "向指定标签位置添加执行脚本。",
            "itemtype": "method",
            "name": "addFrameScript",
            "params": [
                {
                    "name": "label",
                    "description": "指定标签。",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "动画到达指定标签位置时要执行的函数。",
                    "type": "Function"
                },
                {
                    "name": "params",
                    "description": "执行函数时的参数。",
                    "type": "Array"
                }
            ],
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(200,\"legend\",800,450,main);\n\tfunction loadBitmapdata(event){\n\t\tvar backLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tvar list = LGlobal.divideCoordinate(480,630,3,4);\n\t\tvar data = new LBitmapData(event.target,0,0,120,210);\n\t\tvar player = new LAnimationTimeline(backLayer,data,list);\n\t\tplayer.setLabel(\"right\",2,0,1,true);\n\t\tplayer.addFrameScript(\"right\",scriptTest,[\"testParams1\",\"testParams2\"]);\n\t\tbackLayer.addChild(player);\n\t\tplayer.gotoAndPlay(\"right\");\n\t}\n\tfunction scriptTest(param1,param2){\n\t\ttrace(\"scriptTest Run : \" + param1 + \",\" + param2);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LAnimationTimeline/addFrameScript.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LAnimationTimeline"
        },
        {
            "file": "display/LAnimationTimeline.js",
            "line": 333,
            "description": "删除指定标签位置的执行脚本。",
            "itemtype": "method",
            "name": "removeFrameScript",
            "params": [
                {
                    "name": "label",
                    "description": "指定标签。",
                    "type": "String"
                }
            ],
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(200,\"legend\",800,450,main);\n\tfunction loadBitmapdata(event){\n\t\tvar backLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tvar list = LGlobal.divideCoordinate(480,630,3,4);\n\t\tvar data = new LBitmapData(event.target,0,0,120,210);\n\t\tvar player = new LAnimationTimeline(backLayer,data,list);\n\t\tplayer.setLabel(\"right\",2,0,1,true);\n\t\tplayer.addFrameScript(\"right\",scriptTest,[\"testParams1\",\"testParams2\"]);\n\t\tbackLayer.addChild(player);\n\t\tplayer.gotoAndPlay(\"right\");\n\t}\n\tfunction scriptTest(param1,param2){\n\t\ttrace(\"scriptTest Run : \" + param1 + \",\" + param2);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LAnimationTimeline/removeFrameScript.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LAnimationTimeline"
        },
        {
            "file": "display/LBitmap.js",
            "line": 32,
            "description": "对象的类型",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "LBitmap",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LBitmap"
        },
        {
            "file": "display/LBitmap.js",
            "line": 41,
            "description": "LBitmap对象的旋转中心设置为对象的中心，此属性默认值为true，如果对象发生旋转时，会导致该对象相关的鼠标点击以及碰撞失效。如果需要使该对象旋转后依然保持鼠标事件有效的话，需要将它的值设置为false。",
            "itemtype": "property",
            "name": "rotateCenter",
            "type": "Boolean",
            "default": "true",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LBitmap"
        },
        {
            "file": "display/LBitmap.js",
            "line": 50,
            "description": "被引用的 LBitmapData 对象",
            "itemtype": "property",
            "name": "bitmapData",
            "type": "LBitmapData",
            "default": "true",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LBitmap"
        },
        {
            "file": "display/LBitmap.js",
            "line": 97,
            "description": "返回一个LBitmap的克隆对象。",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "一个新的 LBitmap 对象，它与原始对象相同.",
                "type": "LBitmap"
            },
            "since": "1.8.2",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar bmd = new LBitmapData(\"#FF0000\", 0, 0, 100, 100);\n\tvar bm1 = new LBitmap(bmd);\n\taddChild(bm1);\n\t\n\tvar bm2 = bm1.clone();\n\tbm2.x = 120;\n\taddChild(bm2);"
            ],
            "examplelink": "<p><a href=\"../../../api/LBitmap/clone.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LBitmap"
        },
        {
            "file": "display/LBitmap.js",
            "line": 137,
            "description": "获取显示对象的宽度，以像素为单位。",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "显示对象的宽度。",
                "type": "Float"
            },
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar bitmapdata = new LBitmapData(event.target);  \n\tvar bitmap = new LBitmap(bitmapdata);\n\taddChild(bitmap);\n\ttrace(\"width : \" + bitmap.getWidth());"
            ],
            "examplelink": "<p><a href=\"../../../api/LBitmap/getWidth.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LBitmap"
        },
        {
            "file": "display/LBitmap.js",
            "line": 167,
            "description": "获取显示对象的高度，以像素为单位。",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "显示对象的高度。",
                "type": "Float"
            },
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar bitmapdata = new LBitmapData(event.target);  \n\tvar bitmap = new LBitmap(bitmapdata);\n\taddChild(bitmap);\n\ttrace(\"height : \" + bitmap.getHeight());"
            ],
            "examplelink": "<p><a href=\"../../../api/LBitmap/getHeight.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LBitmap"
        },
        {
            "file": "display/LBitmap.js",
            "line": 210,
            "description": "不可用。",
            "itemtype": "event",
            "name": "LEvent.ENTER_FRAME",
            "class": "LBitmap"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 45,
            "description": "位图图像的位置x，以像素为单位。",
            "itemtype": "property",
            "name": "x",
            "type": "float",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 53,
            "description": "位图图像的位置y，以像素为单位。",
            "itemtype": "property",
            "name": "y",
            "type": "float",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 61,
            "description": "位图图像的宽度，以像素为单位。",
            "itemtype": "property",
            "name": "width",
            "type": "float",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 69,
            "description": "位图图像的高度，以像素为单位。",
            "itemtype": "property",
            "name": "height",
            "type": "float",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 77,
            "description": "数据格式，LBitmapData.DATA_IMAGE（Image对象）或者LBitmapData.DATA_CANVAS（Canvas对象）",
            "itemtype": "property",
            "name": "dataType",
            "type": "String",
            "since": "1.8.8",
            "access": "public",
            "tagname": "",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 116,
            "description": "LBitmapData数据保存形式的一种，以Image对象形式保存。",
            "itemtype": "property",
            "name": "LBitmapData.DATA_IMAGE",
            "type": "String",
            "since": "1.8.8",
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 125,
            "description": "LBitmapData数据保存形式的一种，以Canvas对象形式保存。",
            "itemtype": "property",
            "name": "LBitmapData.DATA_CANVAS",
            "type": "String",
            "since": "1.8.8",
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 162,
            "description": "<p>擦除LBitmapData</p>\n<p>使用条件：数据保存形式为LBitmapData.DATA_CANVAS。</p>",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "rectangle",
                    "description": "擦除范围，默认为全部擦除。",
                    "type": "LRectangle"
                }
            ],
            "access": "public",
            "tagname": "",
            "since": "1.9.12",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 182,
            "description": "用来改变LBitmapData内Image的可视范围",
            "itemtype": "method",
            "name": "setProperties",
            "params": [
                {
                    "name": "x",
                    "description": "Image可视范围x坐标。",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "Image可视范围y坐标。",
                    "type": "Float"
                },
                {
                    "name": "width",
                    "description": "Image可视范围宽。",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "Image可视范围高。",
                    "type": "Float"
                }
            ],
            "example": [
                "\n\tvar bitmapdata1 = new LBitmapData(event.target, 0, 0, 200, 200);\n\tvar bitmap1 = new LBitmap(bitmapdata1);\n\taddChild(bitmap1);\n\n\tvar bitmapdata2 = new LBitmapData(event.target);\n\tbitmapdata2.setProperties(50, 100, 200, 50);\n\tvar bitmap2 = new LBitmap(bitmapdata2);\n\tbitmap2.x = 240;\n\taddChild(bitmap2);"
            ],
            "examplelink": "<p><a href=\"../../../api/LBitmapData/setProperties.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.0.0",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 211,
            "description": "用来改变LBitmapData内Image的可视范围的起点位置坐标",
            "itemtype": "method",
            "name": "setCoordinate",
            "params": [
                {
                    "name": "x",
                    "description": "Image可视范围x坐标。",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "Image可视范围y坐标。",
                    "type": "Float"
                }
            ],
            "example": [
                "\n\tvar bitmapdata1 = new LBitmapData(event.target, 20, 20, 100, 100);\n\tvar bitmap1 = new LBitmap(bitmapdata1);\n\taddChild(bitmap1);\n\n\tvar bitmapdata2 = new LBitmapData(event.target, 20, 20, 100, 100);\n\tbitmapdata2.setCoordinate(100, 100);\n\tvar bitmap2 = new LBitmap(bitmapdata2);\n\tbitmap2.x = 120;\n\taddChild(bitmap2);"
            ],
            "examplelink": "<p><a href=\"../../../api/LBitmapData/setCoordinate.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 236,
            "description": "返回一个LBitmapData的克隆对象。",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "一个新的 LBitmapData 对象，它与原始对象相同.",
                "type": "LBitmapData"
            },
            "since": "1.8.2",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar bmd1 = new LBitmapData(\"#FF0000\", 0, 0, 100, 100);\n\tvar bm1 = new LBitmap(bmd1);\n\taddChild(bm1);\n\n\tvar bmd2 = bmd1.clone();\n\tvar bm2 = new LBitmap(bmd2);\n\tbm2.x = 120;\n\taddChild(bm2);"
            ],
            "examplelink": "<p><a href=\"../../../api/LBitmapData/clone.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 269,
            "description": "<p>取得一个源图像和一个滤镜对象，并生成过滤的图像。</p>\n<p>此方法依赖于内置滤镜对象的行为，这些对象确定受输入源矩形影响的目标矩形。</p>",
            "itemtype": "method",
            "name": "applyFilter",
            "params": [
                {
                    "name": "sourceBitmapData",
                    "description": "要使用的输入位图图像。源图像可以是另一个 LBitmapData 对象，也可以引用当前 LBitmapData 实例。",
                    "type": "LBitmapData"
                },
                {
                    "name": "sourceRect",
                    "description": "定义要用作输入的源图像区域的矩形。",
                    "type": "LRectangle"
                },
                {
                    "name": "destPoint",
                    "description": "目标图像（当前 LBitmapData 实例）中与源矩形的左上角对应的点。",
                    "type": "LPoint"
                },
                {
                    "name": "filter",
                    "description": "用于执行过滤操作的滤镜对象。",
                    "type": "LBitmapFilter"
                }
            ],
            "since": "1.9.11",
            "access": "public",
            "tagname": "",
            "examplelink": "<p><a href=\"../../../api/LBitmapData/applyFilter.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 287,
            "description": "返回一个数组，它表示 LBitmapData 对象中在特定点 (x, y) 处的 RGB 像素数据。",
            "itemtype": "method",
            "name": "getPixel",
            "params": [
                {
                    "name": "x",
                    "description": "指定坐标点x坐标。",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "指定坐标点y坐标。",
                    "type": "Int"
                },
                {
                    "name": "colorType",
                    "description": "指定获取的颜色种类。[number|array]（可省略）。",
                    "type": "String"
                }
            ],
            "return": {
                "description": "像素数据。",
                "type": "Array"
            },
            "since": "1.5.1",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar bitmapData = new LBitmapData(event.target);\n\tbitmapData2 = new LBitmapData(null, 0, 0, 500, 400);\n\tvar img, imgs = [], arr;\n\tbitmapData.lock();\n\tfor (var i = 0; i < 50; i++) {\n\t\t arr = [];\n\t\t for (var j = 0; j < 50; j++) {\n\t\t\timg = bitmapData.getPixel(100 + i, 100 + j);\n\t\t\tarr.push(img);\n\t\t}\n\t\timgs.push(arr);\n\t}\n\tbitmapData.unlock();\n\tbitmapData2.lock();\n\tfor (var i = 0; i < 50; i++) {\n\t\tarr = imgs[i];\n\t\tfor (var j = 0; j < 50; j++) {\n\t\t\timg = arr[j];\n\t\t\tbitmapData2.setPixel(i, j, img);\n\t\t}\n\t}\n\tbitmapData2.unlock();\n\tvar bitmap = new LBitmap(bitmapData);\n\taddChild(bitmap);\n\tvar bitmap2 = new LBitmap(bitmapData2);\n\tbitmap2.x = 250;\n\taddChild(bitmap2);"
            ],
            "examplelink": "<p><a href=\"../../../api/LBitmapData/getPixel.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 344,
            "description": "返回一个数组，它表示 LBitmapData 对象中在特定点 (x, y) 处的 RGB 像素数据。",
            "itemtype": "method",
            "name": "setPixel",
            "params": [
                {
                    "name": "x",
                    "description": "指定坐标点x坐标。",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "指定坐标点y坐标。",
                    "type": "Int"
                },
                {
                    "name": "data",
                    "description": "像素数据。",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "像素数据。",
                "type": "Array"
            },
            "since": "1.5.1",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar bitmapData = new LBitmapData(event.target);\n\tbitmapData2 = new LBitmapData(null, 0, 0, 500, 400);\n\tvar img, imgs = [], arr;\n\tbitmapData.lock();\n\tfor (var i = 0; i < 50; i++) {\n\t\t arr = [];\n\t\t for (var j = 0; j < 50; j++) {\n\t\t\timg = bitmapData.getPixel(100 + i, 100 + j);\n\t\t\tarr.push(img);\n\t\t}\n\t\timgs.push(arr);\n\t}\n\tbitmapData.unlock();\n\tbitmapData2.lock();\n\tfor (var i = 0; i < 50; i++) {\n\t\tarr = imgs[i];\n\t\tfor (var j = 0; j < 50; j++) {\n\t\t\timg = arr[j];\n\t\t\tbitmapData2.setPixel(i, j, img);\n\t\t}\n\t}\n\tbitmapData2.unlock();\n\tvar bitmap = new LBitmap(bitmapData);\n\taddChild(bitmap);\n\tvar bitmap2 = new LBitmap(bitmapData2);\n\tbitmap2.x = 250;\n\taddChild(bitmap2);"
            ],
            "examplelink": "<p><a href=\"../../../api/LBitmapData/setPixel.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 409,
            "description": "返回一个数组，它表示 LBitmapData 对象中在特定矩形区域rect中的像素数据。",
            "itemtype": "method",
            "name": "getPixels",
            "params": [
                {
                    "name": "rect",
                    "description": "指定矩形。",
                    "type": "LRectangle"
                }
            ],
            "return": {
                "description": "返回该矩形区域的像素数据。",
                "type": "Array"
            },
            "since": "1.5.1",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar bitmapData = new LBitmapData(event.target);\n\tbitmapData2 = new LBitmapData(null, 0, 0, 500, 400);\n\tvar img = bitmapData.getPixels(new LRectangle(75, 50, 100, 100));\n\tbitmapData2.lock();\n\tbitmapData2.setPixels(new LRectangle(50, 30, 50, 50), img);\n\tbitmapData2.setPixels(new LRectangle(100, 30, 50, 50), img);\n\tbitmapData2.setPixels(new LRectangle(150, 30, 50, 50), img);\n\tbitmapData2.setPixels(new LRectangle(200, 30, 50, 50), img);\n\tbitmapData2.unlock();\n\n\tvar bitmap = new LBitmap(bitmapData);\n\taddChild(bitmap);\n\n\tvar bitmap2 = new LBitmap(bitmapData2);\n\tbitmap2.y = 250;\n\taddChild(bitmap2);"
            ],
            "examplelink": "<p><a href=\"../../../api/LBitmapData/getPixels.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 446,
            "description": "设置 LBitmapData 对象的指定区域的像素数据。",
            "itemtype": "method",
            "name": "setPixels",
            "params": [
                {
                    "name": "rect",
                    "description": "指定矩形。",
                    "type": "LRectangle"
                },
                {
                    "name": "data",
                    "description": "像素数据。（ImageData对象 | 字符串\"#000000\" | 数值0x000000）",
                    "type": "Array"
                }
            ],
            "since": "1.5.1",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar bitmapData = new LBitmapData(event.target);\n\tbitmapData2 = new LBitmapData(null, 0, 0, 500, 400);\n\tvar img = bitmapData.getPixels(new LRectangle(75, 50, 100, 100));\n\tbitmapData2.lock();\n\tbitmapData2.setPixels(new LRectangle(50, 30, 50, 50), img);\n\tbitmapData2.setPixels(new LRectangle(100, 30, 50, 50), img);\n\tbitmapData2.setPixels(new LRectangle(150, 30, 50, 50), img);\n\tbitmapData2.setPixels(new LRectangle(200, 30, 50, 50), img);\n\tbitmapData2.unlock();\n\n\tvar bitmap = new LBitmap(bitmapData);\n\taddChild(bitmap);\n\n\tvar bitmap2 = new LBitmap(bitmapData2);\n\tbitmap2.y = 250;\n\taddChild(bitmap2);"
            ],
            "examplelink": "<p><a href=\"../../../api/LBitmapData/setPixels.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 510,
            "description": "<p>设置 LBitmapData 对象的指定区域的像素数据。使用条件如下：</p>\n<p>1，数据保存形式为LBitmapData.DATA_CANVAS。</p>\n<p>2，每桢单次或少量次数操作，且不与setPixel,setPixels,getPixel,getPixels等函数同时进行。</p>\n<p>满足以上两个条件，可以使用putPixels来代替setPixels来更快速的设置像素，且不需要lock和unlock。</p>",
            "itemtype": "method",
            "name": "putPixels",
            "params": [
                {
                    "name": "rect",
                    "description": "指定矩形。",
                    "type": "LRectangle"
                },
                {
                    "name": "data",
                    "description": "像素数据。（ImageData对象）",
                    "type": "Array"
                }
            ],
            "since": "1.9.1",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar bitmapData = new LBitmapData(event.target);\n\tbitmapData2 = new LBitmapData(null, 0, 0, 500, 400,LBitmapData.DATA_CANVAS);\n\tbitmapData.lock();\n\tvar img = bitmapData.getPixels(new LRectangle(75, 50, 100, 100));\n\tbitmapData.unlock();\n\n\tbitmapData2.putPixels(new LRectangle(50, 30, 50, 50), img);\n\n\tvar bitmap = new LBitmap(bitmapData);\n\taddChild(bitmap);\n\n\tvar bitmap2 = new LBitmap(bitmapData2);\n\tbitmap2.y = 250;\n\taddChild(bitmap2);"
            ],
            "examplelink": "<p><a href=\"../../../api/LBitmapData/putPixels.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 544,
            "description": "此函数将操作对象锁定，保证操作对象在另一个临时操作的canvas上只绘制一遍。",
            "itemtype": "method",
            "name": "lock",
            "since": "1.5.1",
            "access": "public",
            "tagname": "",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 555,
            "description": "拷贝像素等操作结束后，解除对操作对象的锁定。",
            "itemtype": "method",
            "name": "unlock",
            "since": "1.5.1",
            "access": "public",
            "tagname": "",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 566,
            "description": "在LBitmapData位图图像上绘制 source 显示对象。可以指定 matrix、colorTransform、blendMode 和目标 clipRect 参数来控制呈现的执行方式。您可以根据需要指定是否应在缩放时对位图进行平滑处理。",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "source",
                    "description": "要绘制到 LBitmapData 对象的显示对象或 LBitmapData 对象。",
                    "type": "LDisplayObject|LBitmapData"
                },
                {
                    "name": "matrix",
                    "description": "一个 Matrix 对象，用于缩放、旋转位图或转换位图的坐标。如果不想将矩阵转换应用于图像，请将此参数设置为恒等矩阵（使用默认 new LMatrix() 构造函数创建），或传递 null 值。",
                    "type": "LMatrix"
                },
                {
                    "name": "colorTransform",
                    "description": "一个 LColorTransform 对象，用于调整位图的颜色值。如果没有提供任何对象，则不会转换位图图像的颜色。如果必须传递此参数但又不想转换图像，请将此参数设置为使用默认 new LColorTransform() 构造函数创建的 LColorTransform 对象。<p><a href=\"../../../api/LBitmapData/draw2.html\" target=\"_blank\">测试链接</a></p>",
                    "type": "LColorTransform"
                },
                {
                    "name": "blendMode",
                    "description": "来自 LBlendMode 类的一个字符串值，指定要应用于所生成位图的混合模式。<p><a href=\"../../../api/LBitmapData/draw2.html\" target=\"_blank\">测试链接</a></p>",
                    "type": "String"
                },
                {
                    "name": "clipRect",
                    "description": "一个 LRectangle 对象，定义要绘制的源对象的区域。 如果不提供此值，则不会进行剪裁，并且将绘制整个源对象。<p><a href=\"../../../api/LBitmapData/draw2.html\" target=\"_blank\">测试链接</a></p>",
                    "type": "LRectangle"
                }
            ],
            "since": "1.7.7",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar layer = new LSprite();\n\tlayer.graphics.drawRect(1, \"#000000\", [0, 0, 100, 100], true, \"#000000\");\n\tlayer.graphics.drawRect(1, \"#FF0000\", [100, 0, 100, 100], true, \"#FF0000\");\n\taddChild(layer);\n\n\tvar bitmapData = new LBitmapData(null, 0, 0, 500, 400);\n\tbitmapData.draw(layer);\n\tvar bitmap = new LBitmap(bitmapData);\n\tbitmap.y = 150;\n\taddChild(bitmap);"
            ],
            "examplelink": "<p><a href=\"../../../api/LBitmapData/draw.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 648,
            "description": "<p>使用 LColorTransform 对象调整位图图像的指定区域中的颜色值。如果矩形与位图图像的边界匹配，则此方法将转换整个图像的颜色值。</p>\n<p>使用条件：数据保存形式为LBitmapData.DATA_CANVAS。</p>",
            "itemtype": "method",
            "name": "colorTransform",
            "params": [
                {
                    "name": "rect",
                    "description": "一个 LRectangle 对象，它定义在其中应用 LColorTransform 对象的图像区域。",
                    "type": "LRectangle"
                },
                {
                    "name": "colorTransform",
                    "description": "一个 LColorTransform 对象，它描述要应用的颜色转换值。",
                    "type": "LColorTransform"
                }
            ],
            "since": "1.9.4",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tvar loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata);\n\t\tloader.load(\"face.jpg\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata (event) {\n\t\tvar bitmapData = new LBitmapData(event.target, 0, 0, 240, 240, LBitmapData.DATA_CANVAS);\n\t\tvar rect = new LRectangle(50, 50, 90, 90);\n\t\tvar colorTransform = new LColorTransform(0.5, 0.7, 0.4, 1, 0, 0, 0, 0);\n\t\tbitmapData.colorTransform(rect, colorTransform);\n\t\tvar bitmap = new LBitmap(bitmapData);\n\t\taddChild(bitmap);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LBitmapData/colorTransform.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBitmapData.js",
            "line": 690,
            "description": "<p>此方法在目标 LBitmapData 对象的目标点将源图像的矩形区域复制为同样大小的矩形区域。</p>\n<p>使用条件：数据保存形式为LBitmapData.DATA_CANVAS。</p>",
            "itemtype": "method",
            "name": "copyPixels",
            "params": [
                {
                    "name": "sourceBitmapData",
                    "description": "要从中复制像素的输入位图图像。源图像可以是另一个 LBitmapData 实例，也可以指当前 LBitmapData 实例。",
                    "type": "LBitmapData"
                },
                {
                    "name": "sourceRect",
                    "description": "定义要用作输入的源图像区域的矩形。",
                    "type": "LRectangle"
                },
                {
                    "name": "destPoint",
                    "description": "目标点，它表示将在其中放置新像素的矩形区域的左上角。",
                    "type": "LPoint"
                }
            ],
            "since": "1.9.4",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tvar loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata);\n\t\tloader.load(\"face.jpg\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata (event) {\n\t\tvar bitmapData = new LBitmapData(event.target);\n\t\tbitmapData2 = new LBitmapData(null, 0, 0, 240, 240, LBitmapData.DATA_CANVAS);\n\t\tbitmapData2.copyPixels(bitmapData, new LRectangle(0, 0, 240, 240), new LPoint(0,0));\n\t\tbitmapData2.copyPixels(bitmapData, new LRectangle(50, 50, 100, 100), new LPoint(0,50));\n\t\tbitmapData2.copyPixels(bitmapData, new LRectangle(100, 50, 100, 100), new LPoint(50,150));\n\n\t\tvar bitmap = new LBitmap(bitmapData);\n\t\taddChild(bitmap);\n\n\t\tvar bitmap2 = new LBitmap(bitmapData2);\n\t\tbitmap2.y = 250;\n\t\taddChild(bitmap2);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LBitmapData/copyPixels.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LBitmapData"
        },
        {
            "file": "display/LBlendMode.js",
            "line": 17,
            "description": "[静态] 新图形绘制于已有图形的顶部。这是默认的行为。",
            "itemtype": "property",
            "name": "SOURCE_OVER",
            "type": "String",
            "static": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LBlendMode"
        },
        {
            "file": "display/LBlendMode.js",
            "line": 26,
            "description": "[静态] 只有在新图形和已有内容重叠的地方，才绘制新图形。",
            "itemtype": "property",
            "name": "SOURCE_ATOP",
            "type": "String",
            "static": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LBlendMode"
        },
        {
            "file": "display/LBlendMode.js",
            "line": 35,
            "description": "[静态] 在新图形以及已有内容重叠的地方，新图形才绘制。所有其他内容成为透明。",
            "itemtype": "property",
            "name": "SOURCE_IN",
            "type": "String",
            "static": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LBlendMode"
        },
        {
            "file": "display/LBlendMode.js",
            "line": 44,
            "description": "[静态] 只有在和已有图形不重叠的地方，才绘制新图形。",
            "itemtype": "property",
            "name": "SOURCE_OUT",
            "type": "String",
            "static": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LBlendMode"
        },
        {
            "file": "display/LBlendMode.js",
            "line": 53,
            "description": "[静态] 新图形绘制于已有内容的后面。",
            "itemtype": "property",
            "name": "DESTINATION_OVER",
            "type": "String",
            "static": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LBlendMode"
        },
        {
            "file": "display/LBlendMode.js",
            "line": 62,
            "description": "[静态] 已有的内容只有在它和新的图形重叠的地方保留。新图形绘制于内容之后。",
            "itemtype": "property",
            "name": "DESTINATION_ATOP",
            "type": "String",
            "static": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LBlendMode"
        },
        {
            "file": "display/LBlendMode.js",
            "line": 71,
            "description": "[静态] 在新图形以及已有画布重叠的地方，已有内容都保留。所有其他内容成为透明的。",
            "itemtype": "property",
            "name": "DESTINATION_IN",
            "type": "String",
            "static": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LBlendMode"
        },
        {
            "file": "display/LBlendMode.js",
            "line": 80,
            "description": "[静态] 在已有内容和新图形不重叠的地方，已有内容保留。所有其他内容成为透明。",
            "itemtype": "property",
            "name": "DESTINATION_OUT",
            "type": "String",
            "static": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LBlendMode"
        },
        {
            "file": "display/LBlendMode.js",
            "line": 89,
            "description": "[静态] 在图形重叠的地方，颜色由两种颜色值的加值来决定。",
            "itemtype": "property",
            "name": "LIGHTER",
            "type": "String",
            "static": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LBlendMode"
        },
        {
            "file": "display/LBlendMode.js",
            "line": 98,
            "description": "[静态] 只绘制新图形，删除其他所有内容。",
            "itemtype": "property",
            "name": "COPY",
            "type": "String",
            "static": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LBlendMode"
        },
        {
            "file": "display/LBlendMode.js",
            "line": 107,
            "description": "[静态] 在重叠和正常绘制的其他地方，图形都成为透明的。",
            "itemtype": "property",
            "name": "XOR",
            "type": "String",
            "static": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LBlendMode"
        },
        {
            "file": "display/LBlendMode.js",
            "line": 116,
            "description": "[静态] 不使用混合模式。",
            "itemtype": "property",
            "name": "NONE",
            "type": "String",
            "static": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LBlendMode"
        },
        {
            "file": "display/LBlendMode.js",
            "line": 125,
            "description": "[静态] 等同于NONE。",
            "itemtype": "property",
            "name": "NORMAL",
            "type": "String",
            "static": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LBlendMode"
        },
        {
            "file": "display/LButton.js",
            "line": 25,
            "description": "对象的类型",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "LButton",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LButton"
        },
        {
            "file": "display/LButton.js",
            "line": 59,
            "description": "指定此 LButton 的按钮模式。如果为 true，此 sprite 的行为方式就像按钮，这表示它可在指针经过 LButton 时触发显示手形光标(PC)。",
            "itemtype": "property",
            "name": "buttonMode",
            "type": "Boolean",
            "default": "true",
            "since": "1.8.10",
            "example": [
                "\n\tLGlobal.setDebug(true);\n\tvar button01 = new LButtonSample1(\"buttonMode=true\");\n\tbutton01.x = button01.y = 20;\n\taddChild(button01);\n\tbutton01.addEventListener(LMouseEvent.MOUSE_DOWN,function(e){\n\t\ttrace(\"button01 click\");\n\t});\n\tvar button02 = new LButtonSample1(\"buttonMode=false\");\n\tbutton02.x = 20;\n\tbutton02.y = 150;\n\tbutton02.buttonMode = false;\n\taddChild(button02);\n\tbutton02.addEventListener(LMouseEvent.MOUSE_DOWN,function(e){\n\t\ttrace(\"button02 click\");\n\t});"
            ],
            "examplelink": "<p><a href=\"../../../api/LButton/buttonMode.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LButton"
        },
        {
            "file": "display/LButton.js",
            "line": 85,
            "description": "LButton对象被点击时，是否使用动画显示。",
            "itemtype": "property",
            "name": "staticMode",
            "type": "Boolean",
            "default": "false",
            "since": "1.9.0",
            "example": [
                "\n\tLGlobal.setDebug(true);\n\tvar button01 = new LButtonSample1(\"staticMode=false\");\n\tbutton01.x = button01.y = 20;\n\taddChild(button01);\n\tbutton01.addEventListener(LMouseEvent.MOUSE_DOWN,function(e){\n\t\ttrace(\"button01 click\");\n\t});\n\tvar button02 = new LButtonSample1(\"staticMode=true\");\n\tbutton02.x = 20;\n\tbutton02.y = 150;\n\tbutton02.staticMode = true;\n\taddChild(button02);\n\tbutton02.addEventListener(LMouseEvent.MOUSE_DOWN,function(e){\n\t\ttrace(\"button02 click\");\n\t});"
            ],
            "examplelink": "<p><a href=\"../../../api/LButton/staticMode.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LButton"
        },
        {
            "file": "display/LButton.js",
            "line": 118,
            "description": "[静态] 按钮的不可用状态",
            "itemtype": "property",
            "name": "STATE_DISABLE",
            "type": "String",
            "static": 1,
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LButton"
        },
        {
            "file": "display/LButton.js",
            "line": 127,
            "description": "[静态] 按钮的可用状态",
            "itemtype": "property",
            "name": "STATE_ENABLE",
            "type": "String",
            "static": 1,
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LButton"
        },
        {
            "file": "display/LButton.js",
            "line": 137,
            "description": "设定按钮是否可用。",
            "itemtype": "method",
            "name": "setState",
            "params": [
                {
                    "name": "state",
                    "description": "LButton.STATE_DISABLE | LButton.STATE_ENABLE。",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tLGlobal.setDebug(true);\n\tvar button01 = new LButtonSample1(\"LButton.STATE_ENABLE\");\n\tbutton01.x = button01.y = 20;\n\taddChild(button01);\n\tbutton01.addEventListener(LMouseEvent.MOUSE_DOWN,function(e){\n\t\ttrace(\"button01 click\");\n\t});\n\tvar button02 = new LButtonSample1(\"LButton.STATE_DISABLE\");\n\tbutton02.x = 20;\n\tbutton02.y = 150;\n\tbutton02.setState(LButton.STATE_DISABLE);\n\taddChild(button02);\n\tbutton02.addEventListener(LMouseEvent.MOUSE_DOWN,function(e){\n\t\ttrace(\"button02 click\");\n\t});"
            ],
            "examplelink": "<p><a href=\"../../../api/LButton/setState.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.9.0",
            "class": "LButton"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 17,
            "description": "表示 LDisplayObject 实例相对于父级 LDisplayObjectContainer 本地坐标的 x 坐标。如果该对象位于具有变形的 LDisplayObjectContainer 内，则它也位于包含 LDisplayObjectContainer 的本地坐标系中。因此，对于逆时针旋转 90 度的 LDisplayObjectContainer，该 LDisplayObjectContainer 的子级将继承逆时针旋转 90 度的坐标系。对象的坐标指的是注册点的位置。",
            "itemtype": "property",
            "name": "x",
            "type": "float",
            "default": "0",
            "since": "1.6.0",
            "access": "public",
            "tagname": "",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 26,
            "description": "表示 LDisplayObject 实例相对于父级 LDisplayObjectContainer 本地坐标的 y 坐标。如果该对象位于具有变形的 LDisplayObjectContainer 内，则它也位于包含 LDisplayObjectContainer 的本地坐标系中。因此，对于逆时针旋转 90 度的 LDisplayObjectContainer，该 LDisplayObjectContainer 的子级将继承逆时针旋转 90 度的坐标系。对象的坐标指的是注册点的位置。",
            "itemtype": "property",
            "name": "y",
            "type": "float",
            "default": "0",
            "since": "1.6.0",
            "access": "public",
            "tagname": "",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 37,
            "description": "表示从注册点开始应用的对象的水平缩放比例（百分比）。默认注册点为 (0,0)。1.0 等于 100% 缩放。",
            "itemtype": "property",
            "name": "scaleX",
            "type": "float",
            "default": "1",
            "since": "1.6.0",
            "access": "public",
            "tagname": "",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 46,
            "description": "表示从对象注册点开始应用的对象的垂直缩放比例（百分比）。默认注册点为 (0,0)。1.0 是 100% 缩放。",
            "itemtype": "property",
            "name": "scaleY",
            "type": "float",
            "default": "1",
            "since": "1.6.0",
            "access": "public",
            "tagname": "",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 55,
            "description": "表示指定对象的 Alpha 透明度值。有效值为 0（完全透明）到 1（完全不透明）。默认值为 1。alpha 设置为 0 的显示对象是活动的，即使它们不可见。",
            "itemtype": "property",
            "name": "alpha",
            "type": "float",
            "default": "1",
            "since": "1.6.0",
            "examplelink": "<p><a href=\"../../../api/LDisplayObject/alpha.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 65,
            "description": "显示对象是否可见。不可见的显示对象已被禁用。例如，如果 LInteractiveObject 实例的 visible=false，则无法单击该对象。",
            "itemtype": "property",
            "name": "visible",
            "type": "Boolean",
            "default": "true",
            "since": "1.6.0",
            "access": "public",
            "tagname": "",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 74,
            "description": "表示 LDisplayObject 实例距其原始方向的旋转程度，以度为单位。从 0 到 180 的值表示顺时针方向旋转；从 0 到 -180 的值表示逆时针方向旋转。对于此范围之外的值，可以通过加上或减去 360 获得该范围内的值。例如，my_video.rotate = 450语句与 my_video.rotate = 90 是相同的。",
            "itemtype": "property",
            "name": "rotate",
            "type": "float",
            "default": "0",
            "since": "1.6.0",
            "access": "public",
            "tagname": "",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 83,
            "description": "调用显示对象被指定的 mask 对象遮罩。要确保当舞台缩放时蒙版仍然有效，mask 显示对象必须处于显示列表的活动部分。但不绘制 mask 对象本身。将 mask 设置为 null 可删除蒙版。",
            "itemtype": "property",
            "name": "mask",
            "type": "LDisplayObject",
            "default": "null",
            "since": "1.6.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tfunction main () {\n\t    var loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata); \n\t\tloader.load(\"face.png\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata (event) {\n\t\tvar bitmapdata = new LBitmapData(event.target);  \n\t\tvar bitmap = new LBitmap(bitmapdata);\n\t\taddChild(bitmap);\n\t\tvar maskObj = new LSprite();\n\t\tmaskObj.graphics.drawRect(0, \"#ff0000\", [10, 10, 150, 100]);\n\t\tbitmap.mask = maskObj;\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LDisplayObject/mask.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 107,
            "description": "LBlendMode 类中的一个值，用于指定要使用的混合模式。 内部绘制位图的方法有两种。 如果启用了混合模式或外部剪辑遮罩，则将通过向矢量渲染器添加有位图填充的正方形来绘制位图。 如果尝试将此属性设置为无效值，运行时会将此值设置为 LBlendMode.NORMAL。",
            "itemtype": "property",
            "name": "blendMode",
            "type": "String",
            "default": "null",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 116,
            "description": "包含当前与显示对象关联的每个滤镜对象的索引数组。",
            "itemtype": "property",
            "name": "filters",
            "type": "Array",
            "default": "null",
            "since": "1.6.0",
            "access": "public",
            "tagname": "",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 125,
            "description": "<p>一个对象，具有与显示对象的矩阵有关的属性。在 LTransform 类的条目中对特定属性 matrix 进行了说明。</p>\n<p>transform 对象的每个属性本身都是一个对象。此概念很重要，因为设置 matrix 对象的新值的唯一方法是，创建新对象并将该对象复制到 transform.matrix 属性。</p>",
            "itemtype": "property",
            "name": "transform",
            "type": "LTransform",
            "since": "1.9.8",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tfunction main () {\n\t    var square = new LSprite();\n\t\tsquare.graphics.drawRect(1, \"#ff0000\", [0, 0, 150, 100],true);\n\t\taddChild(square);\n\t\tsquare.addEventListener(LMouseEvent.MOUSE_UP, transformer);\n\t}\n\tfunction transformer(event) {\n\t\tvar square = event.currentTarget;\n\t\tvar tempMatrix = new LMatrix();\n\t\ttempMatrix.skew(0.3, 0).translate(30,50);\n\t\tsquare.transform.matrix = tempMatrix;\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LDisplayObject/transform_matrix.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 148,
            "description": "<p>[只读] 表示包含此显示对象的 DisplayObjectContainer 对象。</p>\n<p>使用 parent 属性可以指定高于显示列表层次结构中当前显示对象的显示对象的相对路径。</p>\n<p>可以使用 parent 在显示列表中上移多个级别，如下所示：</p>\n<p>this.parent.parent.x = 20;</p>",
            "itemtype": "property",
            "name": "parent",
            "type": "LDisplayObjectContainer",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar sprite1 = new LSprite();\n\tsprite1.name = \"sprite1\";\n\tvar sprite2 = new LSprite();\n\tsprite2.name = \"sprite2\";\n\tvar sprite3 = new LSprite();\n\tsprite3.name = \"sprite3\";\n\tsprite1.addChild(sprite2);\n\tsprite2.addChild(sprite3);\n\ttrace(sprite2.parent.name); // sprite1\n\ttrace(sprite3.parent.name); // sprite2\n\ttrace(sprite3.parent.parent.name); // sprite1"
            ],
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 308,
            "description": "得到一个可显示对象相对于canvas标签左上点的坐标。",
            "itemtype": "method",
            "name": "getRootCoordinate",
            "return": {
                "description": "一个LPoint对象。",
                "type": "LPoint"
            },
            "since": "1.7.7",
            "access": "public",
            "tagname": "",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 318,
            "description": "<p>将 point 对象从显示对象的（本地）坐标转换为舞台（全局）坐标。</p>\n<p>此方法允许您将任何给定的 x 和 y 坐标从相对于特定显示对象原点 (0,0) 的值（本地坐标）转换为相对于舞台原点的值（全局坐标）。</p>\n<p>要使用此方法，请先创建 Point 类的一个实例。您分配的 x 和 y 的值表示本地坐标，因为它们是相对于显示对象原点的值。</p>\n<p>然后，您可以将创建的 Point 实例作为参数传递给 localToGlobal() 方法。该方法会返回一个新的 Point 对象，该对象具有相对于舞台原点（而不是显示对象原点）的 x 和 y 值。</p>",
            "itemtype": "method",
            "name": "localToGlobal",
            "params": [
                {
                    "name": "point",
                    "description": "使用 Point 类创建的点的名称或标识符，指定 x 和 y 坐标作为属性。",
                    "type": "LPoint"
                }
            ],
            "return": {
                "description": "具有相对于舞台的坐标的 Point 对象。",
                "type": "LPoint"
            },
            "since": "1.9.11",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tvar square;\n\tfunction main () {\n\t\tLGlobal.setDebug(true);\n\t\tsquare = new LSprite();\n\t\tsquare.graphics.drawRect(1,\"#000000\",[0, 0, 100, 100]);\n\t\tsquare.x = 100;\n\t\tsquare.y = 200;\n\t\taddChild(square);\n\t\tsquare.addEventListener(LMouseEvent.MOUSE_DOWN, traceCoordinates);\n\t}\n\tfunction traceCoordinates(event) {\n\t\tvar clickPoint = new LPoint(mouseX, mouseY);\n\t\ttrace(\"display object coordinates:\", clickPoint);\n\t\ttrace(\"stage coordinates:\", square.localToGlobal(clickPoint));\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LDisplayObject/localToGlobal.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 353,
            "description": "<p>将 point 对象从舞台（全局）坐标转换为显示对象的（本地）坐标。</p>\n<p>要使用此方法，请先创建 LPoint 类的一个实例。您分配的 x 和 y 值表示全局坐标，因为它们是相对于主显示区域的原点 (0,0) 的。然后将 LPoint 实例作为参数传递给 globalToLocal() 方法。该方法会返回一个新的 LPoint 对象，该对象具有相对于显示对象原点（而不是舞台原点）的 x 和 y 值。</p>",
            "itemtype": "method",
            "name": "globalToLocal",
            "params": [
                {
                    "name": "point",
                    "description": "用 LPoint 类创建的对象。 该 LPoint 对象指定 x 和 y 坐标作为属性。",
                    "type": "LPoint"
                }
            ],
            "return": {
                "description": "具有相对于显示对象的坐标的 LPoint 对象。",
                "type": "LPoint"
            },
            "since": "1.9.11",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tLGlobal.setDebug(true);\n\t\tvar circle = new LSprite();\n\t\tcircle.x = 10;\n\t\taddChild(circle);\n\t\tvar point1 = new LPoint(0, 0);\n\t\ttrace(circle.globalToLocal(point1)); // [x=-10, y=0]\n\t\tvar point2 = new LPoint(10, 1);\n\t\ttrace(circle.globalToLocal(point2)); // [x=0, y=1]\n\t\tvar point3 = new LPoint(30, 20);\n\t\ttrace(circle.globalToLocal(point3)); // [x=20, y=20]\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LDisplayObject/globalToLocal.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 383,
            "description": "返回一个矩形，该矩形定义相对于 targetCoordinateSpace 对象坐标系的显示对象区域。",
            "itemtype": "method",
            "name": "getBounds",
            "params": [
                {
                    "name": "targetCoordinateSpace",
                    "description": "定义要使用的坐标系的显示对象。",
                    "type": "LDisplayObject"
                }
            ],
            "return": {
                "description": "定义与 targetCoordinateSpace 对象坐标系统相关的显示对象面积的矩形。",
                "type": "LRectangle"
            },
            "since": "1.7.7",
            "access": "public",
            "tagname": "",
            "examplelink": "<p><a href=\"../../../api/LDisplayObject/getBounds.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 407,
            "description": "<p>如果设置为 true，则运行时将缓存显示对象的内部位图表示形式。此缓存可以提高包含复杂矢量内容的显示对象的性能。速度可能会大大加快，具体取决于矢量内容的复杂性。</p>\n<p>*动态改变的对象无法使用cacheAsBitmap</p>",
            "itemtype": "method",
            "name": "cacheAsBitmap",
            "params": [
                {
                    "name": "value",
                    "description": "分配给触摸点的整数(触摸设备)。",
                    "type": "Bool"
                }
            ],
            "example": [
                "\n\tvar layer = new LSprite();\n\tlayer.x = layer.y = 100;\n\taddChild(layer);\n\tvar bitmapdata = new LBitmapData(event.target);\n\tvar bitmap = new LBitmap(bitmapdata);\n\tlayer.addChild(bitmap);\n\tbitmap = new LBitmap(bitmapdata);\n\tbitmap.x = bitmap.y = 50;\n\tlayer.addChild(bitmap);\n\tvar sprite = new LSprite();\n\tsprite.graphics.drawRect(3, \"#000000\", [0, 0, 190, 100],true,\"#00FF00\");\n\tsprite.x = -100;\n\tlayer.addChild(sprite);\n\tlayer.cacheAsBitmap(true);"
            ],
            "examplelink": "<p><a href=\"../../../api/LDisplayObject/cacheAsBitmap.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.9.11",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 472,
            "description": "将该对象转换成base64编码的image字符串。",
            "itemtype": "method",
            "name": "getDataURL",
            "params": [
                {
                    "name": "type",
                    "description": "参数type在image/png，image/jpeg,image/svg+xml等 MIME类型中选择（可以不填，默认是image/png）。",
                    "type": "String"
                },
                {
                    "name": "ratio",
                    "description": "如果是type = “image/jpeg”，可以有第二个参数，如果第二个参数ratio的值在0-1之间，则表示JPEG的质量等级，否则使用浏览器内置默认质量等级。",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "base64编码的image字符串。",
                "type": "Base64 Image"
            },
            "since": "1.7.7",
            "access": "public",
            "tagname": "",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 487,
            "description": "通过构造函数向上查找对象。",
            "itemtype": "method",
            "name": "getParentByConstructor",
            "params": [
                {
                    "name": "constructor",
                    "description": "某个构造函数",
                    "type": "Constructor"
                }
            ],
            "return": {
                "description": "查找到的对象。",
                "type": "Object"
            },
            "since": "1.10.1",
            "example": [
                "\n\tfunction MyClass1(){\n\t    base(self,LSprite,[]);\n\t}\n\tfunction MyClass2(){\n\t    base(self,LSprite,[]);\n\t}\n\tvar obj1 = new MyClass1();\n\tvar obj2 = new MyClass2();\n\tvar obj3 = new LSprite();\n\taddChild(obj1);\n\tobj1.addChild(obj2);\n\tobj2.addChild(obj3);\n\ttrace(obj1.objectIndex == obj3.getParentByConstructor(MyClass1).objectIndex);//out: true\n\ttrace(obj2.objectIndex == obj3.getParentByConstructor(MyClass2).objectIndex);//out: true"
            ],
            "access": "public",
            "tagname": "",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 602,
            "description": "将对象自己从父容器中移除。",
            "itemtype": "method",
            "name": "remove",
            "since": "1.7.7",
            "access": "public",
            "tagname": "",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObject.js",
            "line": 622,
            "description": "[播放事件] 播放头进入新帧时调度。\n<p><a href=\"LEvent.html#property_ENTER_FRAME\">LEvent.ENTER_FRAME</a></p>",
            "itemtype": "event",
            "name": "LEvent.ENTER_FRAME",
            "class": "LDisplayObject"
        },
        {
            "file": "display/LDisplayObjectContainer.js",
            "line": 15,
            "description": "子对象列表",
            "itemtype": "property",
            "name": "childList",
            "type": "Array",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LDisplayObjectContainer"
        },
        {
            "file": "display/LDisplayObjectContainer.js",
            "line": 23,
            "description": "返回此对象的子项数目。",
            "itemtype": "property",
            "name": "numChildren",
            "type": "int",
            "since": "1.9.0",
            "example": [
                "\n\tvar container1 = new LSprite();\n\tvar container2 = new LSprite();\n\tvar circle1 = new LSprite();\n\tcircle1.graphics.drawRect(1,\"#000000\",[0,0,50,50]);\n\tvar circle2 = new LSprite();\n\tcircle2.graphics.drawRect(1,\"#000000\",[100,100,50,50]);\n\tcontainer2.addChild(container1);\n\tcontainer1.addChild(circle1);\n\tcontainer1.addChild(circle2);\n\ttrace(container1.numChildren); // 2\n\ttrace(container2.numChildren); // 1\n\ttrace(circle1.numChildren); // 0\n\ttrace(circle2.numChildren); // 0"
            ],
            "examplelink": "<p><a href=\"../../../api/LDisplayObjectContainer/numChildren.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LDisplayObjectContainer"
        },
        {
            "file": "display/LDisplayObjectContainer.js",
            "line": 46,
            "description": "确定对象的子级是否支持鼠标输入设备。",
            "itemtype": "property",
            "name": "mouseChildren",
            "type": "Boolean",
            "since": "1.9.0",
            "example": [
                "\n\tLGlobal.setDebug(true);\n\tvar container1 = new LSprite();\n\tcontainer1.x = container1.y = 20;\n\tvar container2 = new LSprite();\n\tcontainer2.x = 20;\n\tcontainer2.y = 100;\n\tcontainer2.mouseChildren = false;\n\taddChild(container1);\n\taddChild(container2);\n\tvar button01 = new LButtonSample1(\"mouseChildren=true\");\n\tcontainer1.addChild(button01);\n\tbutton01.addEventListener(LMouseEvent.MOUSE_DOWN,function(e){\n\t\ttrace(\"button01 click\");\n\t});\n\tvar button02 = new LButtonSample1(\"mouseChildren=false\");\n\tcontainer2.addChild(button02);\n\tbutton02.addEventListener(LMouseEvent.MOUSE_DOWN,function(e){\n\t\ttrace(\"button02 click\");\n\t});"
            ],
            "examplelink": "<p><a href=\"../../../api/LDisplayObjectContainer/mouseChildren.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LDisplayObjectContainer"
        },
        {
            "file": "display/LDisplayObjectContainer.js",
            "line": 77,
            "description": "<p>将一个 DisplayObject 子实例添加到该 LDisplayObjectContainer 实例中。子项将被添加到该 LDisplayObjectContainer 实例中其他所有子项的前（上）面。（要将某子项添加到特定索引位置，请使用 addChildAt() 方法。）</p>\n<p>如果添加一个已将其它显示对象容器作为父项的子对象，则会从其它显示对象容器的子列表中删除该对象。</p>",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "要作为该 LDisplayObjectContainer 实例的子项添加的 LDisplayObject 实例。",
                    "type": "LDisplayObject"
                }
            ],
            "return": {
                "description": "在 child 参数中传递的 LDisplayObject 实例。",
                "type": "LDisplayObject"
            },
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar bitmapdata = new LBitmapData(\"#FF0000\",0,0,100,100);  \n\tvar bitmap = new LBitmap(bitmapdata);\n\tvar layer = new LSprite();\n\taddChild(layer);\n\tlayer.addChild(bitmap);"
            ],
            "examplelink": "<p><a href=\"../../../api/LDisplayObjectContainer/addChild.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LDisplayObjectContainer"
        },
        {
            "file": "display/LDisplayObjectContainer.js",
            "line": 107,
            "description": "<p>将一个 LDisplayObject 子实例添加到该 LDisplayObjectContainer 实例中。该子项将被添加到指定的索引位置。索引为 0 表示该 LDisplayObjectContainer 对象的显示列表的后（底）部。</p>\n<p>例如，下例在索引位置 0、2、1 处分别显示 a、b、c 三个显示对象：</p>\n<p><img src=\"../../../api/LDisplayObjectContainer/LDisplayObjectContainer_layers.jpg\" /></p>\n<p>如果添加一个已将其它显示对象容器作为父项的子对象，则会从其它显示对象容器的子列表中删除该对象。</p>",
            "itemtype": "method",
            "name": "addChildAt",
            "params": [
                {
                    "name": "child",
                    "description": "要作为该 LDisplayObjectContainer 实例的子项添加的 LDisplayObject 实例。",
                    "type": "LDisplayObject"
                },
                {
                    "name": "index",
                    "description": "添加该子项的索引位置。 如果指定当前占用的索引位置，则该位置以及所有更高位置上的子对象会在子级列表中上移一个位置。",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "在 child 参数中传递的 LDisplayObject 实例。",
                "type": "LDisplayObject"
            },
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar container = new LSprite();\n\tvar circle1 = new LSprite();\n\tvar circle2 = new LSprite();\n\tcontainer.addChild(circle1);\n\tcontainer.addChildAt(circle2, 0);\n\ttrace(container.getChildAt(0) == circle2); // true\n\ttrace(container.getChildAt(1) == circle1); // true"
            ],
            "examplelink": "<p><a href=\"../../../api/LDisplayObjectContainer/addChildAt.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LDisplayObjectContainer"
        },
        {
            "file": "display/LDisplayObjectContainer.js",
            "line": 145,
            "description": "<p>从 LDisplayObjectContainer 实例的子列表中删除指定的 child LDisplayObject 实例。将已删除子项的 parent 属性设置为 null；如果不存在对该子项的任何其它引用，则将该对象作为垃圾回收。LDisplayObjectContainer 中该子项之上的任何显示对象的索引位置都减去 1。</p>",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": "要删除的 LDisplayObject 实例。",
                    "type": "LDisplayObject"
                }
            ],
            "return": {
                "description": "在 child 参数中传递的 LDisplayObject 实例。",
                "type": "LDisplayObject"
            },
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tfunction main () {\n\t\tvar container = new LSprite();\n\t\taddChild(container);\n\t\tvar circle1 = new LSprite();\n\t\tcircle1.graphics.drawRect(1,\"#000000\",[0,0,50,50]);\n\t\tvar circle2 = new LSprite();\n\t\tcircle2.graphics.drawRect(1,\"#000000\",[100,100,50,50]);\n\t\tcontainer.addChild(circle1);\n\t\tcontainer.addChild(circle2);\n\t\tcontainer.addEventListener(LMouseEvent.MOUSE_DOWN, clicked);\n\t}\n\tfunction clicked (event) {\n\t\tevent.currentTarget.removeChild(event.target);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LDisplayObjectContainer/removeChild.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LDisplayObjectContainer"
        },
        {
            "file": "display/LDisplayObjectContainer.js",
            "line": 183,
            "description": "返回位于指定索引处的子显示对象实例。",
            "itemtype": "method",
            "name": "getChildAt",
            "params": [
                {
                    "name": "index",
                    "description": "子对象的索引位置。",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "位于指定索引位置处的子显示对象。",
                "type": "LDisplayObject"
            },
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar container = new LSprite();\n\taddChild(container);\n\tvar sprite1 = new LSprite();\n\tvar sprite2 = new LSprite();\n\tvar sprite3 = new LSprite();\n\tcontainer.addChild(sprite1);\n\tcontainer.addChild(sprite2);\n\tcontainer.addChildAt(sprite3, 0);\n\ttrace(container.getChildAt(0) == sprite3); // true\n\ttrace(container.getChildAt(1) == sprite1); // true\n\ttrace(container.getChildAt(2) == sprite2); // true"
            ],
            "examplelink": "<p><a href=\"../../../api/LDisplayObjectContainer/getChildAt.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LDisplayObjectContainer"
        },
        {
            "file": "display/LDisplayObjectContainer.js",
            "line": 211,
            "description": "<p>返回具有指定名称的子显示对象。如果多个子显示对象具有指定名称，则该方法会返回子级列表中的第一个对象。</p>\n<p>getChildAt() 方法比 getChildByName() 方法快。getChildAt() 方法从缓存数组中访问子项，而 getChildByName() 方法则必须遍历链接的列表来访问子项。</p>",
            "itemtype": "method",
            "name": "getChildByName",
            "params": [
                {
                    "name": "name",
                    "description": "要返回的子项的名称。",
                    "type": "String"
                }
            ],
            "return": {
                "description": "具有指定名称的子显示对象。",
                "type": "LDisplayObject"
            },
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar container = new LSprite();\n\tvar sprite1 = new LSprite();\n\tsprite1.name = \"sprite1\";\n\tvar sprite2 = new LSprite();\n\tsprite2.name = \"sprite2\";\n\tcontainer.addChild(sprite1);\n\tcontainer.addChild(sprite2);\n\tvar target = container.getChildByName(\"sprite1\");\n\ttrace(container.getChildIndex(target)); // 0"
            ],
            "examplelink": "<p><a href=\"../../../api/LDisplayObjectContainer/getChildByName.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LDisplayObjectContainer"
        },
        {
            "file": "display/LDisplayObjectContainer.js",
            "line": 243,
            "description": "从 LDisplayObjectContainer 的子列表中指定的 index 位置删除子 LDisplayObject。将已删除子项的 parent 属性设置为 null；如果没有对该子项的任何其他引用，则将该对象作为垃圾回收。LDisplayObjectContainer 中该子项之上的任何显示对象的索引位置都减去 1。",
            "itemtype": "method",
            "name": "removeChildAt",
            "params": [
                {
                    "name": "index",
                    "description": "要删除的 DisplayObject 的子索引。",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "已删除的 DisplayObject 实例。",
                "type": "LDisplayObject"
            },
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar container = new LSprite();\n\taddChild(container);\n\tvar sprite1 = new LSprite();\n\tsprite1.name = \"sprite1\";\n\tvar sprite2 = new LSprite();\n\tsprite2.name = \"sprite2\";\n\tcontainer.addChild(sprite1);\n\tcontainer.addChild(sprite2);\n\ttrace(container.numChildren) // 2\n\tcontainer.removeChildAt(0); \n\ttrace(container.numChildren) // 1\n\ttrace(container.getChildAt(0).name); // sprite2"
            ],
            "examplelink": "<p><a href=\"../../../api/LDisplayObjectContainer/removeChildAt.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LDisplayObjectContainer"
        },
        {
            "file": "display/LDisplayObjectContainer.js",
            "line": 279,
            "description": "返回 LDisplayObject 的 child 实例的索引位置。",
            "itemtype": "method",
            "name": "getChildIndex",
            "params": [
                {
                    "name": "child",
                    "description": "要标识的 LDisplayObject 实例。",
                    "type": "LDisplayObject"
                }
            ],
            "return": {
                "description": "要标识的子显示对象的索引位置。",
                "type": "Int"
            },
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar container = new LSprite();\n\taddChild(container);\n\tvar sprite1 = new LSprite();\n\tsprite1.name = \"sprite1\";\n\tvar sprite2 = new LSprite();\n\tsprite2.name = \"sprite2\";\n\tcontainer.addChild(sprite1);\n\tcontainer.addChild(sprite2);\n\ttrace(container.getChildIndex(sprite1)); // 0"
            ],
            "examplelink": "<p><a href=\"../../../api/LDisplayObjectContainer/getChildIndex.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LDisplayObjectContainer"
        },
        {
            "file": "display/LDisplayObjectContainer.js",
            "line": 310,
            "description": "<p>更改现有子项在显示对象容器中的位置。这会影响子对象的分层。例如，下例在索引位置 0、1、2 处分别显示 a、b、c 三个显示对象：</p>\n<p><img src=\"../../../api/LDisplayObjectContainer/DisplayObjectContainerSetChildIndex1.jpg\" /></p>\n<p>在使用 setChildIndex() 方法并指定一个已经占用的索引位置时，唯一发生更改的位置是显示对象先前的位置和新位置之间的位置。所有其他位置将保持不变。如果将一个子项移动到比它当前的索引更低的索引处，则这两个索引之间的所有子项的索引引用都将增加 1。如果将一个子项移动到比它当前的索引更高的索引处，则这两个索引之间的所有子项的索引引用都将减小 1。例如，如果上例中的显示对象容器名为 container，则可以通过调用以下代码来交换带有 a 和 b 标记的显示对象的位置：</p>\n<p>container.setChildIndex(container.getChildAt(1), 0);</p>\n<p>该代码产生以下对象排列：</p>\n<p><img src=\"../../../api/LDisplayObjectContainer/DisplayObjectContainerSetChildIndex2.jpg\" /></p>",
            "itemtype": "method",
            "name": "setChildIndex",
            "params": [
                {
                    "name": "child",
                    "description": "要为其更改索引编号的 LDisplayObject 子实例。",
                    "type": "LDisplayObject"
                },
                {
                    "name": "index",
                    "description": "生成的 child 显示对象的索引编号。",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "生成的 child 显示对象的索引编号。",
                "type": "Int"
            },
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tvar container;\n\tfunction main () {\n\t\tcontainer = new LSprite();\n\t\taddChild(container);\n\t\tvar circle1 = new LSprite();\n\t\tcircle1.graphics.drawRect(1,\"#000000\",[0,0,100,100],true,\"#000000\");\n\t\tcircle1.addEventListener(LMouseEvent.MOUSE_DOWN, clicked);\n\t\tvar circle2 = new LSprite();\n\t\tcircle2.graphics.drawRect(1,\"#FF0000\",[40,80,100,100],true,\"#FF0000\");\n\t\tcircle2.addEventListener(LMouseEvent.MOUSE_DOWN, clicked);\n\t\tvar circle3 = new LSprite();\n\t\tcircle3.graphics.drawRect(1,\"#008800\",[80,0,100,100],true,\"#008800\");\n\t\tcircle3.addEventListener(LMouseEvent.MOUSE_DOWN, clicked);\n\t\tcontainer.addChild(circle1);\n\t\tcontainer.addChild(circle2);\n\t\tcontainer.addChild(circle3);\n\t}\n\tfunction clicked (event) {\n\t\tvar circle = event.target;\n\t\tvar topPosition = container.numChildren - 1;\n\t\tcontainer.setChildIndex(circle, topPosition);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LDisplayObjectContainer/setChildIndex.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LDisplayObjectContainer"
        },
        {
            "file": "display/LDisplayObjectContainer.js",
            "line": 368,
            "description": "<p>从 LDisplayObjectContainer 实例的子列表中删除所有的 child LDisplayObject 实例。</p>",
            "itemtype": "method",
            "name": "removeAllChild",
            "class": "LDisplayObjectContainer"
        },
        {
            "file": "display/LDisplayObjectContainer.js",
            "line": 390,
            "description": "<p>将显示对象添加到显示列表中时调度。以下方法会触发此事件：LDisplayObjectContainer.addChild()、LDisplayObjectContainer.addChildAt()。</p>\n<p>使用时需要引入lufylegend.LEvent.added-x.x.x.min.js文件。</p>\n<p><a href=\"LEvent.html#property_ADDED\">LEvent.ADDED</a></p>",
            "itemtype": "event",
            "name": "LEvent.ADDED",
            "class": "LDisplayObjectContainer"
        },
        {
            "file": "display/LDisplayObjectContainer.js",
            "line": 396,
            "description": "<p>在将显示对象直接添加到舞台显示列表或将包含显示对象的子树添加至舞台显示列表中时调度。以下方法会触发此事件：LDisplayObjectContainer.addChild()、LDisplayObjectContainer.addChildAt()。</p>\n<p>使用时需要引入lufylegend.LEvent.added-x.x.x.min.js文件。</p>\n<p><a href=\"LEvent.html#property_ADDED_TO_STAGE\">LEvent.ADDED_TO_STAGE</a></p>",
            "itemtype": "event",
            "name": "LEvent.ADDED_TO_STAGE",
            "class": "LDisplayObjectContainer"
        },
        {
            "file": "display/LDisplayObjectContainer.js",
            "line": 402,
            "description": "<p>将要从显示列表中删除显示对象时调度。LDisplayObjectContainer 类的以下两个方法会生成此事件：removeChild() 和 removeChildAt()。</p>\n<p>使用时需要引入lufylegend.LEvent.added-x.x.x.min.js文件。</p>\n<p><a href=\"LEvent.html#property_REMOVED\">LEvent.REMOVED</a></p>",
            "itemtype": "event",
            "name": "LEvent.REMOVED",
            "class": "LDisplayObjectContainer"
        },
        {
            "file": "display/LDisplayObjectContainer.js",
            "line": 408,
            "description": "<p>在从显示列表中直接删除显示对象或删除包含显示对象的子树时调度。LDisplayObjectContainer 类的以下两个方法会生成此事件：removeChild() 和 removeChildAt()。</p>\n<p>使用时需要引入lufylegend.LEvent.added-x.x.x.min.js文件。</p>\n<p><a href=\"LEvent.html#property_REMOVED_FROM_STAGE\">LEvent.REMOVED_FROM_STAGE</a></p>",
            "itemtype": "event",
            "name": "LEvent.REMOVED_FROM_STAGE",
            "class": "LDisplayObjectContainer"
        },
        {
            "file": "display/LGraphics.js",
            "line": 57,
            "description": "定线段如何结束。只有绘制较宽线段时，它才有效。",
            "itemtype": "method",
            "name": "lineCap",
            "params": [
                {
                    "name": "value",
                    "description": "可以使用下面三个值butt, round, square。",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.beginPath();\n\tshape.graphics.lineWidth(10);\n\tshape.graphics.lineCap(\"butt\");\n\tshape.graphics.moveTo(20,20);\n\tshape.graphics.lineTo(200,20);\n\tshape.graphics.stroke();\n\tshape.graphics.beginPath();\n\tshape.graphics.lineCap(\"round\");\n\tshape.graphics.moveTo(20,40);\n\tshape.graphics.lineTo(200,40);\n\tshape.graphics.stroke();\n\tshape.graphics.beginPath();\n\tshape.graphics.lineCap(\"square\");\n\tshape.graphics.moveTo(20,60);\n\tshape.graphics.lineTo(200,60);\n\tshape.graphics.stroke();"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/lineCap.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.8.8",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 90,
            "description": "当一个路径包含了线段或曲线相交的交点的时候，lineJoin 属性说明如何绘制这些交点。只有当绘制具有宽度的线条的时候，这一属性的效果才能表现出来。",
            "itemtype": "method",
            "name": "lineJoin",
            "params": [
                {
                    "name": "value",
                    "description": "可以使用下面三个值bevel, round, miter。",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.beginPath();\n\tshape.graphics.lineWidth(10);\n\tshape.graphics.lineJoin(\"round\");\n\tshape.graphics.moveTo(20,20);\n\tshape.graphics.lineTo(100,50);\n\tshape.graphics.lineTo(20,100);\n\tshape.graphics.stroke();"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/lineJoin.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.8.8",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 114,
            "description": "指定线条的宽度。",
            "itemtype": "method",
            "name": "lineWidth",
            "params": [
                {
                    "name": "value",
                    "description": "线条的宽度。",
                    "type": "Float"
                }
            ],
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.beginPath();\n\tshape.graphics.lineWidth(2);\n\tshape.graphics.moveTo(20,20);\n\tshape.graphics.lineTo(200,50);\n\tshape.graphics.stroke();\n\tshape.graphics.beginPath();\n\tshape.graphics.lineWidth(10);\n\tshape.graphics.moveTo(20,40);\n\tshape.graphics.lineTo(200,40);\n\tshape.graphics.stroke();"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/lineWidth.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 141,
            "description": "指定了用于画笔（绘制）路径的颜色、模式和渐变。这个属性可能是一个字符串，或者一个 CanvasGradient 对象 或 CanvasPattern 对象。",
            "itemtype": "method",
            "name": "strokeStyle",
            "params": [
                {
                    "name": "value",
                    "description": "可以使用下面三个值color|gradient|pattern。",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.strokeStyle(\"#FF0000\");\n\tshape.graphics.lineWidth(5);\n\tshape.graphics.lineJoin(\"round\");\n\tshape.graphics.rect(20,20,150,100);\n\tshape.graphics.stroke();"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/stroke_strokeStyle.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 163,
            "description": "沿着当前路径绘制或画一条直线。",
            "itemtype": "method",
            "name": "stroke",
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.strokeStyle(\"#FF0000\");\n\tshape.graphics.lineWidth(5);\n\tshape.graphics.lineJoin(\"round\");\n\tshape.graphics.rect(20,20,150,100);\n\tshape.graphics.stroke();"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/stroke_strokeStyle.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 184,
            "description": "开始一个画布中的一条新路径（或者子路径的一个集合）。",
            "itemtype": "method",
            "name": "beginPath",
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.beginPath();\n\tshape.graphics.lineWidth(5);\n\tshape.graphics.strokeStyle(\"#FF0000\");\n\tshape.graphics.moveTo(0,75);\n\tshape.graphics.lineTo(250,75);\n\tshape.graphics.stroke();\n\tshape.graphics.beginPath();\n\tshape.graphics.strokeStyle(\"#00FF00\");\n\tshape.graphics.moveTo(50,0);\n\tshape.graphics.lineTo(150,130);\n\tshape.graphics.stroke();"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/beginPath.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 211,
            "description": "如果画布的子路径是打开的，closePath() 通过添加一条线条连接当前点和子路径起始点来关闭它。如果子路径已经闭合了，这个方法不做任何事情。",
            "itemtype": "method",
            "name": "closePath",
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.beginPath();\n\tshape.graphics.moveTo(20,20);\n\tshape.graphics.lineTo(20,100);\n\tshape.graphics.lineTo(70,100);\n\tshape.graphics.closePath();\n\tshape.graphics.stroke();"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/closePath.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 233,
            "description": "设置当前位置并开始一条新的子路径。",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "x",
                    "description": "新的当前点的坐标x。",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "新的当前点的坐标y。",
                    "type": "Float"
                }
            ],
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.beginPath();\n\tshape.graphics.moveTo(20,20);\n\tshape.graphics.lineTo(70,100);\n\tshape.graphics.stroke();"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/moveTo_lineTo.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 256,
            "description": "为当前的子路径添加一条直线线段。",
            "itemtype": "method",
            "name": "lineTo",
            "params": [
                {
                    "name": "x",
                    "description": "直线的终点的坐标x。",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "直线的终点的坐标y。",
                    "type": "Float"
                }
            ],
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.beginPath();\n\tshape.graphics.moveTo(20,20);\n\tshape.graphics.lineTo(70,100);\n\tshape.graphics.stroke();"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/moveTo_lineTo.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 279,
            "description": "为当前路径添加一条矩形子路径。",
            "itemtype": "method",
            "name": "rect",
            "params": [
                {
                    "name": "x",
                    "description": "矩形的左上角的坐标x。",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "矩形的左上角的坐标y。",
                    "type": "Float"
                },
                {
                    "name": "width",
                    "description": "矩形的宽。",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "矩形的高。",
                    "type": "Float"
                }
            ],
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.rect(20,20,150,100);\n\tshape.graphics.stroke();"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/rect.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 302,
            "description": "用来填充路径的当前的颜色、模式或渐变。",
            "itemtype": "method",
            "name": "fillStyle",
            "params": [
                {
                    "name": "style",
                    "description": "这个属性可以设置为一个字符串或者一个 CanvasGradient 对象 或 CanvasPattern 对象。当设置为一个字符串时，它被解析为一个 CSS 颜色值并且用来进行实心填充。当设置为一个 CanvasGradient 或 CanvasPattern 对象，通过使用指定的渐变或模式来完成填充。",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.fillStyle(\"#FF0000\");\n\tshape.graphics.rect(20,20,150,100);\n\tshape.graphics.fill();"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/fillStyle_fill.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 322,
            "description": "使用指定颜色、渐变或模式来绘制或填充当前路径的内部。",
            "itemtype": "method",
            "name": "fill",
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.fillStyle(\"#FF0000\");\n\tshape.graphics.rect(20,20,150,100);\n\tshape.graphics.fill();"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/fillStyle_fill.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 341,
            "description": "用一个中心点和半径，为一个画布的当前子路径添加一条弧线。",
            "itemtype": "method",
            "name": "arc",
            "params": [
                {
                    "name": "x",
                    "description": "描述弧的圆形的圆心的坐标x。",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "描述弧的圆形的圆心的坐标y。",
                    "type": "Float"
                },
                {
                    "name": "radius",
                    "description": "描述弧的圆形的半径。",
                    "type": "Float"
                },
                {
                    "name": "startAngle",
                    "description": "沿着圆指定弧的开始点点的一个角度。这个角度用弧度来衡量。",
                    "type": "Float"
                },
                {
                    "name": "endAngle",
                    "description": "沿着圆指定弧的结束点的一个角度。这个角度用弧度来衡量。",
                    "type": "Float"
                },
                {
                    "name": "counterclockwise",
                    "description": "弧沿着圆周的逆时针方向（TRUE）还是顺时针方向（FALSE）遍历。",
                    "type": "Boolean"
                }
            ],
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.arc(100,75,50,0,2*Math.PI);\n\tshape.graphics.stroke();"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/arc.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 366,
            "description": "设置线条属性。",
            "itemtype": "method",
            "name": "lineStyle",
            "params": [
                {
                    "name": "thickness",
                    "description": "一个整数，以点为单位表示线条的粗细；",
                    "type": "Int"
                },
                {
                    "name": "color",
                    "description": "线的颜色，这个属性可能是一个字符串，或者一个 CanvasGradient 对象 或 CanvasPattern 对象。如果是一个字符串，它被解析为一个 CSS 颜色值，并且画笔用所得的实色来绘制。如果这个属性的值是一个 CanvasGradient 对象或 CanvasPattern 对象，画笔使用这个渐变或模式来实现。",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.lineStyle(5,\"#FF0000\");\n\tshape.graphics.rect(20,20,150,100);\n\tshape.graphics.stroke();"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/lineStyle.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 392,
            "description": "删除所有矢量形状。",
            "itemtype": "method",
            "name": "clear",
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.rect(20,20,150,100);\n\tshape.graphics.clear();\n\tshape.graphics.arc(100,75,50,0,2*Math.PI);\n\tshape.graphics.stroke();"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/clear.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 412,
            "description": "用位图图像填充绘图区。",
            "itemtype": "method",
            "name": "beginBitmapFill",
            "params": [
                {
                    "name": "bitmap",
                    "description": "包含要显示的位的透明或不透明位图图像。",
                    "type": "LBitmapData"
                }
            ],
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tvar loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata); \n\t\tloader.load(\"face.jpg\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata (event) {\n\t\tvar bitmapdata = new LBitmapData(event.currentTarget);  \n\t\tvar backLayer;\n\t\tbackLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tbackLayer.graphics.beginBitmapFill(bitmapdata);\n\t\tbackLayer.graphics.drawArc(1,\"#000000\",[150,50,50,0,Math.PI*2]);\n\t\tbackLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tbackLayer.graphics.beginBitmapFill(bitmapdata);\n\t\tbackLayer.graphics.drawRect(1,\"#000000\",[10,100,70,100]);\n\t\tbackLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tbackLayer.graphics.beginBitmapFill(bitmapdata);\n\t\tbackLayer.graphics.drawVertices(1,\"#000000\",[[120,100],[100,200],[200,150]]);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/beginBitmapFill.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.5.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 449,
            "description": "绘制一个椭圆。",
            "itemtype": "method",
            "name": "drawEllipse",
            "params": [
                {
                    "name": "thickness",
                    "description": "一个整数，以点为单位表示线条的粗细；",
                    "type": "Int"
                },
                {
                    "name": "color",
                    "description": "线的颜色，这个属性可能是一个字符串，或者一个 CanvasGradient 对象 或 CanvasPattern 对象。如果是一个字符串，它被解析为一个 CSS 颜色值，并且画笔用所得的实色来绘制。如果这个属性的值是一个 CanvasGradient 对象或 CanvasPattern 对象，画笔使用这个渐变或模式来实现。",
                    "type": "String"
                },
                {
                    "name": "param",
                    "description": "[x,y,width,height]:[椭圆边框左上角相对于父显示对象注册点的 x 位置（以像素为单位）,椭圆边框左上角相对于父显示对象注册点的 y 位置（以像素为单位）,椭圆的宽度（以像素为单位）,椭圆的高度（以像素为单位）]。",
                    "type": "Array"
                },
                {
                    "name": "isFill",
                    "description": "是否填充图形",
                    "type": "Boolean"
                },
                {
                    "name": "fillColor",
                    "description": "填充图形的颜色，这个属性可能是一个字符串，或者一个 CanvasGradient 对象 或 CanvasPattern 对象。如果是一个字符串，它被解析为一个 CSS 颜色值，并且画笔用所得的实色来绘制。如果这个属性的值是一个 CanvasGradient 对象或 CanvasPattern 对象，画笔使用这个渐变或模式来实现。",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.drawEllipse(2, \"#ff0000\", [10, 10, 100, 50]);\n\tshape.graphics.drawEllipse(1, \"#000000\", [10, 100, 50, 100], true, \"#880088\");"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/drawEllipse.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.8.8",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 509,
            "description": "绘制一个圆或者扇形。",
            "itemtype": "method",
            "name": "drawArc",
            "params": [
                {
                    "name": "thickness",
                    "description": "一个整数，以点为单位表示线条的粗细；",
                    "type": "Int"
                },
                {
                    "name": "color",
                    "description": "线的颜色，这个属性可能是一个字符串，或者一个 CanvasGradient 对象 或 CanvasPattern 对象。如果是一个字符串，它被解析为一个 CSS 颜色值，并且画笔用所得的实色来绘制。如果这个属性的值是一个 CanvasGradient 对象或 CanvasPattern 对象，画笔使用这个渐变或模式来实现。",
                    "type": "String"
                },
                {
                    "name": "param",
                    "description": "<p>[x,y,r,sAngle,eAngle,counterclockwise,isSector]:[描述弧的圆形的圆心的坐标x,描述弧的圆形的圆心的坐标y,描述弧的圆形的半径,沿着圆指定弧的开始点点的一个角度,沿着圆指定弧的结束点的一个角度,弧沿着圆周的逆时针方向（TRUE）还是顺时针方向（FALSE）遍历,是否绘制成扇形]。</p>",
                    "type": "Array"
                },
                {
                    "name": "isFill",
                    "description": "是否填充图形",
                    "type": "Boolean"
                },
                {
                    "name": "fillColor",
                    "description": "填充图形的颜色，这个属性可能是一个字符串，或者一个 CanvasGradient 对象 或 CanvasPattern 对象。如果是一个字符串，它被解析为一个 CSS 颜色值，并且画笔用所得的实色来绘制。如果这个属性的值是一个 CanvasGradient 对象或 CanvasPattern 对象，画笔使用这个渐变或模式来实现。",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.drawArc(2, \"#ff0000\", [50, 50, 40, 0, 2*Math.PI]);\n\tshape.graphics.drawArc(1, \"#000000\", [50, 150, 40, 0, 2*Math.PI], true, \"#880088\");\n\tshape.graphics.drawArc(2, \"#ff0000\", [150, 50, 40, 0, 50*Math.PI/180,false,true]);\n\tshape.graphics.drawArc(1, \"#000000\", [150, 150, 40, 0, 230*Math.PI/180,false,true], true, \"#880088\");"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/drawArc.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 561,
            "description": "绘制一个矩形。",
            "itemtype": "method",
            "name": "drawRect",
            "params": [
                {
                    "name": "thickness",
                    "description": "一个整数，以点为单位表示线条的粗细；",
                    "type": "Int"
                },
                {
                    "name": "color",
                    "description": "线的颜色，这个属性可能是一个字符串，或者一个 CanvasGradient 对象 或 CanvasPattern 对象。如果是一个字符串，它被解析为一个 CSS 颜色值，并且画笔用所得的实色来绘制。如果这个属性的值是一个 CanvasGradient 对象或 CanvasPattern 对象，画笔使用这个渐变或模式来实现。",
                    "type": "String"
                },
                {
                    "name": "param",
                    "description": "[x,y,width,height]:[矩形左上角的 x 位置,矩形左上角的 y 位置,矩形的宽度,矩形的高度]。",
                    "type": "Array"
                },
                {
                    "name": "isFill",
                    "description": "是否填充图形",
                    "type": "Boolean"
                },
                {
                    "name": "fillColor",
                    "description": "填充图形的颜色，这个属性可能是一个字符串，或者一个 CanvasGradient 对象 或 CanvasPattern 对象。如果是一个字符串，它被解析为一个 CSS 颜色值，并且画笔用所得的实色来绘制。如果这个属性的值是一个 CanvasGradient 对象或 CanvasPattern 对象，画笔使用这个渐变或模式来实现。",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.drawRect(2, \"#ff0000\", [10, 10, 100, 50]);\n\tshape.graphics.drawRect(1, \"#000000\", [10, 100, 50, 100], true, \"#880088\");"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/drawRect.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 608,
            "description": "绘制一个圆角矩形。",
            "itemtype": "method",
            "name": "drawRoundRect",
            "params": [
                {
                    "name": "thickness",
                    "description": "一个整数，以点为单位表示线条的粗细；",
                    "type": "Int"
                },
                {
                    "name": "color",
                    "description": "线的颜色，这个属性可能是一个字符串，或者一个 CanvasGradient 对象 或 CanvasPattern 对象。如果是一个字符串，它被解析为一个 CSS 颜色值，并且画笔用所得的实色来绘制。如果这个属性的值是一个 CanvasGradient 对象或 CanvasPattern 对象，画笔使用这个渐变或模式来实现。",
                    "type": "String"
                },
                {
                    "name": "param",
                    "description": "[x,y,width,height,radius]:[矩形左上角的 x 位置,矩形左上角的 y 位置,矩形的宽度,矩形的高度,圆角的大小]。",
                    "type": "Array"
                },
                {
                    "name": "isFill",
                    "description": "是否填充图形",
                    "type": "Boolean"
                },
                {
                    "name": "fillColor",
                    "description": "填充图形的颜色，这个属性可能是一个字符串，或者一个 CanvasGradient 对象 或 CanvasPattern 对象。如果是一个字符串，它被解析为一个 CSS 颜色值，并且画笔用所得的实色来绘制。如果这个属性的值是一个 CanvasGradient 对象或 CanvasPattern 对象，画笔使用这个渐变或模式来实现。",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.drawRoundRect(2, \"#ff0000\", [10, 10, 100, 50, 10]);\n\tshape.graphics.drawRoundRect(1, \"#000000\", [10, 100, 50, 100, 10], true, \"#880088\");"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/drawRoundRect.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.7.1",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 663,
            "description": "使用顶点数组绘制一个多边形。",
            "itemtype": "method",
            "name": "drawVertices",
            "params": [
                {
                    "name": "thickness",
                    "description": "一个整数，以点为单位表示线条的粗细；",
                    "type": "Int"
                },
                {
                    "name": "color",
                    "description": "线的颜色，这个属性可能是一个字符串，或者一个 CanvasGradient 对象 或 CanvasPattern 对象。如果是一个字符串，它被解析为一个 CSS 颜色值，并且画笔用所得的实色来绘制。如果这个属性的值是一个 CanvasGradient 对象或 CanvasPattern 对象，画笔使用这个渐变或模式来实现。",
                    "type": "String"
                },
                {
                    "name": "param",
                    "description": "[[x1,y1],[x2,y2],[x3,y3],......]",
                    "type": "Array"
                },
                {
                    "name": "isFill",
                    "description": "是否填充图形",
                    "type": "Boolean"
                },
                {
                    "name": "fillColor",
                    "description": "填充图形的颜色，这个属性可能是一个字符串，或者一个 CanvasGradient 对象 或 CanvasPattern 对象。如果是一个字符串，它被解析为一个 CSS 颜色值，并且画笔用所得的实色来绘制。如果这个属性的值是一个 CanvasGradient 对象或 CanvasPattern 对象，画笔使用这个渐变或模式来实现。",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.drawVertices(2, \"#ff0000\", [[10, 10], [60, 100], [100, 50]]);\n\tshape.graphics.drawVertices(2, \"#ff0000\", [[10, 160], [60, 250], [100, 200]], true, \"#880088\");"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/drawVertices.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.4.1",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 718,
            "description": "呈现一组三角形（通常用于扭曲位图），并为其指定三维外观。drawTriangles() 方法使用一组 (u,v) 坐标将当前填充或位图填充映射到三角形面。",
            "itemtype": "method",
            "name": "drawTriangles",
            "params": [
                {
                    "name": "vertices",
                    "description": "由数字构成的矢量，其中的每一对数字将被视为一个坐标位置（一个 x, y 对）。vertices 参数是必需的。",
                    "type": "Array"
                },
                {
                    "name": "indices",
                    "description": "一个由整数或索引构成的矢量，其中每三个索引定义一个三角形。如果 indexes 参数为 null，则每三个顶点（vertices 矢量中的 6 对 x,y）定义一个三角形。否则，每个索引将引用一个顶点，即 vertices 矢量中的一对数字。例如，indexes[1] 引用 (vertices[2], vertices[3])。indexes 参数是可选的，但 indexes 通常会减少提交的数据量和计算的数据量。",
                    "type": "Array"
                },
                {
                    "name": "uvtData",
                    "description": "由用于应用纹理映射的标准坐标构成的矢量。每个坐标引用用于填充的位图上的一个点。每个顶点必须具有一个 UV 或一个 UVT 坐标。对于 UV 坐标，(0,0) 是位图的左上角，(1,1) 是位图的右下角。",
                    "type": "Array"
                },
                {
                    "name": "thickness",
                    "description": "一个整数，以点为单位表示线条的粗细,默认为0；",
                    "type": "Int"
                },
                {
                    "name": "color",
                    "description": "线的颜色",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar bitmapdata = new LBitmapData(event.currentTarget);  \n\tvar backLayer = new LSprite();\n\taddChild(backLayer);\n\tvar vertices = new Array();\n\tvertices.push(0, 0);\n\tvertices.push(-40, 90);\n\tvertices.push(0, 200);\n\tvertices.push(80, 0);\n\tvertices.push(90, 30);\n\tvertices.push(70,200);\n\tvertices.push(130, 10);\n\tvertices.push(140, 40);\n\tvertices.push(120,220);\n\tvar indices = new Array();\n\tindices.push(0, 3, 1);\n\tindices.push(3, 1, 4);\n\tindices.push(1, 4, 2);\n\tindices.push(4, 2, 5);\n\tindices.push(3, 6, 4);\n\tindices.push(6, 4, 7);\n\tindices.push(4, 7, 5);\n\tindices.push(7, 5, 8);\n\tvar uvtData = new Array();\n\tuvtData.push(0, 0);\n\tuvtData.push(0, 0.5);\n\tuvtData.push(0, 1);\n\tuvtData.push(0.5, 0);\n\tuvtData.push(0.5, 0.5);\n\tuvtData.push(0.5, 1);\n\tuvtData.push(1, 0);\n\tuvtData.push(1, 0.5);\n\tuvtData.push(1, 1);\n\tbackLayer.graphics.beginBitmapFill(bitmapdata);\n\tbackLayer.graphics.drawTriangles(vertices, indices, uvtData);"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/drawTriangles.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.5.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 871,
            "description": "绘制一条线段。",
            "itemtype": "method",
            "name": "drawLine",
            "params": [
                {
                    "name": "thickness",
                    "description": "一个整数，以点为单位表示线条的粗细；",
                    "type": "Int"
                },
                {
                    "name": "color",
                    "description": "线的颜色，这个属性可能是一个字符串，或者一个 CanvasGradient 对象 或 CanvasPattern 对象。如果是一个字符串，它被解析为一个 CSS 颜色值，并且画笔用所得的实色来绘制。如果这个属性的值是一个 CanvasGradient 对象或 CanvasPattern 对象，画笔使用这个渐变或模式来实现。",
                    "type": "String"
                },
                {
                    "name": "param",
                    "description": "[startX,startY,endX,endY]:[开始的 x 位置,开始的 y 位置,结束的 x 位置,结束的 y 位置]。",
                    "type": "Array"
                }
            ],
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.drawLine(2, \"#ff0000\", [10, 10, 100, 50]);\n\tshape.graphics.drawLine(1, \"#000000\", [10, 100, 50, 100]);"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/drawLine.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LGraphics.js",
            "line": 899,
            "description": "使用原生的canvas函数进行绘图。",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "func",
                    "description": "一个函数",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.add(function(ctx){\n\t\tctx.beginPath();\n\t\tctx.strokeStyle = \"#FF0000\";\n\t\tctx.lineWidth = 2;\n\t\tctx.moveTo(10,10);\n\t\tctx.lineTo(130,30);\n\t\tctx.stroke();\n\t});"
            ],
            "examplelink": "<p><a href=\"../../../api/LGraphics/add.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGraphics"
        },
        {
            "file": "display/LInteractiveObject.js",
            "line": 14,
            "description": "指定此对象是否接收鼠标或其他用户输入、消息。默认值为 true，这表示默认情况下，显示列表上的任何 LInteractiveObject 实例都会接收鼠标事件或其他用户输入事件。如果将 mouseEnabled 设置为 false，则实例将不接收任何鼠标事件（或其他用户输入事件，例如键盘事件）。显示列表上的该实例的任何子级都不会受到影响。要更改显示列表上对象的所有子级的 mouseEnabled 行为，请使用 LDisplayObjectContainer.mouseChildren。",
            "itemtype": "property",
            "name": "mouseEnabled",
            "type": "Boolean",
            "since": "1.8.10",
            "example": [
                "\n\tLGlobal.setDebug(true);\n\tvar button01 = new LButtonSample1(\"mouseEnabled=true\");\n\tbutton01.x = button01.y = 20;\n\taddChild(button01);\n\tbutton01.addEventListener(LMouseEvent.MOUSE_DOWN,function(e){\n\t\ttrace(\"button01 click\");\n\t});\n\tvar button02 = new LButtonSample1(\"mouseEnabled=false\");\n\tbutton02.x = 20;\n\tbutton02.y = 150;\n\tbutton02.mouseEnabled = false;\n\taddChild(button02);\n\tbutton02.addEventListener(LMouseEvent.MOUSE_DOWN,function(e){\n\t\ttrace(\"button02 click\");\n\t});"
            ],
            "examplelink": "<p><a href=\"../../../api/LInteractiveObject/mouseEnabled.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LInteractiveObject"
        },
        {
            "file": "display/LInteractiveObject.js",
            "line": 123,
            "description": "当用户在 LInteractiveObject 实例上按下指针设备按钮时调度。\n<p><a href=\"LMouseEvent.html#property_MOUSE_DOWN\">LMouseEvent.MOUSE_DOWN</a></p>",
            "itemtype": "event",
            "name": "LMouseEvent.MOUSE_DOWN",
            "class": "LInteractiveObject"
        },
        {
            "file": "display/LInteractiveObject.js",
            "line": 128,
            "description": "当用户在 LInteractiveObject 实例上释放指针设备按钮时调度。\n<p><a href=\"LMouseEvent.html#property_MOUSE_UP\">LMouseEvent.MOUSE_UP</a></p>",
            "itemtype": "event",
            "name": "LMouseEvent.MOUSE_UP",
            "class": "LInteractiveObject"
        },
        {
            "file": "display/LInteractiveObject.js",
            "line": 133,
            "description": "用户移动 LInteractiveObject 上的指针设备时调度。\n<p><a href=\"LMouseEvent.html#property_MOUSE_MOVE\">LMouseEvent.MOUSE_MOVE</a></p>",
            "itemtype": "event",
            "name": "LMouseEvent.MOUSE_MOVE",
            "class": "LInteractiveObject"
        },
        {
            "file": "display/LInteractiveObject.js",
            "line": 138,
            "description": "用户将指针设备从 LInteractiveObject 实例上移开时调度。\n<p><a href=\"LMouseEvent.html#property_MOUSE_OUT\">LMouseEvent.MOUSE_OUT</a></p>",
            "itemtype": "event",
            "name": "LMouseEvent.MOUSE_OUT",
            "class": "LInteractiveObject"
        },
        {
            "file": "display/LInteractiveObject.js",
            "line": 143,
            "description": "用户将指针设备移动到 LInteractiveObject 实例上时调度。\n<p><a href=\"LMouseEvent.html#property_MOUSE_OVER\">LMouseEvent.MOUSE_OVER</a></p>",
            "itemtype": "event",
            "name": "LMouseEvent.MOUSE_OVER",
            "class": "LInteractiveObject"
        },
        {
            "file": "display/LInteractiveObject.js",
            "line": 148,
            "description": "当用户在LInteractiveObject 实例上快速连续按下两次并释放指针设备的主按钮时调度。\n<p><a href=\"LMouseEvent.html#property_DOUBLE_CLICK\">LMouseEvent.DOUBLE_CLICK</a></p>",
            "itemtype": "event",
            "name": "LMouseEvent.DOUBLE_CLICK",
            "class": "LInteractiveObject"
        },
        {
            "file": "display/LLoader.js",
            "line": 16,
            "description": "将 JPEG、渐进式 JPEG、非动画 GIF 或 PNG 文件加载到此 LLoader 对象的子对象中。如果加载 GIF 动画文件，将仅显示第一帧。",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "所请求的 URL。",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "读取文件种类，目前只支持\"bitmapData\"。",
                    "type": "String"
                },
                {
                    "name": "xhr",
                    "description": "是否利用xhr来读取图片。默认为false。",
                    "type": "Boolean"
                }
            ],
            "example": [
                "\n\tLInit(1000/50,\"legend\",800,450,main);\n\tvar loader;\n\tfunction main(){\n\t\tLGlobal.setDebug(true);\n\t\tloader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata); \n\t\tloader.load(\"lufylegend.js.png\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata (event) {\n\t\ttrace(loader.objectIndex == event.currentTarget.objectIndex);//true\n\t\ttrace(event.currentTarget.content == event.target);//true\n\t\tvar bitmapdata = new LBitmapData(event.target);  \n\t\tvar bitmap = new LBitmap(bitmapdata);\n\t\taddChild(bitmap);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LLoader/index.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.0.0",
            "class": "LLoader"
        },
        {
            "file": "display/LLoader.js",
            "line": 126,
            "description": "图片加载完成事件。\n<p><a href=\"LEvent.html#property_COMPLETE\">LEvent.COMPLETE</a></p>",
            "itemtype": "event",
            "name": "LEvent.COMPLETE",
            "since": "1.0.0",
            "class": "LLoader"
        },
        {
            "file": "display/LLoader.js",
            "line": 132,
            "description": "图片加载进度事件。\n<p><a href=\"LEvent.html#property_PROGRESS\">LEvent.PROGRESS</a></p>",
            "itemtype": "event",
            "name": "LEvent.PROGRESS",
            "since": "1.10.1",
            "class": "LLoader"
        },
        {
            "file": "display/LLoader.js",
            "line": 138,
            "description": "图片加载异常事件。\n<p><a href=\"LEvent.html#property_ERROR\">LEvent.ERROR</a></p>",
            "itemtype": "event",
            "name": "LEvent.ERROR",
            "since": "1.10.1",
            "class": "LLoader"
        },
        {
            "file": "display/LShape.js",
            "line": 22,
            "description": "对象的类型",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "LShape",
            "since": "1.8.5",
            "access": "public",
            "tagname": "",
            "class": "LShape"
        },
        {
            "file": "display/LShape.js",
            "line": 31,
            "description": "[只读] 指定属于此 sprite 的 LGraphics 对象，在此 sprite 中可执行矢量绘图命令。",
            "itemtype": "property",
            "name": "graphics",
            "type": "LGraphics",
            "since": "1.8.5",
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.drawRect(2, \"#ff0000\", [10, 10, 50, 100], true, \"#880088\");"
            ],
            "examplelink": "<p><a href=\"../../../api/LShape/graphics.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LShape"
        },
        {
            "file": "display/LShape.js",
            "line": 56,
            "description": "获取显示对象的宽度，以像素为单位。",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "显示对象的宽度。",
                "type": "Float"
            },
            "since": "1.8.5",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.drawRect(2, \"#ff0000\", [10, 10, 50, 100], true, \"#880088\");\n\tshape.graphics.drawRect(2, \"#ff0000\", [20, 10, 110, 70], true, \"#888888\");\n\ttrace(\"width : \" + shape.getWidth());"
            ],
            "examplelink": "<p><a href=\"../../../api/LShape/getWidth.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LShape"
        },
        {
            "file": "display/LShape.js",
            "line": 87,
            "description": "获取显示对象的高度，以像素为单位。",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "显示对象的高度。",
                "type": "Float"
            },
            "since": "1.8.5",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.drawRect(2, \"#ff0000\", [10, 10, 50, 100], true, \"#880088\");\n\tshape.graphics.drawRect(2, \"#ff0000\", [20, 10, 110, 70], true, \"#888888\");\n\ttrace(\"height : \" + shape.getHeight());"
            ],
            "examplelink": "<p><a href=\"../../../api/LShape/getHeight.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LShape"
        },
        {
            "file": "display/LShape.js",
            "line": 136,
            "description": "返回一个LShape的克隆对象。",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "一个新的 LShape 对象，它与原始对象相同.",
                "type": "LShape"
            },
            "since": "1.8.5",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar shape = new LShape();\n\taddChild(shape);\n\tshape.graphics.drawRect(2, \"#ff0000\", [10, 10, 50, 100], true, \"#880088\");\n\tshape.graphics.drawRect(2, \"#ff0000\", [20, 10, 110, 70], true, \"#888888\");\n\tvar shape02 = shape.clone();\n\tshape02.y = 150;\n\taddChild(shape02);"
            ],
            "examplelink": "<p><a href=\"../../../api/LShape/clone.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LShape"
        },
        {
            "file": "display/LShape.js",
            "line": 178,
            "description": "<p>清空所使用的内存。</p>",
            "itemtype": "method",
            "name": "die",
            "since": "1.8.5",
            "access": "public",
            "tagname": "",
            "class": "LShape"
        },
        {
            "file": "display/LShape.js",
            "line": 194,
            "description": "不可用。",
            "itemtype": "event",
            "name": "LEvent.ENTER_FRAME",
            "class": "LShape"
        },
        {
            "file": "display/LShape.js",
            "line": 198,
            "description": "不可用。",
            "itemtype": "event",
            "name": "LMouseEvent.MOUSE_DOWN",
            "class": "LShape"
        },
        {
            "file": "display/LShape.js",
            "line": 202,
            "description": "不可用。",
            "itemtype": "event",
            "name": "LMouseEvent.MOUSE_UP",
            "class": "LShape"
        },
        {
            "file": "display/LShape.js",
            "line": 206,
            "description": "不可用。",
            "itemtype": "event",
            "name": "LMouseEvent.MOUSE_MOVE",
            "class": "LShape"
        },
        {
            "file": "display/LShape.js",
            "line": 210,
            "description": "不可用。",
            "itemtype": "event",
            "name": "LMouseEvent.MOUSE_OUT",
            "class": "LShape"
        },
        {
            "file": "display/LShape.js",
            "line": 214,
            "description": "不可用。",
            "itemtype": "event",
            "name": "LMouseEvent.MOUSE_OVER",
            "class": "LShape"
        },
        {
            "file": "display/LShape.js",
            "line": 218,
            "description": "不可用。",
            "itemtype": "event",
            "name": "LMouseEvent.DOUBLE_CLICK",
            "class": "LShape"
        },
        {
            "file": "display/LSprite.js",
            "line": 25,
            "description": "对象的类型",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "LSprite",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 36,
            "description": "[只读] 指定属于此 sprite 的 LGraphics 对象，在此 sprite 中可执行矢量绘图命令。",
            "itemtype": "property",
            "name": "graphics",
            "type": "LGraphics",
            "since": "1.0.0",
            "example": [
                "\n\tvar layer = new LSprite();\n\taddChild(layer);\n\tlayer.graphics.drawRect(2, \"#ff0000\", [10, 10, 50, 100], true, \"#880088\");"
            ],
            "examplelink": "<p><a href=\"../../../api/LSprite/graphics.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 51,
            "description": "用于碰撞的形状列表",
            "itemtype": "property",
            "name": "shapes",
            "type": "Array",
            "since": "1.9.0",
            "example": [
                "\n\tfunction loadBitmapdata (event) {\n\t\tvar bitmapdata = new LBitmapData(event.currentTarget); \n\t\tvar bitmap = new LBitmap(bitmapdata);\n\t\n\t\tlayer = new LSprite();\n\t\tlayer.addChild(bitmap);\n\t\tlayer.x = 20;\n\t\tlayer.y = 50;\n\t\tlayer.addShape(LShape.VERTICES, [[180, 20], [210, 40], [210, 60], [120, 110], [35, 100]]);\n\t\tlayer.addShape(LShape.VERTICES, [[120, 110], [140, 120], [140, 150], [110, 160], [35, 120], [35, 100]]);\n\t\taddChild(layer);\n\t\n\t\tlayer.addEventListener(LEvent.ENTER_FRAME, onframe);\n\t}\n\tfunction onframe (e) {\n\t\tif (layer.hitTestPoint(mouseX, mouseY)) {\n\t\t\tlayer.alpha = 0.5;\n\t\t} else {\n\t\t\tlayer.alpha = 1;\n\t\t}\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LSprite/shapes.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 82,
            "description": "<p>用户拖动该对象时的拖动范围。</p>\n<p>LRectangle对象的x，y分别是对象可以拖动的起始坐标，width，height分别表示从起始坐标开始可以拖动的范围。</p>",
            "itemtype": "property",
            "name": "dragRange",
            "type": "LRectangle",
            "since": "1.9.8",
            "access": "public",
            "tagname": "",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 91,
            "description": "<p>表示当指针滑过sprite时是否显示的指针光标。</p>",
            "itemtype": "property",
            "name": "useCursor",
            "type": "String",
            "default": "null",
            "since": "1.9.10",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar layer01 = new LSprite();\n\tlayer01.useCursor = \"pointer\";\n\taddChild(layer01);\n\tvar bm01 = new LBitmap(new LBitmapData(\"#FF0000\", 0, 0, 100, 100));\n\tlayer01.addChild(bm01);"
            ],
            "examplelink": "<p><a href=\"../../../api/LSprite/useCursor.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 109,
            "description": "使用Box2dWeb的时候，需要用setRotate来设定角度",
            "itemtype": "method",
            "name": "setRotate",
            "params": [
                {
                    "name": "angle",
                    "description": "角度。",
                    "type": "Float"
                }
            ],
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 141,
            "description": "允许用户拖动指定的 LSprite。LSprite 将一直保持可拖动，直到通过调用 LSprite.stopDrag() 方法来明确停止。",
            "itemtype": "method",
            "name": "startDrag",
            "params": [
                {
                    "name": "touchPointID",
                    "description": "分配给触摸点的整数(触摸设备)。",
                    "type": "Int"
                }
            ],
            "example": [
                "\n\tLInit(1000/50,\"legend\",800,450,main);\n\tfunction main(){\n\t\tLMultitouch.inputMode = LMultitouchInputMode.TOUCH_POINT;\n\t\tfor(var i=0;i<3;i++){\n\t\t\tvar child = new LSprite();\n\t\t\tchild.x = 250*i;\n\t\t\tchild.graphics.drawRect(2,\"#ff0000\",[0,0,100,100],true,\"#ff0000\");\n\t\t\tchild.addEventListener(LMouseEvent.MOUSE_DOWN,ondown);\n\t\t\tchild.addEventListener(LMouseEvent.MOUSE_UP,onup);\n\t\t\taddChild(child);\n\t\t}\n\t}\n\tfunction ondown(e){\n\t\te.clickTarget.startDrag(e.touchPointID);\n\t}\n\tfunction onup(e){\n\t\te.clickTarget.stopDrag();\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LSprite/startDrag.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.8.9",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 180,
            "description": "结束 startDrag() 方法。",
            "itemtype": "method",
            "name": "stopDrag",
            "example": [
                "\n\tLInit(1000/50,\"legend\",800,450,main);\n\tfunction main(){\n\t\tLMultitouch.inputMode = LMultitouchInputMode.TOUCH_POINT;\n\t\tfor(var i=0;i<3;i++){\n\t\t\tvar child = new LSprite();\n\t\t\tchild.x = 250*i;\n\t\t\tchild.graphics.drawRect(2,\"#ff0000\",[0,0,100,100],true,\"#ff0000\");\n\t\t\tchild.addEventListener(LMouseEvent.MOUSE_DOWN,ondown);\n\t\t\tchild.addEventListener(LMouseEvent.MOUSE_UP,onup);\n\t\t\taddChild(child);\n\t\t}\n\t}\n\tfunction ondown(e){\n\t\te.clickTarget.startDrag(e.touchPointID);\n\t}\n\tfunction onup(e){\n\t\te.clickTarget.stopDrag();\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LSprite/stopDrag.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.8.9",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 225,
            "description": "获取显示对象的宽度，以像素为单位。",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "显示对象的宽度。",
                "type": "Float"
            },
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar bitmapdata = new LBitmapData(event.currentTarget);  \n\tvar bitmap = new LBitmap(bitmapdata);\n\tvar layer = new LSprite();\n\taddChild(layer);\n\tlayer.addChild(bitmap);\n\ttrace(\"width : \" + layer.getWidth());"
            ],
            "examplelink": "<p><a href=\"../../../api/LSprite/getWidth.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 277,
            "description": "获取显示对象的高度，以像素为单位。",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "显示对象的高度。",
                "type": "Float"
            },
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar bitmapdata = new LBitmapData(event.currentTarget);  \n\tvar bitmap = new LBitmap(bitmapdata);\n\tvar layer = new LSprite();\n\taddChild(layer);\n\tlayer.addChild(bitmap);\n\ttrace(\"height : \" + layer.getHeight());"
            ],
            "examplelink": "<p><a href=\"../../../api/LSprite/getHeight.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 350,
            "description": "返回一个LSprite的克隆对象。",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "一个新的 LSprite 对象，它与原始对象相同.",
                "type": "LSprite"
            },
            "since": "1.8.2",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar circle1 = new LSprite();\n\tcircle1.graphics.drawRect(1,\"#000000\",[0,0,100,100],true,\"#000000\");\n\tvar circle2 = circle1.clone();\n\tcircle2.y = 120;\n\taddChild(circle1);\n\taddChild(circle2);"
            ],
            "examplelink": "<p><a href=\"../../../api/LSprite/clone.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 470,
            "description": "计算显示对象，以确定它是否与 x 和 y 参数指定的点重叠或相交。x 和 y 参数指定舞台的坐标空间中的点，而不是包含显示对象的显示对象容器中的点（除非显示对象容器是舞台）。",
            "itemtype": "method",
            "name": "hitTestPoint",
            "params": [
                {
                    "name": "x",
                    "description": "要测试的此对象的 x 坐标。",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "要测试的此对象的 y 坐标。",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "如果显示对象与指定的点重叠或相交，则为 true；否则为 false。",
                "type": "Boolean"
            },
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(20,\"legend\",800,450,main);\n\tvar backLayer;\n\tvar title;\n\tfunction main(){\n\t\tbackLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tbackLayer.addEventListener(LEvent.ENTER_FRAME,onframe);\n\t\ttitle = new LTextField();\n\t\ttitle.size = 18;\n\t\ttitle.x = 10;\n\t\ttitle.y = 5;\n\t\ttitle.text = \"hitTestPoint:false\";\n\t\taddChild(title);\n\t\tvar layer = new LSprite();\n\t\tlayer.x = 20;\n\t\tlayer.y = 50;\n\t\tlayer.graphics.drawRect(0,\"#880088\",[0,0,100,40],true,\"#880088\");\n\t\tlayer.addShape(LShape.RECT,[0,0,100,40]);\n\t\tbackLayer.addChild(layer);\n\t\tlayer = new LSprite();\n\t\tlayer.x = 200;\n\t\tlayer.y = 100;\n\t\tlayer.graphics.drawArc(0,\"#880088\",[0,0,30,0,2*Math.PI],true,\"#880088\");\n\t\tlayer.addShape(LShape.ARC,[0,0,30]);\n\t\tbackLayer.addChild(layer);\n\t\tlayer = new LSprite();\n\t\tlayer.x = 120;\n\t\tlayer.y = 150;\n\t\tlayer.graphics.drawVertices(0,\"#880088\",[[10,10],[50,100],[100,70]],true,\"#880088\");\n\t\tlayer.addShape(LShape.VERTICES,[[10,10],[50,100],[100,70]]);\n\t\tbackLayer.addChild(layer);\n\t}\n\tfunction onframe(e){\n\t\tfor(var i=0;i<backLayer.childList.length;i++){\n\t\t\tif(backLayer.childList[i].hitTestPoint(mouseX,mouseY)){\n\t\t\t\ttitle.text = \"hitTestPoint:true\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\ttitle.text = \"hitTestPoint:false\";\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LSprite/hitTestPoint.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 531,
            "description": "计算显示对象的边框，以确定它是否与 obj 显示对象的边框重叠或相交。",
            "itemtype": "method",
            "name": "hitTestObject",
            "params": [
                {
                    "name": "obj",
                    "description": "要测试的显示对象。",
                    "type": "LDisplayObject"
                }
            ],
            "return": {
                "description": "如果显示对象的边框相交，则为 true；否则为 false。",
                "type": "Boolean"
            },
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLGlobal.setDebug(true);\n\tvar container = new LSprite();\n\taddChild(container);\n\tvar circle1 = new LSprite();\n\tcircle1.graphics.drawRect(1,\"#000000\",[0,0,100,100],true,\"#000000\");\n\tvar circle2 = new LSprite();\n\tcircle2.x = 120;\n\tcircle2.graphics.drawRect(1,\"#FF0000\",[0,0,100,100],true,\"#FF0000\");\n\tvar circle3 = new LSprite();\n\tcircle3.x = 60;\n\tcircle3.y = 60;\n\tcircle3.graphics.drawRect(1,\"#008800\",[0,0,100,100],true,\"#008800\");\n\tcontainer.addChild(circle1);\n\tcontainer.addChild(circle2);\n\tcontainer.addChild(circle3);\n\ttrace(circle1.hitTestObject(circle2));//false\n\ttrace(circle1.hitTestObject(circle3));//true\n\ttrace(circle2.hitTestObject(circle3));//true"
            ],
            "examplelink": "<p><a href=\"../../../api/LSprite/hitTestObject.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 604,
            "description": "<p>添加碰撞形状，指定碰撞的范围。如果没有添加碰撞形状，则会默认使用最大矩形范围来碰撞检测。</p>\n<p>添加矩形 : addShape(LShape.RECT,[20,140,200,100])</p>\n<p>添加圆形 : addShape(LShape.ARC,[110,80,60])</p>\n<p>添加多边形 : addShape(LShape.VERTICES,[[10,10],[50,100],[100,70]])</p>",
            "itemtype": "method",
            "name": "addShape",
            "params": [
                {
                    "name": "type",
                    "description": "形状的类型.",
                    "type": "String"
                },
                {
                    "name": "arg",
                    "description": "形状参数.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "被添加的形状组.",
                "type": "Array"
            },
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(20,\"legend\",800,450,main);\n\tfunction main () {\n\t\tLGlobal.setDebug(true);\n\t\tvar loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata); \n\t\tloader.load(\"face.jpg\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata (event) {\n\t\tvar bitmapData = new LBitmapData(event.currentTarget);//width:240,height:240\n\t\tvar bitmap01 = new LBitmap(bitmapData);\n\t\tvar layer01 = new LSprite();\n\t\taddChild(layer01);\n\t\tlayer01.addChild(bitmap01);\n\t\tvar rect1 = new LSprite();\n\t\trect1.x = 180;\n\t\trect1.graphics.drawRect(2,\"#FF0000\",[0,0,100,100]);\n\t\taddChild(rect1);\n\t\tvar bitmap02 = new LBitmap(bitmapData);\n\t\tvar layer02 = new LSprite();\n\t\tlayer02.x = 300;\n\t\taddChild(layer02);\n\t\tlayer02.addChild(bitmap02);\n\t\tlayer02.addShape(LShape.ARC,[110,80,60]);\n\t\tlayer02.addShape(LShape.RECT,[20,140,200,100]);\n\t\tvar rect2 = new LSprite();\n\t\trect2.x = 480;\n\t\trect2.graphics.drawRect(2,\"#FF0000\",[0,0,100,100]);\n\t\taddChild(rect2);\n\t\tvar rect3 = new LSprite();\n\t\trect3.x = 480;\n\t\trect3.y = 120;\n\t\trect3.graphics.drawRect(2,\"#FF0000\",[0,0,100,100]);\n\t\taddChild(rect3);\n\t\ttrace(layer01.hitTestObject(rect1));//true\n\t\ttrace(layer02.hitTestObject(rect2));//false\n\t\ttrace(layer02.hitTestObject(rect3));//true\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LSprite/addShape.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 663,
            "description": "<p>添加碰撞形状组，指定碰撞的范围。</p>",
            "itemtype": "method",
            "name": "addShapes",
            "params": [
                {
                    "name": "shapes",
                    "description": "形状组.\n<p>例如 : [{\"type\" : LShape.RECT, \"arg\" : [20,140,200,100]},{\"type\" : LShape.ARC, \"arg\" : [110,80,60]},{\"type\" : LShape.VERTICES, \"arg\" : [[10,10],[50,100],[100,70]]}]</p>",
                    "type": "Array"
                }
            ],
            "since": "1.9.8",
            "access": "public",
            "tagname": "",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 679,
            "description": "<p>清空所有碰撞形状。</p>",
            "itemtype": "method",
            "name": "clearShape",
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar bitmapData = new LBitmapData(event.currentTarget);//width:240,height:240\n\tvar bitmap01 = new LBitmap(bitmapData);\n\tvar layer01 = new LSprite();\n\taddChild(layer01);\n\tlayer01.addChild(bitmap01);\n\tlayer01.addShape(LShape.ARC,[110,80,60]);\n\tlayer01.addShape(LShape.RECT,[20,140,200,100]);\n\tvar rect1 = new LSprite();\n\trect1.x = 180;\n\trect1.graphics.drawRect(2,\"#FF0000\",[0,0,100,100]);\n\taddChild(rect1);\n\ttrace(layer01.hitTestObject(rect1));//false\n\tlayer01.clearShape()\n\ttrace(layer01.hitTestObject(rect1));//true"
            ],
            "examplelink": "<p><a href=\"../../../api/LSprite/clearShape.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 761,
            "description": "<p>清空所有图形以及事件。</p>",
            "itemtype": "method",
            "name": "die",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 781,
            "description": "<p>LBox2d相关。</p>\n<p>给物体添加鼠标关节,响应鼠标拖拽物体。</p>\n<p>使用lufylegend.js引擎后，鼠标拖拽变得非常简便了，只需要调用LSprite对象的setBodyMouseJoint方法即可。</p>\n<p>一个LSprite对象通过addBodyCircle，addBodyPolygon等方法，会将其变为一个Box2d物理世界里的一个物体，如果调用它的setBodyMouseJoint(true)函数，可以让其支持鼠标拖拽。</p>",
            "itemtype": "method",
            "name": "setBodyMouseJoint",
            "params": [
                {
                    "name": "value",
                    "description": "是否支持鼠标拖拽",
                    "type": "Boolean"
                }
            ],
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 791,
            "description": "<p>LBox2d相关。</p>\n<p>设定圆形body。</p>",
            "itemtype": "method",
            "name": "addBodyCircle",
            "params": [
                {
                    "name": "radius",
                    "description": "半径",
                    "type": "Float"
                },
                {
                    "name": "cx",
                    "description": "圆心坐标x",
                    "type": "Float"
                },
                {
                    "name": "cy",
                    "description": "圆心坐标y",
                    "type": "Float"
                },
                {
                    "name": "type",
                    "description": "是否动态(1或0)",
                    "type": "Int"
                },
                {
                    "name": "density",
                    "description": "密度",
                    "type": "Float"
                },
                {
                    "name": "friction",
                    "description": "摩擦",
                    "type": "Float"
                },
                {
                    "name": "restitution",
                    "description": "弹性",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "返回一个被创建的box2d的body",
                "type": "B2Body"
            },
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 806,
            "description": "<p>LBox2d相关。</p>\n<p>设定矩形body。</p>",
            "itemtype": "method",
            "name": "addBodyPolygon",
            "params": [
                {
                    "name": "width",
                    "description": "矩形宽",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "矩形高",
                    "type": "Float"
                },
                {
                    "name": "type",
                    "description": "是否动态(1或0)",
                    "type": "Int"
                },
                {
                    "name": "density",
                    "description": "密度",
                    "type": "Float"
                },
                {
                    "name": "friction",
                    "description": "摩擦",
                    "type": "Float"
                },
                {
                    "name": "restitution",
                    "description": "弹性",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "返回一个被创建的box2d的body",
                "type": "B2Body"
            },
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 820,
            "description": "<p>LBox2d相关。</p>\n<p>以定点数组形式设定任意形状的body。</p>",
            "itemtype": "method",
            "name": "addBodyVertices",
            "params": [
                {
                    "name": "vertices",
                    "description": "顶点数组",
                    "type": "Float"
                },
                {
                    "name": "cx",
                    "description": "中心坐标x",
                    "type": "Float"
                },
                {
                    "name": "cy",
                    "description": "中心坐标y",
                    "type": "Float"
                },
                {
                    "name": "type",
                    "description": "是否动态(1或0)",
                    "type": "Int"
                },
                {
                    "name": "density",
                    "description": "密度",
                    "type": "Float"
                },
                {
                    "name": "friction",
                    "description": "摩擦",
                    "type": "Float"
                },
                {
                    "name": "restitution",
                    "description": "弹性",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "返回一个被创建的box2d的body",
                "type": "B2Body"
            },
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "LSprite"
        },
        {
            "file": "display/LSprite.js",
            "line": 835,
            "description": "<p>LBox2d相关。</p>\n<p>移除已设定的body。</p>\n<p>一个LSprite对象通过addBodyCircle，addBodyPolygon等方法，会将其变为一个Box2d物理世界里的一个物体，它的运动开始遵循牛顿运动定律，当调用它的clearBody()函数后，会将其变回到普通的LSprite对象，并且被加入到该对象上的body也一起被移除。</p>",
            "itemtype": "method",
            "name": "clearBody",
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "LSprite"
        },
        {
            "file": "display/LStageAlign.js",
            "line": 25,
            "description": "[静态] 指定舞台靠顶部对齐。",
            "itemtype": "property",
            "name": "TOP",
            "type": "String",
            "static": 1,
            "since": "1.8.6",
            "access": "public",
            "tagname": "",
            "class": "LStageAlign"
        },
        {
            "file": "display/LStageAlign.js",
            "line": 34,
            "description": "[静态] 指定舞台靠顶部对齐。",
            "itemtype": "property",
            "name": "BOTTOM",
            "type": "String",
            "static": 1,
            "since": "1.8.6",
            "access": "public",
            "tagname": "",
            "class": "LStageAlign"
        },
        {
            "file": "display/LStageAlign.js",
            "line": 43,
            "description": "[静态] 指定舞台靠左对齐。",
            "itemtype": "property",
            "name": "LEFT",
            "type": "String",
            "static": 1,
            "since": "1.8.6",
            "access": "public",
            "tagname": "",
            "class": "LStageAlign"
        },
        {
            "file": "display/LStageAlign.js",
            "line": 52,
            "description": "[静态] 指定舞台靠右对齐。",
            "itemtype": "property",
            "name": "RIGHT",
            "type": "String",
            "static": 1,
            "since": "1.8.6",
            "access": "public",
            "tagname": "",
            "class": "LStageAlign"
        },
        {
            "file": "display/LStageAlign.js",
            "line": 61,
            "description": "[静态] 指定舞台靠左上角对齐",
            "itemtype": "property",
            "name": "TOP_LEFT",
            "type": "String",
            "static": 1,
            "since": "1.8.6",
            "access": "public",
            "tagname": "",
            "class": "LStageAlign"
        },
        {
            "file": "display/LStageAlign.js",
            "line": 70,
            "description": "[静态] 指定舞台靠右上角对齐。",
            "itemtype": "property",
            "name": "TOP_RIGHT",
            "type": "String",
            "static": 1,
            "since": "1.8.6",
            "access": "public",
            "tagname": "",
            "class": "LStageAlign"
        },
        {
            "file": "display/LStageAlign.js",
            "line": 79,
            "description": "[静态] 指定舞台靠中上对齐。",
            "itemtype": "property",
            "name": "TOP_MIDDLE",
            "type": "String",
            "static": 1,
            "since": "1.8.6",
            "access": "public",
            "tagname": "",
            "class": "LStageAlign"
        },
        {
            "file": "display/LStageAlign.js",
            "line": 88,
            "description": "[静态] 指定舞台靠左下角对齐。",
            "itemtype": "property",
            "name": "BOTTOM_LEFT",
            "type": "String",
            "static": 1,
            "since": "1.8.6",
            "access": "public",
            "tagname": "",
            "class": "LStageAlign"
        },
        {
            "file": "display/LStageAlign.js",
            "line": 97,
            "description": "[静态] 指定舞台靠右下角对齐。",
            "itemtype": "property",
            "name": "BOTTOM_RIGHT",
            "type": "String",
            "static": 1,
            "since": "1.8.6",
            "access": "public",
            "tagname": "",
            "class": "LStageAlign"
        },
        {
            "file": "display/LStageAlign.js",
            "line": 106,
            "description": "[静态] 指定舞台靠中右对齐。",
            "itemtype": "property",
            "name": "BOTTOM_MIDDLE",
            "type": "String",
            "static": 1,
            "since": "1.8.6",
            "access": "public",
            "tagname": "",
            "class": "LStageAlign"
        },
        {
            "file": "display/LStageAlign.js",
            "line": 115,
            "description": "[静态] 指定舞台靠中间对齐。",
            "itemtype": "property",
            "name": "MIDDLE",
            "type": "String",
            "static": 1,
            "since": "1.8.6",
            "access": "public",
            "tagname": "",
            "class": "LStageAlign"
        },
        {
            "file": "display/LStageScaleMode.js",
            "line": 25,
            "description": "[静态] 指定整个应用程序在指定区域中可见，但不尝试保持原始高宽比。",
            "itemtype": "property",
            "name": "EXACT_FIT",
            "type": "String",
            "static": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LStageScaleMode"
        },
        {
            "file": "display/LStageScaleMode.js",
            "line": 34,
            "description": "[静态] 指定整个应用程序在指定区域中可见，且不会发生扭曲，同时保持应用程序的原始高宽比。",
            "itemtype": "property",
            "name": "SHOW_ALL",
            "type": "String",
            "static": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LStageScaleMode"
        },
        {
            "file": "display/LStageScaleMode.js",
            "line": 43,
            "description": "[静态] 指定整个应用程序填满指定区域，不会发生扭曲，但有可能会进行一些裁切，同时保持应用程序的原始高宽比。",
            "itemtype": "property",
            "name": "NO_BORDER",
            "type": "String",
            "static": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LStageScaleMode"
        },
        {
            "file": "display/LStageScaleMode.js",
            "line": 52,
            "description": "[静态] 指定应用程序的大小是固定的，因此，即使在更改播放器窗口大小时，它仍然保持不变。",
            "itemtype": "property",
            "name": "NO_SCALE",
            "type": "String",
            "static": 1,
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "LStageScaleMode"
        },
        {
            "file": "events/LEvent.js",
            "line": 15,
            "description": "<p>[静态] 定义 lufylegend.js引擎初始化 事件对象的 type 属性值，当引擎初始化是在window.onload事件之后，需要使用此属性。</p>\n<p>LEvent.INIT在1.10.1之后已经废弃。</p>",
            "itemtype": "property",
            "name": "INIT",
            "type": "String",
            "static": 1,
            "since": "1.0.0",
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta charset=\"UTF-8\">\n\t<script type=\"text/javascript\" src=\"../lufylegend-x.x.x.min.js\"></script> \n\t<title>demo</title>\n\t</head>\n\t<body>\n\t<div id=\"mylegend\">loading……</div>\n\t<script>\n\twindow.onload = function () {\n\t\tLInit(50, \"mylegend\", 800, 480, main, LEvent.INIT);\n\t};\n\tfunction main(){\n\t\talert(\"Hello lufylegend!\");\n\t}\n\t</script>\n\t</body>\n\t</html>"
            ],
            "access": "public",
            "tagname": "",
            "class": "LEvent"
        },
        {
            "file": "events/LEvent.js",
            "line": 45,
            "description": "<p>[静态] 定义加载完成事件对象的 type 属性值。</p>\n<p>此事件可以在下列对象中使用：</p>\n<table>\n<tr><th>对象</th><th>说明</th></tr>\n<tr><td>LLoader</td><td>图片加载完成事件。</td></tr>\n<tr><td>LURLLoader</td><td>js文件或者文本文件加载完成事件。</td></tr>\n<tr><td>LMedia</td><td>多媒体文件加载完成事件。</td></tr>\n<tr><td>LAnimation</td><td>一组动画播放完成事件。</td></tr>\n<tr><td>LStageWebView</td><td>网页加载完成事件。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "COMPLETE",
            "type": "String",
            "static": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LEvent"
        },
        {
            "file": "events/LEvent.js",
            "line": 63,
            "description": "<p>[静态] 定义 加载异常事件对象的 type 属性值。</p>\n<p>此事件可以在下列对象中使用：</p>\n<table>\n<tr><th>对象</th><th>说明</th></tr>\n<tr><td>LLoader</td><td>图片加载异常事件。</td></tr>\n<tr><td>LURLLoader</td><td>js文件或者文本文件加载异常事件。</td></tr>\n<tr><td>LMedia</td><td>多媒体文件加载异常事件。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "ERROR",
            "type": "String",
            "static": 1,
            "since": "1.10.1",
            "access": "public",
            "tagname": "",
            "class": "LEvent"
        },
        {
            "file": "events/LEvent.js",
            "line": 79,
            "description": "<p>[静态] 定义 加载进度事件对象的 type 属性值。</p>\n<p>此事件可以在下列对象中使用：</p>\n<table>\n<tr><th>对象</th><th>说明</th></tr>\n<tr><td>LLoader</td><td>图片加载进度事件。</td></tr>\n<tr><td>LURLLoader</td><td>js文件或者文本文件加载进度事件。</td></tr>\n<tr><td>LMedia</td><td>多媒体文件加载进度事件。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "ERROR",
            "type": "String",
            "static": 1,
            "since": "1.10.1",
            "access": "public",
            "tagname": "",
            "class": "LEvent"
        },
        {
            "file": "events/LEvent.js",
            "line": 95,
            "description": "<p>[播放事件] 播放头进入新帧时调度。如果播放头不移动，或者只有一帧，则会继续以帧速率调度此事件。此事件为广播事件，这意味着具有注册了此事件的侦听器的所有显示对象都会调度此事件。</p>\n<p>LEvent.ENTER_FRAME 常量定义 enterFrame 事件对象的 type 属性值。</p>\n<p>此事件具有以下属性：</p>\n<table>\n<tr><th>属性</th><th>值</th></tr>\n<tr><td>currentTarget</td><td>当前正在使用某个事件侦听器处理 Event 对象的对象。</td></tr>\n<tr><td>target</td><td>在此事件中等同于currentTarget。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "ENTER_FRAME",
            "type": "String",
            "static": 1,
            "since": "1.0.0",
            "example": [
                "\n\tLInit(1000/60, \"legend\", 800, 480, main);\n\tvar direction = 1;\n\tfunction main () {\n\t\tvar layer = new LSprite();\n\t\taddChild(layer);\n\t\tlayer.graphics.drawRect(1, \"#ff0000\", [0, 0, 100, 100], true, \"#880088\");\n\t\tlayer.addEventListener(LEvent.ENTER_FRAME,onframe);\n\t}\n\tfunction onframe(event){\n\t\tvar layer = event.currentTarget;\n\t\tlayer.x += direction;\n\t\tif(layer.x < 0){\n\t\t\tdirection = 1;\n\t\t}\n\t\tif(layer.x > 700){\n\t\t\tdirection = -1;\n\t\t}\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LEvent/ENTER_FRAME.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LEvent"
        },
        {
            "file": "events/LEvent.js",
            "line": 131,
            "description": "<p>当调整浏览器窗口的大小时，发生resize 事件。</p>",
            "itemtype": "property",
            "name": "WINDOW_RESIZE",
            "type": "String",
            "static": 1,
            "since": "1.9.0",
            "example": [
                "\n\tLInit(1000/60, \"legend\", window.innerWidth,window.innerHeight, main);\n\tvar layer;\n\tfunction main () {\n\t\tlayer = new LSprite();\n\t\taddChild(layer);\n\t\tupdate();\n\t\tLGlobal.stage.addEventListener(LEvent.WINDOW_RESIZE,update);\n\t}\n\tfunction update(){\n\t\tLGlobal.resize(window.innerWidth,window.innerHeight);\n\t\tlayer.graphics.clear();\n\t\tlayer.graphics.drawRect(1, \"#ff0000\", [0, 0, 50, 50], true, \"#880088\");\n\t\tlayer.graphics.drawRect(1, \"#ff0000\", [LGlobal.width - 50, 0, 50, 50], true, \"#880088\");\n\t\tlayer.graphics.drawRect(1, \"#ff0000\", [0, LGlobal.height - 50, 50, 50], true, \"#880088\");\n\t\tlayer.graphics.drawRect(1, \"#ff0000\", [LGlobal.width - 50, LGlobal.height - 50, 50, 50], true, \"#880088\");\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LEvent/WINDOW_RESIZE.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LEvent"
        },
        {
            "file": "events/LEvent.js",
            "line": 158,
            "description": "<p>当屏幕旋转时，发生orientationchange 事件。</p>",
            "itemtype": "property",
            "name": "WINDOW_ORIENTATIONCHANGE",
            "type": "String",
            "static": 1,
            "since": "1.9.11",
            "example": [
                "\n\tLInit(1000/60, \"legend\", 400,400, main);\n\tvar label;\n\tfunction main () {\n\t\tlabel = new LTextField();\n\t\tlabel.x = label.y = 20;\n\t\tlabel.text = \"orientationchange test\";\n\t\taddChild(label);\n\t\tLGlobal.stage.addEventListener(LEvent.WINDOW_ORIENTATIONCHANGE,orientationIsChange);\n\t}\n\tfunction orientationIsChange(e){\n\t\tlabel.text = e.orientation;\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LEvent/WINDOW_ORIENTATIONCHANGE.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LEvent"
        },
        {
            "file": "events/LEvent.js",
            "line": 214,
            "description": "<p>[静态] LEvent.ADDED 常量定义 added 事件对象的 type 属性值。</p>\n<p>使用时需要引入lufylegend.LEvent.added-x.x.x.min.js文件。</p>",
            "itemtype": "property",
            "name": "LEvent.ADDED",
            "type": "String",
            "static": 1,
            "since": "1.9.1",
            "examplelink": "<p><a href=\"../../../api/LEvent.added/added.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LEvent"
        },
        {
            "file": "events/LEvent.js",
            "line": 224,
            "description": "<p>[静态] LEvent.ADDED_TO_STAGE 常量定义 addedToStage 事件对象的 type 属性值。</p>\n<p>使用时需要引入lufylegend.LEvent.added-x.x.x.min.js文件。</p>",
            "itemtype": "property",
            "name": "LEvent.ADDED_TO_STAGE",
            "type": "String",
            "static": 1,
            "since": "1.9.1",
            "examplelink": "<p><a href=\"../../../api/LEvent.added/added.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LEvent"
        },
        {
            "file": "events/LEvent.js",
            "line": 234,
            "description": "<p>[静态] LEvent.REMOVED 常量定义 removed 事件对象的 type 属性值。</p>\n<p>使用时需要引入lufylegend.LEvent.added-x.x.x.min.js文件。</p>",
            "itemtype": "property",
            "name": "LEvent.REMOVED",
            "type": "String",
            "static": 1,
            "since": "1.9.1",
            "examplelink": "<p><a href=\"../../../api/LEvent.added/removed.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LEvent"
        },
        {
            "file": "events/LEvent.js",
            "line": 244,
            "description": "<p>[静态] LEvent.REMOVED_FROM_STAGE 常量定义 removedFromStage 事件对象的 type 属性值。</p>\n<p>使用时需要引入lufylegend.LEvent.added-x.x.x.min.js文件。</p>",
            "itemtype": "property",
            "name": "LEvent.REMOVED_FROM_STAGE",
            "type": "String",
            "static": 1,
            "since": "1.9.1",
            "examplelink": "<p><a href=\"../../../api/LEvent.added/removed.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LEvent"
        },
        {
            "file": "events/LEventDispatcher.js",
            "line": 16,
            "description": "<p>使用 LEventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。可以为特定类型的事件、阶段和优先级在显示列表中的所有节点上注册事件侦听器。</p>\n<p>成功注册一个事件侦听器后，无法通过额外调用 addEventListener() 来更改其优先级。要更改侦听器的优先级，必须首先调用 removeListener()。然后，可以使用新的优先级再次注册该侦听器。</p>\n<p>如果不再需要某个事件侦听器，可调用 removeEventListener() 删除它，否则会产生内存问题。</p>",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "事件的类型。",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "处理事件的侦听器函数。",
                    "type": "Function"
                }
            ],
            "access": "public",
            "tagname": "",
            "since": "1.8.0",
            "class": "LEventDispatcher"
        },
        {
            "file": "events/LEventDispatcher.js",
            "line": 29,
            "description": "<p>从 LEventDispatcher 对象中删除侦听器。如果没有向 LEventDispatcher 对象注册任何匹配的侦听器，则对此方法的调用没有任何效果。</p>",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "事件的类型。",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "要删除的侦听器对象。",
                    "type": "Function"
                }
            ],
            "access": "public",
            "tagname": "",
            "since": "1.8.0",
            "class": "LEventDispatcher"
        },
        {
            "file": "events/LEventDispatcher.js",
            "line": 50,
            "description": "<p>从 LEventDispatcher 对象中删除所有侦听器。</p>",
            "itemtype": "method",
            "name": "removeAllEventListener",
            "access": "public",
            "tagname": "",
            "since": "1.8.0",
            "class": "LEventDispatcher"
        },
        {
            "file": "events/LEventDispatcher.js",
            "line": 59,
            "description": "<p>将事件调度到事件流中。事件目标是对其调用 dispatchEvent() 方法的 LEventDispatcher 对象。</p>",
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "event",
                    "description": "调度到事件流中的 Event 对象。如果正在重新调度事件，则会自动创建此事件的一个克隆。在调度了事件后，其 target 属性将无法更改，因此您必须创建此事件的一个新副本以能够重新调度。",
                    "type": "LEvent | String"
                }
            ],
            "return": {
                "description": "如果成功调度了事件，则值为 true。",
                "type": "Boolean"
            },
            "example": [
                "\n\tfunction MyEventObject(){\n\t\tvar self = this;\n\t\tLExtends(self,LSprite,[]);\n\t\tself.graphics.drawRect(1,\"#000000\",[0,0,100,100],true,\"#000000\");\n\t\tself.graphics.drawRect(1,\"#FF0000\",[100,0,100,100],true,\"#FF0000\");\n\t\tself.addEventListener(LMouseEvent.MOUSE_UP,self.onclick);\n\t\tself.addEventListener(MyEventObject.CLICK_LEFT,function(event){\n\t\t\ttrace(\"dispatchEvent\");\n\t\t});\n\t\tself.addEventListener(MyEventObject.CLICK_RIGHT,function(event){\n\t\t\ttrace(\"dispatchEvent event.name = \" + event.name);\n\t\t});\n\t}\n\tMyEventObject.CLICK_LEFT = \"click_left\";\n\tMyEventObject.CLICK_RIGHT = \"click_right\";\n\tMyEventObject.prototype.onclick = function(event){\n\t\tvar self = event.clickTarget;\n\t\tif(event.selfX < 100){\n\t\t\tself.dispatchEvent(MyEventObject.CLICK_LEFT);\n\t\t}else{\n\t\t\tvar event = new LEvent(MyEventObject.CLICK_RIGHT);\n\t\t\tevent.name = \"LEvent Test\";\n\t\t\tself.dispatchEvent(event);\n\t\t}\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LEventDispatcher/dispatchEvent.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.8.0",
            "class": "LEventDispatcher"
        },
        {
            "file": "events/LEventDispatcher.js",
            "line": 126,
            "description": "<p>检查 LEventDispatcher 对象是否为特定事件类型注册了任何侦听器。这样，您就可以确定 LEventDispatcher 对象在事件流层次结构中的哪个位置改变了对事件类型的处理。</p>",
            "itemtype": "method",
            "name": "hasEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "事件的类型。",
                    "type": "String"
                }
            ],
            "return": {
                "description": "如果指定类型的侦听器已注册，则值为 true；否则，值为 false。",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "since": "1.8.0",
            "class": "LEventDispatcher"
        },
        {
            "file": "events/LFocusEvent.js",
            "line": 36,
            "description": "[静态] 定义 focusIn 事件对象的 type 属性值。(目前只有LTextField对象支持)\n<p>此事件具有以下属性：</p>\n<table>\n<tr><th>属性</th><th>值</th></tr>\n<tr><td>currentTarget</td><td>当前正在使用某个事件侦听器处理 Event 对象的对象。</td></tr>\n<tr><td>target</td><td>在此事件中等同于currentTarget。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "FOCUS_IN",
            "type": "String",
            "static": 1,
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LFocusEvent"
        },
        {
            "file": "events/LFocusEvent.js",
            "line": 51,
            "description": "[静态] 定义 focusOut 事件对象的 type 属性值。(目前只有LTextField对象支持)\n<p>此事件具有以下属性：</p>\n<table>\n<tr><th>属性</th><th>值</th></tr>\n<tr><td>currentTarget</td><td>当前正在使用某个事件侦听器处理 Event 对象的对象。</td></tr>\n<tr><td>target</td><td>在此事件中等同于currentTarget。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "FOCUS_OUT",
            "type": "String",
            "static": 1,
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LFocusEvent"
        },
        {
            "file": "events/LKeyboardEvent.js",
            "line": 34,
            "description": "<p>[静态] 定义 keydown 事件对象的 type 属性值。</p>\n<p>此事件具有以下属性：</p>\n<table>\n<tr><th>属性</th><th>值</th></tr>\n<tr><td>type</td><td>返回当前 Event 对象表示的事件的名称。</td></tr>\n<tr><td>keyCode</td><td>对于 keypress 事件，该属性声明了被敲击的键生成的 Unicode 字符码。对于 keydown 和 keyup 事件，它指定了被敲击的键的虚拟键盘码。虚拟键盘码可能和使用的键盘的布局相关。</td></tr>\n<tr><td>ctrlKey</td><td>返回当事件被触发时，\"CTRL\" 键是否被按下。</td></tr>\n<tr><td>shiftKey</td><td>返回当事件被触发时，\"SHIFT\" 键是否被按下。</td></tr>\n<tr><td>altKey</td><td>返回当事件被触发时，\"ALT\" 是否被按下。</td></tr>\n<tr><td>metaKey</td><td>返回当事件被触发时，\"meta\" 键是否被按下。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "KEY_DOWN",
            "type": "String",
            "static": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LKeyboardEvent"
        },
        {
            "file": "events/LKeyboardEvent.js",
            "line": 53,
            "description": "<p>[静态] 定义 keyup 事件对象的 type 属性值。</p>\n<p>此事件具有以下属性：</p>\n<table>\n<tr><th>属性</th><th>值</th></tr>\n<tr><td>type</td><td>返回当前 Event 对象表示的事件的名称。</td></tr>\n<tr><td>keyCode</td><td>对于 keypress 事件，该属性声明了被敲击的键生成的 Unicode 字符码。对于 keydown 和 keyup 事件，它指定了被敲击的键的虚拟键盘码。虚拟键盘码可能和使用的键盘的布局相关。</td></tr>\n<tr><td>ctrlKey</td><td>返回当事件被触发时，\"CTRL\" 键是否被按下。</td></tr>\n<tr><td>shiftKey</td><td>返回当事件被触发时，\"SHIFT\" 键是否被按下。</td></tr>\n<tr><td>altKey</td><td>返回当事件被触发时，\"ALT\" 是否被按下。</td></tr>\n<tr><td>metaKey</td><td>返回当事件被触发时，\"meta\" 键是否被按下。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "KEY_UP",
            "type": "String",
            "static": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LKeyboardEvent"
        },
        {
            "file": "events/LKeyboardEvent.js",
            "line": 72,
            "description": "<p>[静态] 定义 keypress 事件对象的 type 属性值。</p>\n<p>此事件具有以下属性：</p>\n<table>\n<tr><th>属性</th><th>值</th></tr>\n<tr><td>type</td><td>返回当前 Event 对象表示的事件的名称。</td></tr>\n<tr><td>keyCode</td><td>对于 keypress 事件，该属性声明了被敲击的键生成的 Unicode 字符码。对于 keydown 和 keyup 事件，它指定了被敲击的键的虚拟键盘码。虚拟键盘码可能和使用的键盘的布局相关。</td></tr>\n<tr><td>ctrlKey</td><td>返回当事件被触发时，\"CTRL\" 键是否被按下。</td></tr>\n<tr><td>shiftKey</td><td>返回当事件被触发时，\"SHIFT\" 键是否被按下。</td></tr>\n<tr><td>altKey</td><td>返回当事件被触发时，\"ALT\" 是否被按下。</td></tr>\n<tr><td>metaKey</td><td>返回当事件被触发时，\"meta\" 键是否被按下。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "KEY_PRESS",
            "type": "String",
            "static": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LKeyboardEvent"
        },
        {
            "file": "events/LMouseEvent.js",
            "line": 45,
            "description": "<p>[静态] 定义 mouseDown 事件对象的 type 属性值。</p>\n<p>此事件具有以下属性：</p>\n<table>\n<tr><th>属性</th><th>值</th></tr>\n<tr><td>currentTarget</td><td>当前正在使用某个事件侦听器处理 Event 对象的对象。等同于 clickTarget。</td></tr>\n<tr><td>target</td><td>指针设备下的 LInteractiveObject 实例。target 不一定是显示列表中注册此事件侦听器的对象。请使用 currentTarget 属性来访问显示列表中当前正在处理此事件的对象。</td></tr>\n<tr><td>offsetX</td><td>事件发生点在全局舞台坐标中的水平坐标。</td></tr>\n<tr><td>offsetY</td><td>事件发生点在全局舞台坐标中的垂直坐标。</td></tr>\n<tr><td>selfX</td><td>事件发生点在当前正在处理此事件的对象坐标中的水平坐标。</td></tr>\n<tr><td>selfY</td><td>事件发生点在当前正在处理此事件的对象坐标中的垂直坐标。</td></tr>\n<tr><td>button</td><td>鼠标的按键动作。左键：1，右键：2。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "MOUSE_DOWN",
            "type": "String",
            "static": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LMouseEvent"
        },
        {
            "file": "events/LMouseEvent.js",
            "line": 65,
            "description": "<p>[静态] 定义 mouseUp 事件对象的 type 属性值。</p>\n<p>此事件具有以下属性：</p>\n<table>\n<tr><th>属性</th><th>值</th></tr>\n<tr><td>currentTarget</td><td>当前正在使用某个事件侦听器处理 Event 对象的对象。等同于 clickTarget。</td></tr>\n<tr><td>target</td><td>指针设备下的 LInteractiveObject 实例。target 不一定是显示列表中注册此事件侦听器的对象。请使用 currentTarget 属性来访问显示列表中当前正在处理此事件的对象。</td></tr>\n<tr><td>offsetX</td><td>事件发生点在全局舞台坐标中的水平坐标。</td></tr>\n<tr><td>offsetY</td><td>事件发生点在全局舞台坐标中的垂直坐标。</td></tr>\n<tr><td>selfX</td><td>事件发生点在当前正在处理此事件的对象坐标中的水平坐标。</td></tr>\n<tr><td>selfY</td><td>事件发生点在当前正在处理此事件的对象坐标中的垂直坐标。</td></tr>\n<tr><td>button</td><td>鼠标的按键动作。左键：1，右键：2。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "MOUSE_UP",
            "type": "String",
            "static": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LMouseEvent"
        },
        {
            "file": "events/LMouseEvent.js",
            "line": 88,
            "description": "<p>[静态] 定义 mouseMove 事件对象的 type 属性值。</p>\n<p>此事件具有以下属性：</p>\n<table>\n<tr><th>属性</th><th>值</th></tr>\n<tr><td>currentTarget</td><td>当前正在使用某个事件侦听器处理 Event 对象的对象。等同于 clickTarget。</td></tr>\n<tr><td>target</td><td>指针设备下的 LInteractiveObject 实例。target 不一定是显示列表中注册此事件侦听器的对象。请使用 currentTarget 属性来访问显示列表中当前正在处理此事件的对象。</td></tr>\n<tr><td>offsetX</td><td>事件发生点在全局舞台坐标中的水平坐标。</td></tr>\n<tr><td>offsetY</td><td>事件发生点在全局舞台坐标中的垂直坐标。</td></tr>\n<tr><td>selfX</td><td>事件发生点在当前正在处理此事件的对象坐标中的水平坐标。</td></tr>\n<tr><td>selfY</td><td>事件发生点在当前正在处理此事件的对象坐标中的垂直坐标。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "MOUSE_MOVE",
            "type": "String",
            "static": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LMouseEvent"
        },
        {
            "file": "events/LMouseEvent.js",
            "line": 107,
            "description": "<p>[静态] 定义 mouseOver 事件对象的 type 属性值。</p>\n<p>此事件具有以下属性：</p>\n<table>\n<tr><th>属性</th><th>值</th></tr>\n<tr><td>currentTarget</td><td>当前正在使用某个事件侦听器处理 Event 对象的对象。等同于 clickTarget。</td></tr>\n<tr><td>target</td><td>指针设备下的 LInteractiveObject 实例。target 不一定是显示列表中注册此事件侦听器的对象。请使用 currentTarget 属性来访问显示列表中当前正在处理此事件的对象。</td></tr>\n<tr><td>offsetX</td><td>事件发生点在全局舞台坐标中的水平坐标。</td></tr>\n<tr><td>offsetY</td><td>事件发生点在全局舞台坐标中的垂直坐标。</td></tr>\n<tr><td>selfX</td><td>事件发生点在当前正在处理此事件的对象坐标中的水平坐标。</td></tr>\n<tr><td>selfY</td><td>事件发生点在当前正在处理此事件的对象坐标中的垂直坐标。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "MOUSE_OVER",
            "type": "String",
            "static": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LMouseEvent"
        },
        {
            "file": "events/LMouseEvent.js",
            "line": 126,
            "description": "<p>[静态] 定义 mouseOut 事件对象的 type 属性值。</p>\n<p>此事件具有以下属性：</p>\n<table>\n<tr><th>属性</th><th>值</th></tr>\n<tr><td>currentTarget</td><td>当前正在使用某个事件侦听器处理 Event 对象的对象。等同于 clickTarget。</td></tr>\n<tr><td>target</td><td>指针设备下的 LInteractiveObject 实例。target 不一定是显示列表中注册此事件侦听器的对象。请使用 currentTarget 属性来访问显示列表中当前正在处理此事件的对象。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "MOUSE_OUT",
            "type": "String",
            "static": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LMouseEvent"
        },
        {
            "file": "events/LMouseEvent.js",
            "line": 141,
            "description": "<p>[静态] 定义 doubleClick 事件对象的 type 属性值。</p>\n<p>此事件具有以下属性：</p>\n<table>\n<tr><th>属性</th><th>值</th></tr>\n<tr><td>currentTarget</td><td>当前正在使用某个事件侦听器处理 Event 对象的对象。等同于 clickTarget。</td></tr>\n<tr><td>target</td><td>指针设备下的 LInteractiveObject 实例。target 不一定是显示列表中注册此事件侦听器的对象。请使用 currentTarget 属性来访问显示列表中当前正在处理此事件的对象。</td></tr>\n<tr><td>offsetX</td><td>事件发生点在全局舞台坐标中的水平坐标。</td></tr>\n<tr><td>offsetY</td><td>事件发生点在全局舞台坐标中的垂直坐标。</td></tr>\n<tr><td>selfX</td><td>事件发生点在当前正在处理此事件的对象坐标中的水平坐标。</td></tr>\n<tr><td>selfY</td><td>事件发生点在当前正在处理此事件的对象坐标中的垂直坐标。</td></tr>\n<tr><td>button</td><td>鼠标的按键动作。左键：1，右键：2。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "DOUBLE_CLICK",
            "type": "String",
            "static": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LMouseEvent"
        },
        {
            "file": "events/LMouseEventContainer.js",
            "line": 47,
            "description": "设定是否触发所有范围内的鼠标事件，如果设定为false，则每次只触发最上层的一个鼠标事件。",
            "itemtype": "property",
            "name": "dispatchAllEvent",
            "type": "Boolean",
            "default": "false",
            "since": "1.8.5",
            "example": [
                "\n\tLInit(50, \"legend\", 800, 400, main);\n\tvar label;\n\tfunction main(){\n\t\tLGlobal.setDebug(true);\n\t\tLMouseEventContainer.set(LMouseEvent.MOUSE_DOWN,true);\n\t\tLMouseEventContainer.set(LMouseEvent.MOUSE_UP,true);\n\t\tvar backLayer = new LSprite();\n\t\tbackLayer.graphics.drawRect(1,\"#000000\",[0,0,LGlobal.width,LGlobal.height],true,\"#cccccc\");\n\t\taddChild(backLayer);\n\t\tlabel = new LTextField();\n\t\tlabel.text = \"LMouseEventContainer.dispatchAllEvent = false;\";\n\t\tlabel.size = 18;\n\t\tlabel.x = 10;\n\t\tlabel.y = 10;\n\t\tbackLayer.addChild(label);\n\t\tvar buttonChange = new LButtonSample1(\"Change dispatchAllEvent's value\");\n\t\tbuttonChange.x = 10;\n\t\tbuttonChange.y = 40;\n\t\tbackLayer.addChild(buttonChange);\n\t\tbuttonChange.addEventListener(LMouseEvent.MOUSE_UP,dispatchAllEventChange);\n\t\tvar layer = new LSprite();\n\t\tlayer.name = \"layer\";\n\t\tlayer.y = 100;\n\t\tlayer.graphics.drawRect(2,\"#ff0000\",[0,0,500,200],true,\"#880088\");\n\t\tbackLayer.addChild(layer);\n\t\tlayer.addEventListener(LMouseEvent.MOUSE_DOWN,mousedown);\n\t\tlayer.addEventListener(LMouseEvent.MOUSE_UP,mouseup);\n\t\tvar button01 = new LButtonSample1(\"button01\",50);\n\t\tbutton01.name = \"button01\";\n\t\tbutton01.x = 10;\n\t\tbutton01.y = 10;\n\t\tlayer.addChild(button01);\n\t\tbutton01.addEventListener(LMouseEvent.MOUSE_DOWN,mousedown);\n\t\tbutton01.addEventListener(LMouseEvent.MOUSE_UP,mouseup);\n\t\tvar button02 = new LButtonSample1(\"button02\");\n\t\tbutton02.name = \"button02\";\n\t\tbutton02.x = 15;\n\t\tbutton02.y = 15;\n\t\tlayer.addChild(button02);\n\t\tbutton02.addEventListener(LMouseEvent.MOUSE_DOWN,mousedown);\n\t\tbutton02.addEventListener(LMouseEvent.MOUSE_UP,mouseup);\n\t}\n\tfunction dispatchAllEventChange(){\n\t\tLMouseEventContainer.dispatchAllEvent = !LMouseEventContainer.dispatchAllEvent;\n\t\tlabel.text = \"LMouseEventContainer.dispatchAllEvent = \"+LMouseEventContainer.dispatchAllEvent+\";\";\n\t}\n\tfunction mousedown(e){\n\t\ttrace(\"mousedown e.currentTarget.name = \" + e.currentTarget.name);\n\t}\n\tfunction mouseup(e){\n\t\ttrace(\"mouseup e.currentTarget.name = \" + e.currentTarget.name);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LMouseEventContainer/dispatchAllEvent.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LMouseEventContainer"
        },
        {
            "file": "events/LMouseEventContainer.js",
            "line": 420,
            "description": "设定是否鼠标事件监听器的容器。",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "type",
                    "description": "事件的类型。\n<p>可以设定的事件的类型有下面三种：</p>\n<table>\n<tr><th>事件的类型</th><th>值</th></tr>\n<tr><td>LMouseEvent.MOUSE_DOWN</td><td>可以将LMouseEvent.MOUSE_DOWN放入鼠标事件监听器容器。</td></tr>\n<tr><td>LMouseEvent.MOUSE_UP</td><td>可以将LMouseEvent.MOUSE_UP放入鼠标事件监听器容器。</td></tr>\n<tr><td>LMouseEvent.MOUSE_MOVE</td><td>可以将LMouseEvent.MOUSE_MOVE，LMouseEvent.MOUSE_OVER，LMouseEvent.MOUSE_OUT放入鼠标事件监听器容器。</td></tr>\n</table>",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "是否鼠标事件监听器的容器。",
                    "type": "Boolean"
                }
            ],
            "example": [
                "\n\tLInit(1000/50,\"legend\",800,450,main);\n\tvar loader;\n\tfunction main(){\n\t\tLGlobal.setDebug(true);\n\t\tloader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata); \n\t\tloader.load(\"lufylegend.js.png\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata (event) {\n\t\ttrace(loader.objectIndex == event.target.objectIndex);//true\n\t\ttrace(event.target.content == event.currentTarget);//true\n\t\tvar bitmapdata = new LBitmapData(event.currentTarget);  \n\t\tvar bitmap = new LBitmap(bitmapdata);\n\t\taddChild(bitmap);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LMouseEventContainer/index.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.8.5",
            "class": "LMouseEventContainer"
        },
        {
            "file": "events/LTextEvent.js",
            "line": 9,
            "description": "<p>[静态] 定义 textInput 事件对象的 type 属性值。</p>\n<p>此事件具有以下属性：</p>\n<table>\n<tr><th>属性</th><th>值</th></tr>\n<tr><td>currentTarget</td><td>当前正在使用某个事件侦听器处理 Event 对象的对象。</td></tr>\n<tr><td>target</td><td>在此事件中等同于currentTarget。</td></tr>\n<tr><td>eventType</td><td>返回当前 Event 对象表示的事件的名称。</td></tr>\n<tr><td>keyCode</td><td>该属性声明了被敲击的键生成的 Unicode 字符码。</td></tr>\n<tr><td>preventDefault()</td><td>取消事件的默认动作。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "TEXT_INPUT",
            "type": "String",
            "static": 1,
            "since": "1.9.0",
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tLGlobal.setDebug(true);\n\t\tvar theTextField = new LTextField();\n\t\ttheTextField.x = 20;\n\t\ttheTextField.y = 20;\n\t\ttheTextField.setType(LTextFieldType.INPUT);\n\t\taddChild(theTextField);\n\t\ttheTextField.addEventListener(LTextEvent.TEXT_INPUT, textinput);\n\t}\n\tfunction textinput(event){\n\t\ttrace(\"event.keyCode=\" + event.keyCode);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextEvent/textInput.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LTextEvent"
        },
        {
            "file": "events/LTextEvent.js",
            "line": 42,
            "description": "<p>[静态] 定义 textInput 事件对象的 type 属性值。</p>\n<p>此事件具有以下属性：</p>\n<table>\n<tr><th>属性</th><th>值</th></tr>\n<tr><td>currentTarget</td><td>当前正在使用某个事件侦听器处理 Event 对象的对象。</td></tr>\n<tr><td>target</td><td>在此事件中等同于currentTarget。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "WIND_COMPLETE",
            "type": "String",
            "static": 1,
            "since": "1.9.0",
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tLGlobal.setDebug(true);\n\t\tvar theTextField = new LTextField();\n\t\ttheTextField.x = 20;\n\t\ttheTextField.y = 20;\n\t\taddChild(theTextField);\n\t\ttheTextField.text = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\t\ttheTextField.speed = 2;\n\t\ttheTextField.addEventListener(LTextEvent.WIND_COMPLETE, windComplete);\n\t\ttheTextField.wind();\n\t}\n\tfunction windComplete(event){\n\t\ttrace(\"windComplete\",\"event.currentTarget = \" + event.currentTarget);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextEvent/windComplete.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LTextEvent"
        },
        {
            "file": "events/LTimerEvent.js",
            "line": 21,
            "description": "[静态] 定义 timer 事件对象的 type 属性值。\n<p>此事件具有以下属性：</p>\n<table>\n<tr><th>属性</th><th>值</th></tr>\n<tr><td>currentTarget</td><td>当前正在使用某个事件侦听器处理 LEvent 对象的对象。</td></tr>\n<tr><td>target</td><td>已达到其间隔的 LTimer 对象。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "TIMER",
            "type": "String",
            "static": 1,
            "since": "1.9.11",
            "access": "public",
            "tagname": "",
            "class": "LTimerEvent"
        },
        {
            "file": "events/LTimerEvent.js",
            "line": 36,
            "description": "[静态] 定义 timerComplete 事件对象的 type 属性值。\n<p>此事件具有以下属性：</p>\n<table>\n<tr><th>属性</th><th>值</th></tr>\n<tr><td>currentTarget</td><td>当前正在使用某个事件侦听器处理 LEvent 对象的对象。</td></tr>\n<tr><td>target</td><td>已完成其请求的 LTimer 对象。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "TIMER_COMPLETE",
            "type": "String",
            "static": 1,
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LTimerEvent"
        },
        {
            "file": "filters/LDropShadowFilter.js",
            "line": 46,
            "description": "设定阴影的偏移距离",
            "itemtype": "method",
            "name": "setDistance",
            "params": [
                {
                    "name": "distance",
                    "description": "阴影的偏移距离。",
                    "type": "Int"
                }
            ],
            "since": "1.6.0",
            "access": "public",
            "tagname": "",
            "class": "LDropShadowFilter"
        },
        {
            "file": "filters/LDropShadowFilter.js",
            "line": 57,
            "description": "设定阴影的角度",
            "itemtype": "method",
            "name": "setAngle",
            "params": [
                {
                    "name": "angle",
                    "description": "阴影的角度。",
                    "type": "Int"
                }
            ],
            "since": "1.6.0",
            "access": "public",
            "tagname": "",
            "class": "LDropShadowFilter"
        },
        {
            "file": "filters/LDropShadowFilter.js",
            "line": 68,
            "description": "设定阴影的颜色",
            "itemtype": "method",
            "name": "setColor",
            "params": [
                {
                    "name": "color",
                    "description": "阴影的颜色。",
                    "type": "Int"
                }
            ],
            "since": "1.6.0",
            "access": "public",
            "tagname": "",
            "class": "LDropShadowFilter"
        },
        {
            "file": "filters/LDropShadowFilter.js",
            "line": 78,
            "description": "设定模糊量",
            "itemtype": "method",
            "name": "setBlur",
            "params": [
                {
                    "name": "blur",
                    "description": "模糊量。",
                    "type": "Int"
                }
            ],
            "since": "1.6.0",
            "access": "public",
            "tagname": "",
            "class": "LDropShadowFilter"
        },
        {
            "file": "geom/LMatrix.js",
            "line": 81,
            "description": "检验矩阵是否是空，即不发生变换。",
            "itemtype": "method",
            "name": "isIdentity",
            "return": {
                "description": "返回矩阵是否是空。",
                "type": "Boolean"
            },
            "since": "1.9.8",
            "access": "public",
            "tagname": "",
            "class": "LMatrix"
        },
        {
            "file": "geom/LMatrix.js",
            "line": 97,
            "description": "为每个矩阵属性设置一个值，该值将导致 null 转换。",
            "itemtype": "method",
            "name": "identity",
            "since": "1.9.8",
            "access": "public",
            "tagname": "",
            "class": "LMatrix"
        },
        {
            "file": "geom/LMatrix.js",
            "line": 106,
            "description": "对 LMatrix 对象应用旋转转换。",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "旋转角度。",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "矩阵本身。",
                "type": "LMatrix"
            },
            "since": "1.9.8",
            "access": "public",
            "tagname": "",
            "class": "LMatrix"
        },
        {
            "file": "geom/LMatrix.js",
            "line": 123,
            "description": "对 LMatrix 对矩阵应用缩放转换。",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "sx",
                    "description": "用于沿 x 轴缩放对象的乘数。",
                    "type": "Float"
                },
                {
                    "name": "sy",
                    "description": "用于沿 y 轴缩放对象的乘数。",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "矩阵本身。",
                "type": "LMatrix"
            },
            "since": "1.9.8",
            "access": "public",
            "tagname": "",
            "class": "LMatrix"
        },
        {
            "file": "geom/LMatrix.js",
            "line": 138,
            "description": "沿 x 和 y 轴平移矩阵，由 dx 和 dy 参数指定。",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "dx",
                    "description": "沿 x 轴向右移动的量（以像素为单位）。",
                    "type": "Float"
                },
                {
                    "name": "dy",
                    "description": "沿 y 轴向下移动的量（以像素为单位）。",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "矩阵本身。",
                "type": "LMatrix"
            },
            "since": "1.9.8",
            "access": "public",
            "tagname": "",
            "class": "LMatrix"
        },
        {
            "file": "geom/LMatrix.js",
            "line": 153,
            "description": "沿 x 和 y 轴倾斜。",
            "itemtype": "method",
            "name": "skew",
            "params": [
                {
                    "name": "kx",
                    "description": "沿 x 轴倾斜的量。",
                    "type": "Float"
                },
                {
                    "name": "ky",
                    "description": "沿 y 轴倾斜的量。",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "矩阵本身。",
                "type": "LMatrix"
            },
            "since": "1.9.8",
            "access": "public",
            "tagname": "",
            "class": "LMatrix"
        },
        {
            "file": "geom/LMatrix.js",
            "line": 168,
            "description": "与另一个矩阵相加。",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "matrix",
                    "description": "一个LMatrix对象。",
                    "type": "LMatrix"
                }
            ],
            "return": {
                "description": "矩阵本身。",
                "type": "LMatrix"
            },
            "since": "1.9.8",
            "access": "public",
            "tagname": "",
            "class": "LMatrix"
        },
        {
            "file": "geom/LMatrix.js",
            "line": 209,
            "description": "对象复制。",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "一个LMatrix对象。",
                "type": "LMatrix"
            },
            "since": "1.9.8",
            "access": "public",
            "tagname": "",
            "class": "LMatrix"
        },
        {
            "file": "geom/LPoint.js",
            "line": 15,
            "description": "该点的水平坐标。",
            "itemtype": "property",
            "name": "x",
            "type": "float",
            "default": "0",
            "since": "1.7.7",
            "access": "public",
            "tagname": "",
            "class": "LPoint"
        },
        {
            "file": "geom/LPoint.js",
            "line": 24,
            "description": "该点的垂直坐标。",
            "itemtype": "property",
            "name": "y",
            "type": "float",
            "default": "0",
            "since": "1.7.7",
            "access": "public",
            "tagname": "",
            "class": "LPoint"
        },
        {
            "file": "geom/LPoint.js",
            "line": 34,
            "description": "[静态]返回 p1 和 p2 之间的距离。",
            "itemtype": "method",
            "name": "distance",
            "static": 1,
            "params": [
                {
                    "name": "p1",
                    "description": "第一个点",
                    "type": "LPoint"
                },
                {
                    "name": "p2",
                    "description": "第二个点。",
                    "type": "LPoint"
                }
            ],
            "return": {
                "description": "第一个点和第二个点之间的距离。",
                "type": "Float"
            },
            "since": "1.8.5",
            "access": "public",
            "tagname": "",
            "class": "LPoint"
        },
        {
            "file": "geom/LPoint.js",
            "line": 47,
            "description": "[静态]返回 p1 和 p2 之间的距离。",
            "itemtype": "method",
            "name": "distance2",
            "static": 1,
            "params": [
                {
                    "name": "x1",
                    "description": "第一个点的水平坐标。",
                    "type": "LPoint"
                },
                {
                    "name": "y1",
                    "description": "第一个点的垂直坐标。",
                    "type": "LPoint"
                },
                {
                    "name": "x2",
                    "description": "第二个点的水平坐标。",
                    "type": "LPoint"
                },
                {
                    "name": "y2",
                    "description": "第二个点的垂直坐标。",
                    "type": "LPoint"
                }
            ],
            "return": {
                "description": "第一个点和第二个点之间的距离。",
                "type": "Float"
            },
            "since": "1.8.5",
            "access": "public",
            "tagname": "",
            "class": "LPoint"
        },
        {
            "file": "geom/LPoint.js",
            "line": 63,
            "description": "[静态]确定两个指定点之间的点。参数 f 确定新的内插点相对于参数 p1 和 p2 指定的两个端点所处的位置。参数 f 的值越接近 1.0，则内插点就越接近第一个点（参数 p1）。参数 f 的值越接近 0，则内插点就越接近第二个点（参数 p2）。",
            "itemtype": "method",
            "name": "interpolate",
            "static": 1,
            "params": [
                {
                    "name": "p1",
                    "description": "第一个点",
                    "type": "LPoint"
                },
                {
                    "name": "p2",
                    "description": "第二个点。",
                    "type": "LPoint"
                },
                {
                    "name": "f",
                    "description": "两个点之间的内插级别。表示新点将位于 p1 和 p2 连成的直线上的什么位置。如果 f=1，则返回 p1；如果 f=0，则返回 p2。",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "新的内插点。",
                "type": "LPoint"
            },
            "since": "1.8.5",
            "access": "public",
            "tagname": "",
            "class": "LPoint"
        },
        {
            "file": "geom/LPoint.js",
            "line": 77,
            "description": "[静态]将一对极坐标转换为笛卡尔点坐标。",
            "itemtype": "method",
            "name": "polar",
            "static": 1,
            "params": [
                {
                    "name": "len",
                    "description": "极坐标对的长度。",
                    "type": "Float"
                },
                {
                    "name": "angle",
                    "description": "极坐标对的角度（以弧度表示）。",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "笛卡尔点。",
                "type": "LPoint"
            },
            "since": "1.8.5",
            "access": "public",
            "tagname": "",
            "class": "LPoint"
        },
        {
            "file": "geom/LPoint.js",
            "line": 94,
            "description": "返回从 (0,0) 到此点的线段长度。",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "从 (0,0) 到此点的线段长度。",
                "type": "Float"
            },
            "since": "1.8.5",
            "access": "public",
            "tagname": "",
            "class": "LPoint"
        },
        {
            "file": "geom/LPoint.js",
            "line": 104,
            "description": "将另一个点的坐标添加到此点的坐标以创建一个新点。",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "v",
                    "description": "要添加的点。",
                    "type": "LPoint"
                }
            ],
            "return": {
                "description": "新点。",
                "type": "LPoint"
            },
            "since": "1.8.5",
            "access": "public",
            "tagname": "",
            "class": "LPoint"
        },
        {
            "file": "geom/LPoint.js",
            "line": 115,
            "description": "创建此 LPoint 对象的副本。",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "新的 LPoint 对象。",
                "type": "LPoint"
            },
            "since": "1.8.5",
            "access": "public",
            "tagname": "",
            "class": "LPoint"
        },
        {
            "file": "geom/LPoint.js",
            "line": 125,
            "description": "将 LPoint 的成员设置为指定值。",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "x",
                    "description": "要将 LPoint 设置为的x坐标值。",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "要将 LPoint 设置为的y坐标值。",
                    "type": "Float"
                }
            ],
            "since": "1.8.5",
            "access": "public",
            "tagname": "",
            "class": "LPoint"
        },
        {
            "file": "geom/LPoint.js",
            "line": 136,
            "description": "将源 LPoint 对象中的所有点数据复制到调用方 LPoint 对象中。",
            "itemtype": "method",
            "name": "copyFrom",
            "params": [
                {
                    "name": "sourcePoint",
                    "description": "要从中复制数据的 Point 对象。",
                    "type": "LPoint"
                }
            ],
            "since": "1.8.5",
            "access": "public",
            "tagname": "",
            "class": "LPoint"
        },
        {
            "file": "geom/LPoint.js",
            "line": 146,
            "description": "确定两个点是否相同。如果两个点具有相同的 x 和 y 值，则它们是相同的点。",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "toCompare",
                    "description": "要比较的点。",
                    "type": "LPoint"
                }
            ],
            "return": {
                "description": "如果该对象与此 LPoint 对象相同，则为 true 值，如果不相同，则为 false。",
                "type": "Boolean"
            },
            "since": "1.8.5",
            "access": "public",
            "tagname": "",
            "class": "LPoint"
        },
        {
            "file": "geom/LPoint.js",
            "line": 157,
            "description": "将 (0,0) 和当前点之间的线段缩放为设定的长度。",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "thickness",
                    "description": "缩放值。例如，如果当前点为 (0,5) 并且您将它规范化为 1，则返回的点位于 (0,1) 处。",
                    "type": "Float"
                }
            ],
            "since": "1.8.5",
            "access": "public",
            "tagname": "",
            "class": "LPoint"
        },
        {
            "file": "geom/LPoint.js",
            "line": 168,
            "description": "按指定量偏移 LPoint 对象。dx 的值将添加到 x 的原始值中以创建新的 x 值。dy 的值将添加到 y 的原始值中以创建新的 y 值。",
            "itemtype": "method",
            "name": "offset",
            "params": [
                {
                    "name": "dx",
                    "description": "水平坐标 x 的偏移量。",
                    "type": "Float"
                },
                {
                    "name": "dy",
                    "description": "垂直坐标 y 的偏移量。",
                    "type": "Float"
                }
            ],
            "since": "1.8.5",
            "access": "public",
            "tagname": "",
            "class": "LPoint"
        },
        {
            "file": "geom/LPoint.js",
            "line": 180,
            "description": "从此点的坐标中减去另一个点的坐标以创建一个新点。",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "v",
                    "description": "要减去的点。",
                    "type": "LPoint"
                }
            ],
            "return": {
                "description": "新点。",
                "type": "LPoint"
            },
            "since": "1.8.5",
            "access": "public",
            "tagname": "",
            "class": "LPoint"
        },
        {
            "file": "geom/LRectangle.js",
            "line": 30,
            "description": "返回一个新的 LRectangle 对象，其 x、y、width 和 height 属性的值与原始 LRectangle 对象的对应值相同。",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "新的 LRectangle 对象，其 x、y、width 和 height 属性的值与原始 LRectangle 对象的对应值相同。",
                "type": "LRectangle"
            },
            "since": "1.4.1",
            "access": "public",
            "tagname": "",
            "class": "LRectangle"
        },
        {
            "file": "geom/LRectangle.js",
            "line": 41,
            "description": "确定由此 LRectangle 对象定义的矩形区域内是否包含指定的点。",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "点的 x 坐标（水平位置）。",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "点的 y 坐标（垂直位置）。",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "如果 LRectangle 对象包含指定的点，则值为 true；否则为 false。",
                "type": "Boolean"
            },
            "since": "1.4.1",
            "access": "public",
            "tagname": "",
            "class": "LRectangle"
        },
        {
            "file": "geom/LRectangle.js",
            "line": 54,
            "description": "确定此 LRectangle 对象内是否包含由 rect 参数指定的 LRectangle 对象。如果一个 LRectangle 对象完全在另一个 LRectangle 的边界内，我们说第二个 LRectangle 包含第一个 LRectangle。",
            "itemtype": "method",
            "name": "containsRect",
            "params": [
                {
                    "name": "rect",
                    "description": "所检查的 LRectangle 对象。",
                    "type": "LRectangle"
                }
            ],
            "return": {
                "description": "如果此 LRectangle 对象包含您指定的 LRectangle 对象，则返回 true 值，否则返回 false。",
                "type": "Boolean"
            },
            "since": "1.4.1",
            "access": "public",
            "tagname": "",
            "class": "LRectangle"
        },
        {
            "file": "geom/LRectangle.js",
            "line": 66,
            "description": "确定在 toCompare 参数中指定的对象是否等于此 LRectangle 对象。此方法将某个对象的 x、y、width 和 height 属性与此 LRectangle 对象所对应的相同属性进行比较。",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "toCompare",
                    "description": "要与此 LRectangle 对象进行比较的矩形。",
                    "type": "LRectangle"
                }
            ],
            "return": {
                "description": "如果对象具有与此 LRectangle 对象完全相同的 x、y、width 和 height 属性值，则返回 true 值，否则返回 false。",
                "type": "Boolean"
            },
            "since": "1.4.1",
            "access": "public",
            "tagname": "",
            "class": "LRectangle"
        },
        {
            "file": "geom/LRectangle.js",
            "line": 78,
            "description": "按指定量增加 LRectangle 对象的大小（以像素为单位）。保持 LRectangle 对象的中心点不变，使用 dx 值横向增加它的大小，使用 dy 值纵向增加它的大小。",
            "itemtype": "method",
            "name": "inflate",
            "params": [
                {
                    "name": "dx",
                    "description": "LRectangle 对象横向增加的值。",
                    "type": "Float"
                },
                {
                    "name": "dy",
                    "description": "LRectangle 纵向增加的值。",
                    "type": "Float"
                }
            ],
            "since": "1.4.1",
            "access": "public",
            "tagname": "",
            "class": "LRectangle"
        },
        {
            "file": "geom/LRectangle.js",
            "line": 92,
            "description": "如果在 toIntersect 参数中指定的 LRectangle 对象与此 LRectangle 对象相交，则返回交集区域作为 LRectangle 对象。如果矩形不相交，则此方法返回一个空的 LRectangle 对象，其属性设置为 0。",
            "itemtype": "method",
            "name": "intersection",
            "params": [
                {
                    "name": "toIntersect",
                    "description": "要对照比较以查看其是否与此 LRectangle 对象相交的 LRectangle 对象。",
                    "type": "LRectangle"
                }
            ],
            "return": {
                "description": "等于交集区域的 LRectangle 对象。如果该矩形不相交，则此方法返回一个空的 LRectangle 对象；即，其 x、y、width 和 height 属性均设置为 0 的矩形。",
                "type": "Boolean"
            },
            "since": "1.4.1",
            "access": "public",
            "tagname": "",
            "class": "LRectangle"
        },
        {
            "file": "geom/LRectangle.js",
            "line": 112,
            "description": "确定在 toIntersect 参数中指定的对象是否与此 LRectangle 对象相交。此方法检查指定的 LRectangle 对象的 x、y、width 和 height 属性，以查看它是否与此 LRectangle 对象相交。",
            "itemtype": "method",
            "name": "intersects",
            "params": [
                {
                    "name": "toIntersect",
                    "description": "要与此 LRectangle 对象比较的 LRectangle 对象。",
                    "type": "LRectangle"
                }
            ],
            "return": {
                "description": "如果指定的对象与此 LRectangle 对象相交，则返回 true 值，否则返回 false。",
                "type": "Boolean"
            },
            "since": "1.4.1",
            "access": "public",
            "tagname": "",
            "class": "LRectangle"
        },
        {
            "file": "geom/LRectangle.js",
            "line": 128,
            "description": "确定此 LRectangle 对象是否为空。",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "如果 LRectangle 对象的宽度或高度小于等于 0，则返回 true 值，否则返回 false。",
                "type": "Boolean"
            },
            "since": "1.4.1",
            "access": "public",
            "tagname": "",
            "class": "LRectangle"
        },
        {
            "file": "geom/LRectangle.js",
            "line": 139,
            "description": "按指定量调整 LRectangle 对象的位置（由其左上角确定）。",
            "itemtype": "method",
            "name": "offset",
            "params": [
                {
                    "name": "dx",
                    "description": "将 LRectangle 对象的 x 值移动此数量。",
                    "type": "Float"
                },
                {
                    "name": "dy",
                    "description": "将 LRectangle 对象的 y 值移动此数量。",
                    "type": "Float"
                }
            ],
            "since": "1.4.1",
            "access": "public",
            "tagname": "",
            "class": "LRectangle"
        },
        {
            "file": "geom/LRectangle.js",
            "line": 153,
            "description": "将 LRectangle 对象的所有属性设置为 0。如果 LRectangle 对象的宽度或高度小于或等于 0，则该对象为空。此方法将 x、y、width 和 height 属性设置为 0。",
            "itemtype": "method",
            "name": "setEmpty",
            "since": "1.4.1",
            "access": "public",
            "tagname": "",
            "class": "LRectangle"
        },
        {
            "file": "geom/LRectangle.js",
            "line": 167,
            "description": "将 LRectangle 的成员设置为指定值。",
            "itemtype": "method",
            "name": "setTo",
            "params": [
                {
                    "name": "xa",
                    "description": "要将 LRectangle 设置为的值。",
                    "type": "Float"
                },
                {
                    "name": "ya",
                    "description": "要将 LRectangle 设置为的值。",
                    "type": "Float"
                },
                {
                    "name": "widtha",
                    "description": "要将 LRectangle 设置为的值。",
                    "type": "Float"
                },
                {
                    "name": "heighta",
                    "description": "要将 LRectangle 设置为的值。",
                    "type": "Float"
                }
            ],
            "since": "1.4.1",
            "access": "public",
            "tagname": "",
            "class": "LRectangle"
        },
        {
            "file": "geom/LRectangle.js",
            "line": 189,
            "description": "通过填充两个矩形之间的水平和垂直空间，将这两个矩形组合在一起以创建一个新的 LRectangle 对象。",
            "itemtype": "method",
            "name": "union",
            "params": [
                {
                    "name": "toUnion",
                    "description": "要将 LRectangle 设置为的值。",
                    "type": "LRectangle"
                }
            ],
            "return": {
                "description": "充当两个矩形的联合的新 LRectangle 对象。",
                "type": "LRectangle"
            },
            "since": "1.4.1",
            "access": "public",
            "tagname": "",
            "class": "LRectangle"
        },
        {
            "file": "lib/ui/LButtonSample-0.1.0.js",
            "line": 27,
            "description": "按钮的颜色",
            "itemtype": "property",
            "name": "backgroundColor",
            "type": "String",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LButtonSample1"
        },
        {
            "file": "lib/ui/LButtonSample-0.1.0.js",
            "line": 59,
            "description": "按钮的宽度",
            "itemtype": "property",
            "name": "width",
            "type": "int",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LButtonSample1"
        },
        {
            "file": "lib/ui/LButtonSample-0.1.0.js",
            "line": 67,
            "description": "按钮的高度",
            "itemtype": "property",
            "name": "height",
            "type": "int",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LButtonSample1"
        },
        {
            "file": "lib/ui/LButtonSample-0.1.0.js",
            "line": 90,
            "description": "设置按钮文字。",
            "itemtype": "method",
            "name": "setLabel",
            "params": [
                {
                    "name": "text",
                    "description": "按钮文字。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LButtonSample1"
        },
        {
            "file": "lib/ui/LCheckBox-0.1.0.js",
            "line": 41,
            "description": "按钮的是否选中",
            "itemtype": "property",
            "name": "checked",
            "type": "Boolean",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LCheckBox"
        },
        {
            "file": "lib/ui/LCheckBox-0.1.0.js",
            "line": 56,
            "description": "设置按钮选中状态。",
            "itemtype": "method",
            "name": "setChecked",
            "params": [
                {
                    "name": "value",
                    "description": "按钮选中状态。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LCheckBox"
        },
        {
            "file": "lib/ui/LCheckBox-0.1.1.js",
            "line": 41,
            "description": "按钮的是否选中",
            "itemtype": "property",
            "name": "checked",
            "type": "Boolean",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LCheckBox"
        },
        {
            "file": "lib/ui/LCheckBox-0.1.1.js",
            "line": 58,
            "description": "设置按钮选中状态。",
            "itemtype": "method",
            "name": "setChecked",
            "params": [
                {
                    "name": "value",
                    "description": "按钮选中状态。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LCheckBox"
        },
        {
            "file": "lib/ui/LComboBox-0.1.0.js",
            "line": 23,
            "description": "[只读]组合框的值的索引",
            "itemtype": "property",
            "name": "selectIndex",
            "type": "String",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LComboBox"
        },
        {
            "file": "lib/ui/LComboBox-0.1.0.js",
            "line": 31,
            "description": "[只读]组合框的值",
            "itemtype": "property",
            "name": "value",
            "type": "String",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LComboBox"
        },
        {
            "file": "lib/ui/LComboBox-0.1.0.js",
            "line": 107,
            "description": "组合框的值改变时调用此事件。",
            "itemtype": "event",
            "name": "LComboBox.ON_CHANGE",
            "since": "0.1.0",
            "class": "UI:LComboBox"
        },
        {
            "file": "lib/ui/LComboBox-0.1.0.js",
            "line": 143,
            "description": "删除元素。",
            "itemtype": "method",
            "name": "deleteChild",
            "params": [
                {
                    "name": "value",
                    "description": "删除元素的值。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LComboBox"
        },
        {
            "file": "lib/ui/LComboBox-0.1.0.js",
            "line": 173,
            "description": "增加元素。",
            "itemtype": "method",
            "name": "setChild",
            "params": [
                {
                    "name": "value",
                    "description": "增加元素的值。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LComboBox"
        },
        {
            "file": "lib/ui/LComboBox-0.1.0.js",
            "line": 282,
            "description": "设置组合框的值。",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "组合框的值。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LComboBox"
        },
        {
            "file": "lib/ui/LComboBox-0.1.1.js",
            "line": 23,
            "description": "[只读]组合框的值的索引",
            "itemtype": "property",
            "name": "selectIndex",
            "type": "String",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LComboBox"
        },
        {
            "file": "lib/ui/LComboBox-0.1.1.js",
            "line": 31,
            "description": "[只读]组合框的值",
            "itemtype": "property",
            "name": "value",
            "type": "String",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LComboBox"
        },
        {
            "file": "lib/ui/LComboBox-0.1.1.js",
            "line": 107,
            "description": "组合框的值改变时调用此事件。",
            "itemtype": "event",
            "name": "LComboBox.ON_CHANGE",
            "since": "0.1.0",
            "class": "UI:LComboBox"
        },
        {
            "file": "lib/ui/LComboBox-0.1.1.js",
            "line": 143,
            "description": "删除元素。",
            "itemtype": "method",
            "name": "deleteChild",
            "params": [
                {
                    "name": "value",
                    "description": "删除元素的值。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LComboBox"
        },
        {
            "file": "lib/ui/LComboBox-0.1.1.js",
            "line": 173,
            "description": "增加元素。",
            "itemtype": "method",
            "name": "setChild",
            "params": [
                {
                    "name": "value",
                    "description": "增加元素的值。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LComboBox"
        },
        {
            "file": "lib/ui/LComboBox-0.1.1.js",
            "line": 283,
            "description": "设置组合框的值。",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "组合框的值。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LComboBox"
        },
        {
            "file": "lib/ui/LComboBox-0.1.2.js",
            "line": 23,
            "description": "[只读]组合框的值的索引",
            "itemtype": "property",
            "name": "selectIndex",
            "type": "String",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LComboBox"
        },
        {
            "file": "lib/ui/LComboBox-0.1.2.js",
            "line": 31,
            "description": "[只读]组合框的值",
            "itemtype": "property",
            "name": "value",
            "type": "String",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LComboBox"
        },
        {
            "file": "lib/ui/LComboBox-0.1.2.js",
            "line": 108,
            "description": "组合框的值改变时调用此事件。",
            "itemtype": "event",
            "name": "LComboBox.ON_CHANGE",
            "since": "0.1.0",
            "class": "UI:LComboBox"
        },
        {
            "file": "lib/ui/LComboBox-0.1.2.js",
            "line": 114,
            "description": "删除元素。",
            "itemtype": "method",
            "name": "deleteChild",
            "params": [
                {
                    "name": "value",
                    "description": "删除元素的值。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LComboBox"
        },
        {
            "file": "lib/ui/LComboBox-0.1.2.js",
            "line": 144,
            "description": "增加元素。",
            "itemtype": "method",
            "name": "setChild",
            "params": [
                {
                    "name": "value",
                    "description": "增加元素的值。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LComboBox"
        },
        {
            "file": "lib/ui/LComboBox-0.1.2.js",
            "line": 219,
            "description": "设置组合框的值。",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "组合框的值。",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LComboBox"
        },
        {
            "file": "lib/ui/LListView-0.1.0.js",
            "line": 16,
            "description": "[只读]LListView列表的画布，为了提升LListView的效率，LListView的所有子项都会被draw到这个LBitmapData对象上，由LListView内部控制刷新，所以是只读属性，外部不可操作。",
            "itemtype": "property",
            "name": "bitmapData",
            "type": "LBitmapData",
            "since": "1.10.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.0.js",
            "line": 25,
            "description": "LListView列表的可视范围，即大小。",
            "itemtype": "property",
            "name": "clipping",
            "type": "LRectangle",
            "default": "new LRectangle (0, 0, 100, 100)",
            "since": "1.10.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.0.js",
            "line": 35,
            "description": "单位宽度",
            "itemtype": "property",
            "name": "cellWidth",
            "type": "float",
            "default": "100",
            "since": "1.10.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.0.js",
            "line": 44,
            "description": "单位高度",
            "itemtype": "property",
            "name": "cellHeight",
            "type": "float",
            "default": "100",
            "since": "1.10.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.0.js",
            "line": 53,
            "description": "子单位平铺方向（只能是LListView.Direction.Horizontal或者LListView.Direction.Vertical中的一个）",
            "itemtype": "property",
            "name": "arrangement",
            "type": "LListView.Direction",
            "default": "LListView.Direction.Horizontal",
            "since": "1.10.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.0.js",
            "line": 62,
            "description": "可拖动的方向",
            "itemtype": "property",
            "name": "movement",
            "type": "LListView.Direction",
            "default": "LListView.Direction.Vertical",
            "since": "1.10.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.0.js",
            "line": 71,
            "description": "拖动时的效果",
            "itemtype": "property",
            "name": "dragEffect",
            "type": "LListView.DragEffects",
            "default": "LListView.DragEffects.MomentumAndSpring",
            "since": "1.10.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.0.js",
            "line": 84,
            "description": "<p>每行(列)的单位个数</p>\n<p>如果arrangement为LListView.Direction.Horizontal，则表示每行的单位个数</p>\n<p>如果arrangement为LListView.Direction.Vertical，则表示每列的单位个数</p>",
            "itemtype": "property",
            "name": "maxPerLine",
            "type": "int",
            "default": "1",
            "since": "1.10.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.0.js",
            "line": 116,
            "description": "定义LListView 列表的垂直方向的滚动条。",
            "itemtype": "method",
            "name": "setVerticalScrollBar",
            "params": [
                {
                    "name": "scrollBar",
                    "description": "滚动条",
                    "type": "LListScrollBar"
                }
            ],
            "examplelink": "<p><a href=\"../../../api/ui/LListScrollBar.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.10.0",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.0.js",
            "line": 131,
            "description": "定义LListView 列表的水平方向的滚动条。",
            "itemtype": "method",
            "name": "setHorizontalScrollBar",
            "params": [
                {
                    "name": "scrollBar",
                    "description": "滚动条",
                    "type": "LListScrollBar"
                }
            ],
            "examplelink": "<p><a href=\"../../../api/ui/LListScrollBar.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.10.0",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.0.js",
            "line": 165,
            "description": "刷新LListView 列表",
            "itemtype": "method",
            "name": "updateView",
            "access": "public",
            "tagname": "",
            "since": "1.10.0",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.0.js",
            "line": 243,
            "description": "为LListView 列表增加一个子项。",
            "itemtype": "method",
            "name": "insertChildView",
            "params": [
                {
                    "name": "child",
                    "description": "单元子项",
                    "type": "LListChildView"
                }
            ],
            "examplelink": "<p><a href=\"../../../api/ui/LListView.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.10.0",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.0.js",
            "line": 260,
            "description": "从LListView 列表中删除一个子项。",
            "itemtype": "method",
            "name": "deleteChildView",
            "params": [
                {
                    "name": "child",
                    "description": "单元子项",
                    "type": "LListChildView"
                }
            ],
            "examplelink": "<p><a href=\"../../../api/ui/LListView.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.10.0",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.0.js",
            "line": 278,
            "description": "LListView 列表不可以添加LMouseEvent事件，如果需要使用点击事件，需要重写子项的onClick函数。",
            "itemtype": "method",
            "name": "updateList",
            "params": [
                {
                    "name": "list",
                    "description": "单元子项的数组",
                    "type": "Array"
                }
            ],
            "example": [
                "\n\tvar list = [new ListChildView()];\n\tvar listView = new LListView();\n\tlistView.updateList(list);"
            ],
            "access": "public",
            "tagname": "",
            "since": "1.10.0",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.0.js",
            "line": 439,
            "description": "当LListView 列表的子项LListChildView内容有改变的时候，需要使用调用updateView来刷新，如果被改变的对象在LListView的可视范围以外的话，则无需刷新。",
            "itemtype": "method",
            "name": "updateView",
            "examplelink": "<p><a href=\"../../../api/ui/LListView_onClick.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.10.0",
            "class": "UI:LListChildView"
        },
        {
            "file": "lib/ui/LListView-0.1.0.js",
            "line": 467,
            "description": "LListView 列表不可以添加LMouseEvent事件，如果需要使用点击事件，需要重写子项的onClick函数。",
            "itemtype": "method",
            "name": "onClick",
            "params": [
                {
                    "name": "event",
                    "description": "{currentTarget:LListView对象,target:LListChildView自身,offsetX:同LMouseEvent,offsetY:同LMouseEvent,selfX:同LMouseEvent,selfY:同LMouseEvent}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\tfunction MyListChildView(){\n\t\tvar self = this;\n\t\tbase(self,LListChildView,[]);\n\t\t//处理\n\t}\n\tMyListChildView.prototype.onClick = function(event){\n\t\tvar self = event.target;\n\t\t//处理\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/ui/LListView_onClick.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.10.0",
            "class": "UI:LListChildView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 16,
            "description": "[只读]LListView列表的画布，为了提升LListView的效率，LListView的所有子项都会被draw到这个LBitmapData对象上，由LListView内部控制刷新，所以是只读属性，外部不可操作。",
            "itemtype": "property",
            "name": "bitmapData",
            "type": "LBitmapData",
            "since": "1.10.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 26,
            "description": "LListView列表的可视范围，即大小。",
            "itemtype": "property",
            "name": "clipping",
            "type": "LRectangle",
            "default": "new LRectangle (0, 0, 100, 100)",
            "since": "1.10.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 36,
            "description": "单位宽度",
            "itemtype": "property",
            "name": "cellWidth",
            "type": "float",
            "default": "100",
            "since": "1.10.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 45,
            "description": "单位高度",
            "itemtype": "property",
            "name": "cellHeight",
            "type": "float",
            "default": "100",
            "since": "1.10.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 54,
            "description": "子单位平铺方向（只能是LListView.Direction.Horizontal或者LListView.Direction.Vertical中的一个）",
            "itemtype": "property",
            "name": "arrangement",
            "type": "LListView.Direction",
            "default": "LListView.Direction.Horizontal",
            "since": "1.10.0",
            "access": "public",
            "tagname": "",
            "examplelink": "<p><a href=\"../../../api/ui/LListView_arrangement.html\" target=\"_blank\">测试链接</a></p>",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 64,
            "description": "可拖动的方向",
            "itemtype": "property",
            "name": "movement",
            "type": "LListView.Direction",
            "default": "LListView.Direction.Vertical",
            "since": "1.10.0",
            "access": "public",
            "tagname": "",
            "examplelink": "<p><a href=\"../../../api/ui/LListView_movement.html\" target=\"_blank\">测试链接</a></p>",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 74,
            "description": "拖动时的效果",
            "itemtype": "property",
            "name": "dragEffect",
            "type": "LListView.DragEffects",
            "default": "LListView.DragEffects.MomentumAndSpring",
            "since": "1.10.0",
            "access": "public",
            "tagname": "",
            "examplelink": "<p><a href=\"../../../api/ui/LListView_DragEffects.html\" target=\"_blank\">测试链接</a></p>",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 88,
            "description": "<p>每行(列)的单位个数</p>\n<p>如果arrangement为LListView.Direction.Horizontal，则表示每行的单位个数</p>\n<p>如果arrangement为LListView.Direction.Vertical，则表示每列的单位个数</p>",
            "itemtype": "property",
            "name": "maxPerLine",
            "type": "int",
            "default": "1",
            "since": "1.10.0",
            "access": "public",
            "tagname": "",
            "examplelink": "<p><a href=\"../../../api/ui/LListView_maxPerLine.html\" target=\"_blank\">测试链接</a></p>",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 121,
            "description": "定义LListView 列表的垂直方向的滚动条。",
            "itemtype": "method",
            "name": "setVerticalScrollBar",
            "params": [
                {
                    "name": "scrollBar",
                    "description": "滚动条",
                    "type": "LListScrollBar"
                }
            ],
            "examplelink": "<p><a href=\"../../../api/ui/LListScrollBar.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.10.0",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 136,
            "description": "定义LListView 列表的水平方向的滚动条。",
            "itemtype": "method",
            "name": "setHorizontalScrollBar",
            "params": [
                {
                    "name": "scrollBar",
                    "description": "滚动条",
                    "type": "LListScrollBar"
                }
            ],
            "examplelink": "<p><a href=\"../../../api/ui/LListScrollBar.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.10.0",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 151,
            "description": "设置LListView 列表的显示范围。",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "宽",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "高",
                    "type": "Int"
                }
            ],
            "access": "public",
            "tagname": "",
            "since": "1.10.0",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 181,
            "description": "刷新LListView 列表",
            "itemtype": "method",
            "name": "updateView",
            "access": "public",
            "tagname": "",
            "since": "1.10.0",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 191,
            "description": "获取LListView 列表的所有子项。",
            "itemtype": "method",
            "name": "getItems",
            "access": "public",
            "tagname": "",
            "since": "1.10.1",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 200,
            "description": "判断LListView 列表的子项是否处于有效的显示范围之内。",
            "itemtype": "method",
            "name": "isInClipping",
            "params": [
                {
                    "name": "index",
                    "description": "子项的索引号",
                    "type": "Int"
                }
            ],
            "access": "public",
            "tagname": "",
            "since": "1.10.1",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 285,
            "description": "为LListView 列表增加一个子项。",
            "itemtype": "method",
            "name": "insertChildView",
            "params": [
                {
                    "name": "child",
                    "description": "单元子项",
                    "type": "LListChildView"
                }
            ],
            "examplelink": "<p><a href=\"../../../api/ui/LListView.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.10.0",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 302,
            "description": "从LListView 列表中删除一个子项。",
            "itemtype": "method",
            "name": "deleteChildView",
            "params": [
                {
                    "name": "child",
                    "description": "单元子项",
                    "type": "LListChildView"
                }
            ],
            "examplelink": "<p><a href=\"../../../api/ui/LListView.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.10.0",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 320,
            "description": "LListView 列表不可以添加LMouseEvent事件，如果需要使用点击事件，需要重写子项的onClick函数。",
            "itemtype": "method",
            "name": "updateList",
            "params": [
                {
                    "name": "list",
                    "description": "单元子项的数组",
                    "type": "Array"
                }
            ],
            "example": [
                "\n\tvar list = [new ListChildView()];\n\tvar listView = new LListView();\n\tlistView.updateList(list);"
            ],
            "access": "public",
            "tagname": "",
            "since": "1.10.0",
            "class": "UI:LListView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 489,
            "description": "当LListView 列表的子项LListChildView内容有改变的时候，需要使用调用updateView来刷新，如果被改变的对象在LListView的可视范围以外的话，则无需刷新。",
            "itemtype": "method",
            "name": "updateView",
            "examplelink": "<p><a href=\"../../../api/ui/LListView_onClick.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.10.0",
            "class": "UI:LListChildView"
        },
        {
            "file": "lib/ui/LListView-0.1.1.js",
            "line": 549,
            "description": "LListView 列表不可以添加LMouseEvent事件，如果需要使用点击事件，需要重写子项的onClick函数。",
            "itemtype": "method",
            "name": "onClick",
            "params": [
                {
                    "name": "event",
                    "description": "{currentTarget:LListView对象,target:LListChildView自身,offsetX:同LMouseEvent,offsetY:同LMouseEvent,selfX:同LMouseEvent,selfY:同LMouseEvent}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\tfunction MyListChildView(){\n\t\tvar self = this;\n\t\tbase(self,LListChildView,[]);\n\t\t//处理\n\t}\n\tMyListChildView.prototype.onClick = function(event){\n\t\tvar self = event.target;\n\t\t//处理\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/ui/LListView_onClick.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.10.0",
            "class": "UI:LListChildView"
        },
        {
            "file": "lib/ui/LMenubar-0.1.0.js",
            "line": 79,
            "description": "菜单栏关闭时调用此事件。",
            "itemtype": "event",
            "name": "LMenubar.MENU_CLOSE",
            "since": "0.1.0",
            "class": "UI:LMenubar"
        },
        {
            "file": "lib/ui/LMenubar-0.1.1.js",
            "line": 79,
            "description": "菜单栏关闭时调用此事件。",
            "itemtype": "event",
            "name": "LMenubar.MENU_CLOSE",
            "since": "0.1.0",
            "class": "UI:LMenubar"
        },
        {
            "file": "lib/ui/LPanel-0.1.0.js",
            "line": 69,
            "description": "重新设定大小。",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "想要表示的Panel的宽。",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "想要表示的Panel的高。",
                    "type": "Float"
                }
            ],
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LPanel"
        },
        {
            "file": "lib/ui/LPanel-0.1.1.js",
            "line": 73,
            "description": "重新设定大小。",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "想要表示的Panel的宽。",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "想要表示的Panel的高。",
                    "type": "Float"
                }
            ],
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LPanel"
        },
        {
            "file": "lib/ui/LPanel-0.1.2.js",
            "line": 79,
            "description": "重新设定大小。",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "想要表示的Panel的宽。",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "想要表示的Panel的高。",
                    "type": "Float"
                }
            ],
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LPanel"
        },
        {
            "file": "lib/ui/LRadio-0.1.0.js",
            "line": 78,
            "description": "[只读]单选按钮的值",
            "itemtype": "property",
            "name": "value",
            "type": "float|String",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LRadio"
        },
        {
            "file": "lib/ui/LRadio-0.1.0.js",
            "line": 87,
            "description": "添加单选按钮子元素。",
            "itemtype": "method",
            "name": "setChildRadio",
            "params": [
                {
                    "name": "value",
                    "description": "单选按钮的子元素的值。",
                    "type": "Float|String"
                },
                {
                    "name": "x",
                    "description": "单选按钮子元素的x坐标。",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "单选按钮子元素的y坐标。",
                    "type": "Float"
                },
                {
                    "name": "layer",
                    "description": "[可选]单选按钮的子元素的未选中状态。",
                    "type": "LDisplayObject"
                },
                {
                    "name": "layerSelect",
                    "description": "[可选]单选按钮的子元素的选中状态。",
                    "type": "LDisplayObject"
                }
            ],
            "return": {
                "description": "所添加的单选按钮子元素。",
                "type": "LRadioChild"
            },
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LRadio"
        },
        {
            "file": "lib/ui/LRadio-0.1.0.js",
            "line": 107,
            "description": "添加单选按钮子元素。",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "value",
                    "description": "所添加的单选按钮子元素。",
                    "type": "LRadioChild"
                }
            ],
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LRadio"
        },
        {
            "file": "lib/ui/LRadio-0.1.0.js",
            "line": 117,
            "description": "设定单选按钮的选中状态(值)。",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "单选按钮的值。",
                    "type": "Float|String"
                }
            ],
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LRadio"
        },
        {
            "file": "lib/ui/LRange-0.1.0.js",
            "line": 31,
            "description": "[只读]区域范围对象的值，范伟［0-1］。",
            "itemtype": "property",
            "name": "value",
            "type": "float",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "LRange"
        },
        {
            "file": "lib/ui/LRange-0.1.1.js",
            "line": 31,
            "description": "[只读]区域范围对象的值，范伟［0-1］。",
            "itemtype": "property",
            "name": "value",
            "type": "float",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "LRange"
        },
        {
            "file": "lib/ui/LTable-0.1.0.js",
            "line": 37,
            "description": "加入一行单元格",
            "itemtype": "method",
            "name": "addRow",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LTable"
        },
        {
            "file": "lib/ui/LTable-0.1.0.js",
            "line": 77,
            "description": "加入一列单元格",
            "itemtype": "method",
            "name": "addCol",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LTable"
        },
        {
            "file": "lib/ui/LTable-0.1.0.js",
            "line": 111,
            "description": "将child加到第row行，第col列这个单元格里上",
            "itemtype": "method",
            "name": "setCell",
            "params": [
                {
                    "name": "child",
                    "description": "一个LDisplayObject对象。",
                    "type": "LDisplayObject"
                },
                {
                    "name": "row",
                    "description": "行索引。",
                    "type": "Int"
                },
                {
                    "name": "col",
                    "description": "列索引。",
                    "type": "Int"
                }
            ],
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LTable"
        },
        {
            "file": "lib/ui/LWindow-0.1.0.js",
            "line": 42,
            "description": "[只读]窗口的根容器，在窗口中添加显示对象，都需要加在此容器或者它的子容器中。",
            "itemtype": "property",
            "name": "layer",
            "type": "LSprite",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LWindow"
        },
        {
            "file": "lib/ui/LWindow-0.1.0.js",
            "line": 65,
            "description": "窗口关闭时调用此事件。",
            "itemtype": "event",
            "name": "LWindow.CLOSE",
            "since": "0.1.0",
            "class": "UI:LWindow"
        },
        {
            "file": "lib/ui/LWindow-0.1.1.js",
            "line": 113,
            "description": "[只读]窗口的根容器，在窗口中添加显示对象，都需要加在此容器或者它的子容器中。",
            "itemtype": "property",
            "name": "layer",
            "type": "LSprite",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LWindow"
        },
        {
            "file": "lib/ui/LWindow-0.1.1.js",
            "line": 151,
            "description": "窗口关闭时调用此事件。",
            "itemtype": "event",
            "name": "LWindow.CLOSE",
            "since": "0.1.0",
            "class": "UI:LWindow"
        },
        {
            "file": "lib/ui/LWindow-0.1.2.js",
            "line": 113,
            "description": "[只读]窗口的根容器，在窗口中添加显示对象，都需要加在此容器或者它的子容器中。",
            "itemtype": "property",
            "name": "layer",
            "type": "LSprite",
            "since": "0.1.0",
            "access": "public",
            "tagname": "",
            "class": "UI:LWindow"
        },
        {
            "file": "lib/ui/LWindow-0.1.2.js",
            "line": 151,
            "description": "窗口关闭时调用此事件。",
            "itemtype": "event",
            "name": "LWindow.CLOSE",
            "since": "0.1.0",
            "class": "UI:LWindow"
        },
        {
            "file": "lib/LBox2d-0.4.0.js",
            "line": 40,
            "description": "LBox2d暂停处理",
            "itemtype": "property",
            "name": "stop",
            "type": "Boolean",
            "default": "false",
            "since": "1.9.1",
            "access": "public",
            "tagname": "",
            "class": "LBox2d"
        },
        {
            "file": "lib/LBox2d-0.4.0.js",
            "line": 77,
            "description": "<p>为box2d加载事件监听器。</p>",
            "itemtype": "method",
            "name": "setEvent",
            "params": [
                {
                    "name": "type",
                    "description": "事件的类型。\n<p>事件的类型，可以使用下面四个事件类型：</p>\n<table>\n<tr><th>类型</th><th>作用</th></tr>\n<tr><td>LEvent.BEGIN_CONTACT</td><td>刚刚碰撞开始的时候会触发这个函数。</td></tr>\n<tr><td>LEvent.END_CONTACT</td><td>碰撞结束的时候会触发这个函数。</td></tr>\n<tr><td>LEvent.POST_SOLVE</td><td>碰撞后会处理这个函数。</td></tr>\n<tr><td>LEvent.PRE_SOLVE</td><td>碰撞前即将碰撞的时候。</td></tr>\n</table>",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "处理事件的侦听器函数。",
                    "type": "Function"
                }
            ],
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "LBox2d"
        },
        {
            "file": "lib/LBox2d-0.4.0.js",
            "line": 118,
            "description": "<p>给两个物体添加焊接关节。</p>\n<p>焊接关节相当于捆绑，就是将两个物体牢牢地绑在一起，使其成为一个物体。</p>",
            "itemtype": "method",
            "name": "setWeldJoint",
            "params": [
                {
                    "name": "b2BodyDefA",
                    "description": "表示捆绑对象物体A",
                    "type": "B2BodyDef"
                },
                {
                    "name": "b2BodyDefB",
                    "description": "表示捆绑对象物体B",
                    "type": "B2BodyDef"
                }
            ],
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "LBox2d"
        },
        {
            "file": "lib/LBox2d-0.4.0.js",
            "line": 133,
            "description": "<p>给两个物体添加悬挂关节。</p>\n<p>悬挂关节类似于一个垂直的移动关节，它将一个物体悬挂到了另一物体上。</p>",
            "itemtype": "method",
            "name": "setLineJoint",
            "params": [
                {
                    "name": "b2BodyDefA",
                    "description": "表示对象物体A",
                    "type": "B2BodyDef"
                },
                {
                    "name": "b2BodyDefB",
                    "description": "表示对象物体B",
                    "type": "B2BodyDef"
                },
                {
                    "name": "vec",
                    "description": "表示物体B相对与悬挂点的移动方向，这个悬挂点就是物体B的初始位置，vec是一个数组[x,y]，设置不同的比例，可以建立不同方向上的悬挂关节。这和移动关节比较类似，大家可以试着改变这个参数的值，来体验一下它们的具体区别",
                    "type": "Array"
                },
                {
                    "name": "limits",
                    "description": "表示移动的相对长度限制数组，这个数组的内容是：[正向最大长度,反向最大角度]，在这里它可以限制两个物体相对移动的最大长度",
                    "type": "Array"
                },
                {
                    "name": "motors",
                    "description": "表示马达数组，这个数组的内容是：[正向力度,反向力度]，这个马达可以给移动关节添加一个持续的力，比如在上面的例子中，如果将马达参数设置为[0,10]，你会发现，物体不是向下移动了，而是向上移动，即使你用鼠标将物体拖拽到下面，它也会因为马达的力而再次向上移动",
                    "type": "Array"
                }
            ],
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "LBox2d"
        },
        {
            "file": "lib/LBox2d-0.4.0.js",
            "line": 166,
            "description": "<p>添加齿轮关节。</p>\n<p>使用Box2d可以模拟齿轮功能，这样就可以轻松地建立复杂的机械模型等，齿轮关节相对来说稍微复杂一些，因为它需要结合旋转关节和移动关节。</p>",
            "itemtype": "method",
            "name": "setGearJoint",
            "params": [
                {
                    "name": "b2BodyDefA",
                    "description": "表示对象物体A",
                    "type": "B2BodyDef"
                },
                {
                    "name": "b2BodyDefB",
                    "description": "表示对象物体B",
                    "type": "B2BodyDef"
                },
                {
                    "name": "ratio",
                    "description": "表示齿轮的比例系数，这个数值越小，物体A旋转一周使得物体B移动的距离也就越大，如果这个值设置得很大，那么物体A旋转几周才能使B移动一段很短的距离",
                    "type": "Float"
                },
                {
                    "name": "revoluteJointDef",
                    "description": "齿轮关节中的物体A和轴心所建立的旋转关节",
                    "type": "JointDef"
                },
                {
                    "name": "prismaticJointDef",
                    "description": "齿轮关节中的物体B和齿轮轴心所建立的移动连接",
                    "type": "JointDef"
                }
            ],
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "LBox2d"
        },
        {
            "file": "lib/LBox2d-0.4.0.js",
            "line": 188,
            "description": "<p>给两个物体添加移动关节。</p>\n<p>对于移动关节来说，它会有一个自由度，也就是说它限制了两个物体的移动范畴，即只能沿指定轴相对移动。</p>",
            "itemtype": "method",
            "name": "setPrismaticJoint",
            "params": [
                {
                    "name": "b2BodyDefA",
                    "description": "表示对象物体A",
                    "type": "B2BodyDef"
                },
                {
                    "name": "b2BodyDefB",
                    "description": "表示对象物体B",
                    "type": "B2BodyDef"
                },
                {
                    "name": "vec",
                    "description": "表示物体A和物体B的相对移动方向，它是一个数组[x,y]，设置不同的比例，可以建立不同方向上的移动关节",
                    "type": "Array"
                },
                {
                    "name": "limits",
                    "description": "表示移动的相对长度限制数组，这个数组的内容是：[正向最大长度,反向最大角度]，在这里它可以限制两个物体相对移动的最大长度",
                    "type": "Array"
                },
                {
                    "name": "motors",
                    "description": "表示马达数组，这个数组的内容是：[正向力度,反向力度]，这个马达可以给移动关节添加一个持续的力。比如在上面的例子中，如果将马达参数设置为[0,10]，你会发现，物体不是向下移动了，而是向上移动，即使你用鼠标将物体拖拽到下面，它也会因为马达的力而再次向上移动",
                    "type": "Array"
                }
            ],
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "LBox2d"
        },
        {
            "file": "lib/LBox2d-0.4.0.js",
            "line": 221,
            "description": "<p>给两个物体添加旋转关节。</p>\n<p>旋转关节可以强制两个物体共享一个描点，这样就能使它们进行相对旋转。</p>",
            "itemtype": "method",
            "name": "setRevoluteJoint",
            "params": [
                {
                    "name": "b2BodyDefA",
                    "description": "表示对象物体A",
                    "type": "B2BodyDef"
                },
                {
                    "name": "b2BodyDefB",
                    "description": "表示对象物体B",
                    "type": "B2BodyDef"
                },
                {
                    "name": "limits",
                    "description": "表示旋转角度限制数组，这个数组的内容是：[最小角度,最大角度]，它在这里可以限制旋转关节旋转的角度",
                    "type": "Array"
                },
                {
                    "name": "motors",
                    "description": "表示马达数组，这个数组的内容是：[力度,速度]，马达可以有很多用途，在这里，它可以是关节自动进行旋转",
                    "type": "Array"
                }
            ],
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "LBox2d"
        },
        {
            "file": "lib/LBox2d-0.4.0.js",
            "line": 252,
            "description": "<p>给两个物体添加距离关节。</p>\n<p>距离关节是一个最简单的关节，它约束了两个物体之间的距离，两个物体之间的距离关节一旦建立，它们的距离就将会固定住。当你拖拽其中一个物体，另一个物体为了保证距离固定不变，也会跟着移动起来。</p>",
            "itemtype": "method",
            "name": "setDistanceJoint",
            "params": [
                {
                    "name": "b2BodyDefA",
                    "description": "表示对象物体A",
                    "type": "B2BodyDef"
                },
                {
                    "name": "b2BodyDefB",
                    "description": "表示对象物体B",
                    "type": "B2BodyDef"
                }
            ],
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "LBox2d"
        },
        {
            "file": "lib/LBox2d-0.4.0.js",
            "line": 267,
            "description": "<p>给两个物体添加滑轮关节。</p>\n<p>要滑轮关节，可以先创建一个滑轮，然后将两个物体通过一条“绳子”接通，当一个物体上升或者下降的时候，因为“绳子”的长短不变，另一个物体就会相应的下降或者上升。</p>",
            "itemtype": "method",
            "name": "setPulleyJoint",
            "params": [
                {
                    "name": "b2BodyDefA",
                    "description": "表示对象物体A",
                    "type": "B2BodyDef"
                },
                {
                    "name": "b2BodyDefB",
                    "description": "表示对象物体B",
                    "type": "B2BodyDef"
                },
                {
                    "name": "anchorA",
                    "description": "表示物体A相关的控制参数数组，这个数组的内容是：[x,y,length]，使用setPulleyJoint建立滑轮关节的时候，会自动以物体本身的中心作为描点，anchorA数组的前两个元素，决定了关节被建立时物体相对于这个描点的位置，anchorA数组的最后一个元素，决定了左侧绳子的长度",
                    "type": "Array"
                },
                {
                    "name": "anchorB",
                    "description": "表示物体B相关的控制参数数组，该数组中各元素的含义同anchorA",
                    "type": "Array"
                },
                {
                    "name": "ratio",
                    "description": "表示两边绳子的比例系数，比如在上面的例子中，如果将比例系数设置为2，那么左边的物体上升2的时候，右边物体只下降1",
                    "type": "Float"
                }
            ],
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "LBox2d"
        },
        {
            "file": "lib/LBox2d-0.4.0.js",
            "line": 407,
            "description": "<p>LBox2d相关。</p>\n<p>重新计算Box2d中的所有刚体的坐标，一般用于镜头跟随效果。</p>",
            "itemtype": "method",
            "name": "synchronous",
            "since": "1.4.1",
            "access": "public",
            "tagname": "",
            "class": "LBox2d"
        },
        {
            "file": "lib/LFlash-0.1.0.js",
            "line": 11,
            "description": "<p>[静态] 将Flash Professional工具导出的JSON Array格式的数据转换为可被LAnimation直接使用的数组</p>",
            "itemtype": "method",
            "name": "LFlash.SpriteSheetConvert",
            "static": 1,
            "params": [
                {
                    "name": "jsonArray",
                    "description": "通过Flash Professional工具导出的SpriteSheet对象的json数组，导出时需要以JSON Array格式导出。",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "返回一个可被LAnimation直接使用的数组。",
                "type": "Array"
            },
            "example": [
                "\n\tvar loader;\n\tvar jData = {\"frames\": [\n\t{\n\t    \"filename\": \"fairy_base0000\",\n\t    \"frame\": {\"x\":0,\"y\":0,\"w\":169,\"h\":182},\n\t    \"rotated\": false,\n\t    \"trimmed\": true,\n\t    \"spriteSourceSize\": {\"x\":245,\"y\":433,\"w\":527,\"h\":616},\n\t    \"sourceSize\": {\"w\":527,\"h\":616}\n\t}\n\t,{\n\t    \"filename\": \"fairy_base0001\",\n\t    \"frame\": {\"x\":169,\"y\":0,\"w\":164,\"h\":182},\n\t    \"rotated\": false,\n\t    \"trimmed\": true,\n\t    \"spriteSourceSize\": {\"x\":247,\"y\":433,\"w\":527,\"h\":616},\n\t    \"sourceSize\": {\"w\":527,\"h\":616}\n\t}\n\t......\n\t],\n\t\"meta\": {\n\t    \"app\": \"Adobe Flash Professional\",\n\t    \"version\": \"13.1.0.226\",\n\t    \"image\": \"Pet2.png\",\n\t    \"format\": \"RGBA8888\",\n\t    \"size\": {\"w\":4096,\"h\":4096},\n\t    \"scale\": \"1\"\n\t}\n\t};\n\tLInit(50,\"legend\",527,616,main);\n\tfunction main(){\n\t    loader = new LLoader();  \n\t\tloader.addEventListener(LEvent.COMPLETE,loadBitmapdata);  \n\t\tloader.load(\"Pet2.png\",\"bitmapData\");\n\t}\n\tfunction loadBitmapdata(event){\n\t\tvar bitmapdata = new LBitmapData(loader.content,0,0,jData.frames[0].frame.w,jData.frames[0].frame.h);\n\t\tvar list = LFlash.SpriteSheetConvert(jData.frames);\n\t\tvar ppbing = new LAnimationTimeline(bitmapdata,[list]);\n\t\taddChild(ppbing);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LFlash/SpriteSheetConvert.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.8.11",
            "access": "public",
            "tagname": "",
            "class": "LFlash"
        },
        {
            "file": "lib/LQuadTree-0.1.0.js",
            "line": 27,
            "description": "矩形分割",
            "itemtype": "method",
            "name": "createChildren",
            "params": [
                {
                    "name": "deep",
                    "description": "将检测的矩形区域分割的深度(次数)",
                    "type": "Int"
                }
            ],
            "access": "public",
            "tagname": "",
            "since": "1.4.1",
            "class": "LQuadTree"
        },
        {
            "file": "lib/LQuadTree-0.1.0.js",
            "line": 51,
            "description": "检测矩形区域内是否继续被分割",
            "itemtype": "method",
            "name": "hasChildren",
            "return": {
                "description": "如果被检测的矩形区域有被继续分割，则返回true，否则返回false。",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "since": "1.4.1",
            "class": "LQuadTree"
        },
        {
            "file": "lib/LQuadTree-0.1.0.js",
            "line": 62,
            "description": "将检测矩形区域清空",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "一个空的LQuadTree对象。",
                "type": "LQuadTree"
            },
            "access": "public",
            "tagname": "",
            "since": "1.4.1",
            "class": "LQuadTree"
        },
        {
            "file": "lib/LQuadTree-0.1.0.js",
            "line": 83,
            "description": "将检测对象加入到LQuadTree对象内",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "value",
                    "description": "检测对象",
                    "type": "Object"
                },
                {
                    "name": "x",
                    "description": "检测对象的x坐标",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "检测对象的y坐标",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "一个装有传入的检测对象的LQuadTree对象，如果传入坐标超出检测区域，则返回null。",
                "type": "LQuadTree"
            },
            "access": "public",
            "tagname": "",
            "since": "1.4.1",
            "class": "LQuadTree"
        },
        {
            "file": "lib/LQuadTree-0.1.0.js",
            "line": 105,
            "description": "将检测对象从LQuadTree对象内移除",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "value",
                    "description": "检测对象",
                    "type": "Object"
                },
                {
                    "name": "x",
                    "description": "检测对象的x坐标(可选)",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "检测对象的y坐标(可选)",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "一个装有传入的检测对象的LQuadTree对象，如果传入坐标超出检测区域，则返回null。",
                "type": "LQuadTree"
            },
            "access": "public",
            "tagname": "",
            "since": "1.4.1",
            "class": "LQuadTree"
        },
        {
            "file": "lib/LQuadTree-0.1.0.js",
            "line": 132,
            "description": "检测坐标是否在LQuadTree对象内",
            "itemtype": "method",
            "name": "isIn",
            "params": [
                {
                    "name": "x",
                    "description": "检测的x坐标",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "检测的y坐标",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "检测结果。",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "since": "1.4.1",
            "class": "LQuadTree"
        },
        {
            "file": "lib/LQuadTree-0.1.0.js",
            "line": 145,
            "description": "返回指定矩形区域内的所有对象",
            "itemtype": "method",
            "name": "getDataInRect",
            "params": [
                {
                    "name": "rect",
                    "description": "指定矩形区域",
                    "type": "LRectangle"
                }
            ],
            "return": {
                "description": "获取到的对象数组。",
                "type": "Array"
            },
            "access": "public",
            "tagname": "",
            "since": "1.4.1",
            "class": "LQuadTree"
        },
        {
            "file": "lib/LQuadTree-0.1.1.js",
            "line": 27,
            "description": "矩形分割",
            "itemtype": "method",
            "name": "createChildren",
            "params": [
                {
                    "name": "deep",
                    "description": "将检测的矩形区域分割的深度(次数)",
                    "type": "Int"
                }
            ],
            "access": "public",
            "tagname": "",
            "since": "1.4.1",
            "class": "LQuadTree"
        },
        {
            "file": "lib/LQuadTree-0.1.1.js",
            "line": 51,
            "description": "检测矩形区域内是否继续被分割",
            "itemtype": "method",
            "name": "hasChildren",
            "return": {
                "description": "如果被检测的矩形区域有被继续分割，则返回true，否则返回false。",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "since": "1.4.1",
            "class": "LQuadTree"
        },
        {
            "file": "lib/LQuadTree-0.1.1.js",
            "line": 62,
            "description": "将检测矩形区域清空",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "一个空的LQuadTree对象。",
                "type": "LQuadTree"
            },
            "access": "public",
            "tagname": "",
            "since": "1.4.1",
            "class": "LQuadTree"
        },
        {
            "file": "lib/LQuadTree-0.1.1.js",
            "line": 83,
            "description": "将检测对象加入到LQuadTree对象内",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "value",
                    "description": "检测对象",
                    "type": "Object"
                },
                {
                    "name": "x",
                    "description": "检测对象的x坐标",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "检测对象的y坐标",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "一个装有传入的检测对象的LQuadTree对象，如果传入坐标超出检测区域，则返回null。",
                "type": "LQuadTree"
            },
            "access": "public",
            "tagname": "",
            "since": "1.4.1",
            "class": "LQuadTree"
        },
        {
            "file": "lib/LQuadTree-0.1.1.js",
            "line": 105,
            "description": "将检测对象从LQuadTree对象内移除",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "value",
                    "description": "检测对象",
                    "type": "Object"
                },
                {
                    "name": "x",
                    "description": "检测对象的x坐标(可选)",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "检测对象的y坐标(可选)",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "一个装有传入的检测对象的LQuadTree对象，如果传入坐标超出检测区域，则返回null。",
                "type": "LQuadTree"
            },
            "access": "public",
            "tagname": "",
            "since": "1.4.1",
            "class": "LQuadTree"
        },
        {
            "file": "lib/LQuadTree-0.1.1.js",
            "line": 132,
            "description": "检测坐标是否在LQuadTree对象内",
            "itemtype": "method",
            "name": "isIn",
            "params": [
                {
                    "name": "x",
                    "description": "检测的x坐标",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "检测的y坐标",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "检测结果。",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "since": "1.4.1",
            "class": "LQuadTree"
        },
        {
            "file": "lib/LQuadTree-0.1.1.js",
            "line": 145,
            "description": "返回指定矩形区域内的所有对象",
            "itemtype": "method",
            "name": "getDataInRect",
            "params": [
                {
                    "name": "rect",
                    "description": "指定矩形区域",
                    "type": "LRectangle"
                }
            ],
            "return": {
                "description": "获取到的对象数组。",
                "type": "Array"
            },
            "access": "public",
            "tagname": "",
            "since": "1.4.1",
            "class": "LQuadTree"
        },
        {
            "file": "lib/LTransitionManager-0.1.0.js",
            "line": 631,
            "description": "<p>指出现时的动画。</p>",
            "itemtype": "property",
            "name": "LTransition.IN",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.0.js",
            "line": 639,
            "description": "<p>指消失时的动画。</p>",
            "itemtype": "property",
            "name": "LTransition.OUT",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.0.js",
            "line": 647,
            "description": "<p>使用逐渐消失或逐渐出现的矩形来显示影剪对象。</p>\n<p>支持属性:</p>\n<table>\n<tr><th>属性</th><th>类型</th><th>说明</th></tr>\n<tr><td>numStrips</td><td>int</td><td>“遮帘”效果中的遮罩条纹数，建议范围1-50。</td></tr>\n<tr><td>dimension</td><td>0|1</td><td>指示遮罩条纹是垂直的（0）还是水平的（1）。遮罩条纹是垂直的，也意味着显示出来的是水平条纹的影片剪辑。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "LTransition.Blinds",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.0.js",
            "line": 661,
            "description": "<p>淡入淡出效果。</p>\n<p>支持属性:无</p>",
            "itemtype": "property",
            "name": "LTransition.Fade",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.0.js",
            "line": 670,
            "description": "<p>从某一指定方向滑入影片剪辑对象。</p>\n<p>支持属性:</p>\n<table>\n<tr><th>属性</th><th>类型</th><th>说明</th></tr>\n<tr><td>startPoint</td><td>int</td><td><p>一个指示起始位置的整数，范围1-9。</p><p>1：左上，2：上中，3：右上，4：左中，5：中心，6：右中，7：左下，8：下中，9：右下。</p></td></tr>\n</table>",
            "itemtype": "property",
            "name": "LTransition.Fly",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.0.js",
            "line": 683,
            "description": "<p>使用可以缩放的方形或圆形动画遮罩来显示影剪对象。</p>\n<p>支持属性:</p>\n<table>\n<tr><th>属性</th><th>类型</th><th>说明</th></tr>\n<tr><td>startPoint</td><td>int</td><td><p>一个指示起始位置的整数，范围1-9。</p><p>1：左上，2：上中，3：右上，4：左中，5：中心，6：右中，7：左下，8：下中，9：右下。</p></td></tr>\n<tr><td>shape</td><td>int</td><td><p>LIris.SQUARE(方形）的遮罩形状</p><p>LIris.CIRCLE（圆形）的遮罩形状</p></td></tr>\n</table>",
            "itemtype": "property",
            "name": "LTransition.Iris",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.0.js",
            "line": 697,
            "description": "<p>使用挤压遮帘效果水平或垂直显示对象。</p>\n<p>支持属性:</p>\n<table>\n<tr><th>属性</th><th>类型</th><th>说明</th></tr>\n<tr><td>dimension</td><td>int</td><td>挤压效果是水平的（0）还是垂直的（1）。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "LTransition.Curtain",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.0.js",
            "line": 710,
            "description": "<p>使用随机出现或消失的棋盘图案矩形来显示影剪。</p>\n<p>支持属性:</p>\n<table>\n<tr><th>属性</th><th>类型</th><th>说明</th></tr>\n<tr><td>xSections</td><td>int</td><td>沿水平轴的遮罩矩形的数目（建议1-25）</td></tr>\n<tr><td>ySections</td><td>int</td><td>沿垂直轴的遮罩矩形的数目（建议1-25）</td></tr>\n</table>",
            "itemtype": "property",
            "name": "LTransition.PixelDissolve",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.0.js",
            "line": 724,
            "description": "<p>使用缩放效果水平或垂直影剪对象。</p>\n<p>支持属性:</p>\n<table>\n<tr><th>属性</th><th>类型</th><th>说明</th></tr>\n<tr><td>dimension</td><td>int</td><td>缩放效果是水平的（0）还是垂直的（1）。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "LTransition.Squeeze",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.0.js",
            "line": 737,
            "description": "<p>使用水平移动的某一形状的动画遮罩来显示或隐藏影剪对象。</p>\n<p>支持属性:</p>\n<table>\n<tr><th>属性</th><th>类型</th><th>说明</th></tr>\n<tr><td>startPoint</td><td>int</td><td><p>一个指示起始位置的整数，范围1-9。</p><p>1：左上，2：上中，3：右上，4：左中，5：中心，6：右中，7：左下，8：下中，9：右下。</p></td></tr>\n</table>",
            "itemtype": "property",
            "name": "LTransition.Wipe",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.0.js",
            "line": 750,
            "description": "<p>通过按比例缩放来 放大或缩小 影剪对象。</p>\n<p>支持属性:无</p>",
            "itemtype": "property",
            "name": "LTransition.Zoom",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.0.js",
            "line": 786,
            "description": "<p>创建新的 LTransitionManager 实例，并指定目标对象，应用过渡并启动该过渡。</p>",
            "itemtype": "method",
            "name": "startTransition",
            "params": [
                {
                    "name": "transParams",
                    "description": "请参考LTransitionManager.start的transParams参数。",
                    "type": "Object"
                }
            ],
            "since": "1.8.0",
            "example": [
                "\n\tLInit(20,\"legend\",640,400,main);\n\tfunction main(){\n\t    var layer = new LSprite();\n\t\taddChild(layer);\n\t\tvar sprite01 = new LSprite();\n\t\tsprite01.graphics.drawRect(1, \"#ff0000\", [0, 0, 300, 300], true, \"#ff0000\");\n\t\tlayer.addChild(sprite01);\n\t\tvar sprite02 = new LSprite();\n\t\tsprite02.graphics.drawRect(1, \"#008800\", [0, 0, 300, 300], true, \"#008800\");\n\t\tlayer.addChild(sprite02);\n\t\tvar transitionManager = new LTransitionManager(sprite02);\n\t\tvar transParams = {type:LTransition.Fly,startPoint:1,duration:2,direction:LTransition.OUT,easing:Strong.easeOut};\n\t\ttransitionManager.startTransition(transParams);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LTransitionManager/startTransition.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LTransitionManager"
        },
        {
            "file": "lib/LTransitionManager-0.1.0.js",
            "line": 813,
            "description": "<p>[静态] 不创建新的 LTransitionManager 实例，直接指定目标对象，应用过渡并启动该过渡。</p>",
            "itemtype": "method",
            "name": "LTransitionManager.start",
            "static": 1,
            "params": [
                {
                    "name": "content",
                    "description": "要应用过渡效果的对象。",
                    "type": "LDisplayObject"
                },
                {
                    "name": "transParams",
                    "description": "\n在对象内传递的参数的集合。 transParams 对象应包含 type 参数，该参数（后面跟有 direction、duration 和 easing 参数） 指示要应用的过渡效果类。 \n此外，还必须包括该过渡效果类所必需的任何参数。 例如，LIris过渡效果类需要附加的 startPoint 和 shape 参数。 \n因此，除了每个过渡都需要的 type、duration 和 easing 参数外，您还应该添加 LIris 效果所需要的 startPoint 和 shape 参数（添加到 transParams 对象）。\n<p>transParams可以使用的值:</p>\n<table>\n<tr><th>属性</th><th>类型</th><th>说明</th></tr>\n<tr><td>type</td><td>float</td><td>过渡效果的类型，具体类型请参考LTransition</td></tr>\n<tr><td>duration</td><td>float</td><td>过渡效果的时间长度。</td></tr>\n<tr><td>ease</td><td>LEasing (or Function)</td><td>动画的补间效果，比如LEasing.Quad.easeIn or LEasing.Cubic.easeOut。默认值是LEasing.None.easeIn.</td></tr>\n</table>",
                    "type": "Object"
                }
            ],
            "since": "1.8.0",
            "example": [
                "\n\tLInit(20,\"legend\",640,400,main);\n\tfunction main(){\n\t    var layer = new LSprite();\n\t\taddChild(layer);\n\t\tvar sprite01 = new LSprite();\n\t\tsprite01.graphics.drawRect(1, \"#ff0000\", [0, 0, 300, 300], true, \"#ff0000\");\n\t\tlayer.addChild(sprite01);\n\t\tvar sprite02 = new LSprite();\n\t\tsprite02.graphics.drawRect(1, \"#008800\", [0, 0, 300, 300], true, \"#008800\");\n\t\tlayer.addChild(sprite02);\n\t\tvar transParams = {type:LTransition.Fly,startPoint:1,duration:2,direction:LTransition.OUT,easing:Strong.easeOut};\n\t\tLTransitionManager.start(sprite02,transParams);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LTransitionManager/LTransitionManager_start.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LTransitionManager"
        },
        {
            "file": "lib/LTransitionManager-0.1.1.js",
            "line": 634,
            "description": "<p>指出现时的动画。</p>",
            "itemtype": "property",
            "name": "LTransition.IN",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.1.js",
            "line": 642,
            "description": "<p>指消失时的动画。</p>",
            "itemtype": "property",
            "name": "LTransition.OUT",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.1.js",
            "line": 650,
            "description": "<p>使用逐渐消失或逐渐出现的矩形来显示影剪对象。</p>\n<p>支持属性:</p>\n<table>\n<tr><th>属性</th><th>类型</th><th>说明</th></tr>\n<tr><td>numStrips</td><td>int</td><td>“遮帘”效果中的遮罩条纹数，建议范围1-50。</td></tr>\n<tr><td>dimension</td><td>0|1</td><td>指示遮罩条纹是垂直的（0）还是水平的（1）。遮罩条纹是垂直的，也意味着显示出来的是水平条纹的影片剪辑。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "LTransition.Blinds",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.1.js",
            "line": 664,
            "description": "<p>淡入淡出效果。</p>\n<p>支持属性:无</p>",
            "itemtype": "property",
            "name": "LTransition.Fade",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.1.js",
            "line": 673,
            "description": "<p>从某一指定方向滑入影片剪辑对象。</p>\n<p>支持属性:</p>\n<table>\n<tr><th>属性</th><th>类型</th><th>说明</th></tr>\n<tr><td>startPoint</td><td>int</td><td><p>一个指示起始位置的整数，范围1-9。</p><p>1：左上，2：上中，3：右上，4：左中，5：中心，6：右中，7：左下，8：下中，9：右下。</p></td></tr>\n</table>",
            "itemtype": "property",
            "name": "LTransition.Fly",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.1.js",
            "line": 686,
            "description": "<p>使用可以缩放的方形或圆形动画遮罩来显示影剪对象。</p>\n<p>支持属性:</p>\n<table>\n<tr><th>属性</th><th>类型</th><th>说明</th></tr>\n<tr><td>startPoint</td><td>int</td><td><p>一个指示起始位置的整数，范围1-9。</p><p>1：左上，2：上中，3：右上，4：左中，5：中心，6：右中，7：左下，8：下中，9：右下。</p></td></tr>\n<tr><td>shape</td><td>int</td><td><p>LIris.SQUARE(方形）的遮罩形状</p><p>LIris.CIRCLE（圆形）的遮罩形状</p></td></tr>\n</table>",
            "itemtype": "property",
            "name": "LTransition.Iris",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.1.js",
            "line": 700,
            "description": "<p>使用挤压遮帘效果水平或垂直显示对象。</p>\n<p>支持属性:</p>\n<table>\n<tr><th>属性</th><th>类型</th><th>说明</th></tr>\n<tr><td>dimension</td><td>int</td><td>挤压效果是水平的（0）还是垂直的（1）。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "LTransition.Curtain",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.1.js",
            "line": 713,
            "description": "<p>使用随机出现或消失的棋盘图案矩形来显示影剪。</p>\n<p>支持属性:</p>\n<table>\n<tr><th>属性</th><th>类型</th><th>说明</th></tr>\n<tr><td>xSections</td><td>int</td><td>沿水平轴的遮罩矩形的数目（建议1-25）</td></tr>\n<tr><td>ySections</td><td>int</td><td>沿垂直轴的遮罩矩形的数目（建议1-25）</td></tr>\n</table>",
            "itemtype": "property",
            "name": "LTransition.PixelDissolve",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.1.js",
            "line": 727,
            "description": "<p>使用缩放效果水平或垂直影剪对象。</p>\n<p>支持属性:</p>\n<table>\n<tr><th>属性</th><th>类型</th><th>说明</th></tr>\n<tr><td>dimension</td><td>int</td><td>缩放效果是水平的（0）还是垂直的（1）。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "LTransition.Squeeze",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.1.js",
            "line": 740,
            "description": "<p>使用水平移动的某一形状的动画遮罩来显示或隐藏影剪对象。</p>\n<p>支持属性:</p>\n<table>\n<tr><th>属性</th><th>类型</th><th>说明</th></tr>\n<tr><td>startPoint</td><td>int</td><td><p>一个指示起始位置的整数，范围1-9。</p><p>1：左上，2：上中，3：右上，4：左中，5：中心，6：右中，7：左下，8：下中，9：右下。</p></td></tr>\n</table>",
            "itemtype": "property",
            "name": "LTransition.Wipe",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.1.js",
            "line": 753,
            "description": "<p>通过按比例缩放来 放大或缩小 影剪对象。</p>\n<p>支持属性:无</p>",
            "itemtype": "property",
            "name": "LTransition.Zoom",
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "LTransition"
        },
        {
            "file": "lib/LTransitionManager-0.1.1.js",
            "line": 789,
            "description": "<p>创建新的 LTransitionManager 实例，并指定目标对象，应用过渡并启动该过渡。</p>",
            "itemtype": "method",
            "name": "startTransition",
            "params": [
                {
                    "name": "transParams",
                    "description": "请参考LTransitionManager.start的transParams参数。",
                    "type": "Object"
                }
            ],
            "since": "1.8.0",
            "example": [
                "\n\tLInit(20,\"legend\",640,400,main);\n\tfunction main(){\n\t    var layer = new LSprite();\n\t\taddChild(layer);\n\t\tvar sprite01 = new LSprite();\n\t\tsprite01.graphics.drawRect(1, \"#ff0000\", [0, 0, 300, 300], true, \"#ff0000\");\n\t\tlayer.addChild(sprite01);\n\t\tvar sprite02 = new LSprite();\n\t\tsprite02.graphics.drawRect(1, \"#008800\", [0, 0, 300, 300], true, \"#008800\");\n\t\tlayer.addChild(sprite02);\n\t\tvar transitionManager = new LTransitionManager(sprite02);\n\t\tvar transParams = {type:LTransition.Fly,startPoint:1,duration:2,direction:LTransition.OUT,easing:Strong.easeOut};\n\t\ttransitionManager.startTransition(transParams);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LTransitionManager/startTransition.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LTransitionManager"
        },
        {
            "file": "lib/LTransitionManager-0.1.1.js",
            "line": 816,
            "description": "<p>[静态] 不创建新的 LTransitionManager 实例，直接指定目标对象，应用过渡并启动该过渡。</p>",
            "itemtype": "method",
            "name": "LTransitionManager.start",
            "static": 1,
            "params": [
                {
                    "name": "content",
                    "description": "要应用过渡效果的对象。",
                    "type": "LDisplayObject"
                },
                {
                    "name": "transParams",
                    "description": "\n在对象内传递的参数的集合。 transParams 对象应包含 type 参数，该参数（后面跟有 direction、duration 和 easing 参数） 指示要应用的过渡效果类。 \n此外，还必须包括该过渡效果类所必需的任何参数。 例如，LIris过渡效果类需要附加的 startPoint 和 shape 参数。 \n因此，除了每个过渡都需要的 type、duration 和 easing 参数外，您还应该添加 LIris 效果所需要的 startPoint 和 shape 参数（添加到 transParams 对象）。\n<p>transParams可以使用的值:</p>\n<table>\n<tr><th>属性</th><th>类型</th><th>说明</th></tr>\n<tr><td>type</td><td>float</td><td>过渡效果的类型，具体类型请参考LTransition</td></tr>\n<tr><td>duration</td><td>float</td><td>过渡效果的时间长度。</td></tr>\n<tr><td>ease</td><td>LEasing (or Function)</td><td>动画的补间效果，比如LEasing.Quad.easeIn or LEasing.Cubic.easeOut。默认值是LEasing.None.easeIn.</td></tr>\n</table>",
                    "type": "Object"
                }
            ],
            "since": "1.8.0",
            "example": [
                "\n\tLInit(20,\"legend\",640,400,main);\n\tfunction main(){\n\t    var layer = new LSprite();\n\t\taddChild(layer);\n\t\tvar sprite01 = new LSprite();\n\t\tsprite01.graphics.drawRect(1, \"#ff0000\", [0, 0, 300, 300], true, \"#ff0000\");\n\t\tlayer.addChild(sprite01);\n\t\tvar sprite02 = new LSprite();\n\t\tsprite02.graphics.drawRect(1, \"#008800\", [0, 0, 300, 300], true, \"#008800\");\n\t\tlayer.addChild(sprite02);\n\t\tvar transParams = {type:LTransition.Fly,startPoint:1,duration:2,direction:LTransition.OUT,easing:Strong.easeOut};\n\t\tLTransitionManager.start(sprite02,transParams);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LTransitionManager/LTransitionManager_start.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LTransitionManager"
        },
        {
            "file": "lib/LoadingSample1-0.1.0.js",
            "line": 62,
            "description": "设置进度条的长度百分比",
            "itemtype": "method",
            "name": "setProgress",
            "params": [
                {
                    "name": "value",
                    "description": "长度百分比(0〜100)",
                    "type": "Int"
                }
            ],
            "example": [
                "\n\tvar loadData = [\n\t\t{path:\"./js/jsfile01.js\",type:\"js\"},\n\t\t{path:\"./js/jsfile02.js\",type:\"js\"},\n\t\t{name:\"img0\",path:\"./images/img0.png\"},\n\t\t{name:\"img1\",path:\"./images/img1.png\"},\n\t\t{name:\"text01\",path:\"./files/text01.txt\",type:\"text\"},\n\t\t{name:\"text02\",path:\"./files/text02.txt\",type:\"text\"},\n\t\t{name:\"sound01\",path:\"./sounds/sound01.wav\",type:\"sound\"},\n\t\t{name:\"sound02\",path:\"./sounds/sound02.wav\",type:\"sound\"}\n\t];\n\tvar loadingLayer;\n\tvar datalist=[];\n\tfunction main(){\n\t\tloadingLayer = new LoadingSample1();\n\t\taddChild(loadingLayer);\n\t\tLLoadManage.load(\n\t\t\tloadData,\n\t\t\tfunction(progress){\n\t\t\t    loadingLayer.setProgress(progress);\n\t\t\t },\n\t\t\tgameInit\n\t\t);\n\t}\n\tfunction gameInit (result) {\n\t\tdatalist = result;\n\t\tremoveChild(loadingLayer);\n\t\tloadingLayer = null;\n\t\t//do something\n\t}"
            ],
            "access": "public",
            "tagname": "",
            "since": "1.4.0",
            "class": "LoadingSample"
        },
        {
            "file": "lib/LoadingSample1-0.1.1.js",
            "line": 62,
            "description": "设置进度条的长度百分比",
            "itemtype": "method",
            "name": "setProgress",
            "params": [
                {
                    "name": "value",
                    "description": "长度百分比(0〜100)",
                    "type": "Int"
                }
            ],
            "example": [
                "\n\tvar loadData = [\n\t\t{path:\"./js/jsfile01.js\",type:\"js\"},\n\t\t{path:\"./js/jsfile02.js\",type:\"js\"},\n\t\t{name:\"img0\",path:\"./images/img0.png\"},\n\t\t{name:\"img1\",path:\"./images/img1.png\"},\n\t\t{name:\"text01\",path:\"./files/text01.txt\",type:\"text\"},\n\t\t{name:\"text02\",path:\"./files/text02.txt\",type:\"text\"},\n\t\t{name:\"sound01\",path:\"./sounds/sound01.wav\",type:\"sound\"},\n\t\t{name:\"sound02\",path:\"./sounds/sound02.wav\",type:\"sound\"}\n\t];\n\tvar loadingLayer;\n\tvar datalist=[];\n\tfunction main(){\n\t\tloadingLayer = new LoadingSample1();\n\t\taddChild(loadingLayer);\n\t\tLLoadManage.load(\n\t\t\tloadData,\n\t\t\tfunction(progress){\n\t\t\t    loadingLayer.setProgress(progress);\n\t\t\t },\n\t\t\tgameInit\n\t\t);\n\t}\n\tfunction gameInit (result) {\n\t\tdatalist = result;\n\t\tremoveChild(loadingLayer);\n\t\tloadingLayer = null;\n\t\t//do something\n\t}"
            ],
            "access": "public",
            "tagname": "",
            "since": "1.4.0",
            "class": "LoadingSample"
        },
        {
            "file": "media/LMedia.js",
            "line": 15,
            "description": "LSound对象或LVideo对象的长度",
            "itemtype": "property",
            "name": "length",
            "type": "int",
            "since": "1.7.0",
            "access": "public",
            "tagname": "",
            "class": "LMedia"
        },
        {
            "file": "media/LMedia.js",
            "line": 25,
            "description": "LSound对象或LVideo对象是否正在播放",
            "itemtype": "property",
            "name": "playing",
            "type": "Boolean",
            "since": "1.7.0",
            "access": "public",
            "tagname": "",
            "class": "LMedia"
        },
        {
            "file": "media/LMedia.js",
            "line": 73,
            "description": "<p>启动从指定 URL 加载外部 多媒体 文件的过程。</p>\n<p>为了支持不同浏览器，可以像下面这样，同时传入多个多媒体类型文件。</p>\n<p>medio.load(\"medias/a.mp3,medias/a.wav,medias/a.ogg\");</p>",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "指向外部 多媒体 文件的 URL。",
                    "type": "String"
                }
            ],
            "since": "1.7.0",
            "access": "public",
            "tagname": "",
            "class": "LMedia"
        },
        {
            "file": "media/LMedia.js",
            "line": 118,
            "description": "<p>获取已经播放的时间。</p>",
            "itemtype": "method",
            "name": "getCurrentTime",
            "return": {
                "description": "已经播放的时间。",
                "type": "Int"
            },
            "since": "1.7.0",
            "access": "public",
            "tagname": "",
            "class": "LMedia"
        },
        {
            "file": "media/LMedia.js",
            "line": 128,
            "description": "<p>设定音量。</p>",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "value",
                    "description": "音量。",
                    "type": "Float"
                }
            ],
            "since": "1.7.0",
            "access": "public",
            "tagname": "",
            "class": "LMedia"
        },
        {
            "file": "media/LMedia.js",
            "line": 138,
            "description": "<p>获取音量。</p>",
            "itemtype": "method",
            "name": "getVolume",
            "return": {
                "description": "音量。",
                "type": "Float"
            },
            "since": "1.7.0",
            "access": "public",
            "tagname": "",
            "class": "LMedia"
        },
        {
            "file": "media/LMedia.js",
            "line": 148,
            "description": "<p>播放该多媒体对象。</p>",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "startTime",
                    "description": "应开始播放的初始位置（以毫秒为单位）。",
                    "type": "Float"
                },
                {
                    "name": "loops",
                    "description": "定义在声道停止播放之前，声音循环回 startTime 值的次数。",
                    "type": "Int"
                }
            ],
            "since": "1.7.0",
            "access": "public",
            "tagname": "",
            "class": "LMedia"
        },
        {
            "file": "media/LMedia.js",
            "line": 188,
            "description": "<p>播放指定长度的其中的一段音频。</p>",
            "itemtype": "method",
            "name": "playSegment",
            "params": [
                {
                    "name": "startTime",
                    "description": "应开始播放的初始位置（以秒为单位）。",
                    "type": "Float"
                },
                {
                    "name": "segment",
                    "description": "指定长度（以秒为单位）。",
                    "type": "Float"
                },
                {
                    "name": "loops",
                    "description": "定义在声道停止播放之前，声音循环回 startTime 值的次数。",
                    "type": "Int"
                }
            ],
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LMedia"
        },
        {
            "file": "media/LMedia.js",
            "line": 200,
            "description": "<p>播放指定区间内的一段音频。</p>",
            "itemtype": "method",
            "name": "playTo",
            "params": [
                {
                    "name": "startTime",
                    "description": "应开始播放的初始位置（以秒为单位）。",
                    "type": "Float"
                },
                {
                    "name": "endTime",
                    "description": "停止播放的位置（以秒为单位）。",
                    "type": "Float"
                },
                {
                    "name": "loops",
                    "description": "定义在声道停止播放之前，声音循环回 startTime 值的次数。",
                    "type": "Int"
                }
            ],
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LMedia"
        },
        {
            "file": "media/LMedia.js",
            "line": 212,
            "description": "<p>暂停当前播放的音频/视频。</p>",
            "itemtype": "method",
            "name": "stop",
            "since": "1.7.0",
            "access": "public",
            "tagname": "",
            "class": "LMedia"
        },
        {
            "file": "media/LMedia.js",
            "line": 230,
            "description": "<p>关闭当前播放的音频/视频。</p>",
            "itemtype": "method",
            "name": "close",
            "since": "1.7.0",
            "access": "public",
            "tagname": "",
            "class": "LMedia"
        },
        {
            "file": "media/LMedia.js",
            "line": 272,
            "description": "多媒体文件加载完成事件。\n<p><a href=\"LEvent.html#property_COMPLETE\">LEvent.COMPLETE</a></p>",
            "itemtype": "event",
            "name": "LEvent.COMPLETE",
            "since": "1.7.0",
            "class": "LMedia"
        },
        {
            "file": "media/LMedia.js",
            "line": 278,
            "description": "播放结束事件，一个音频文件播放完之后调度，如果是使用playSegment函数播放音频的一段，则播放完一段音频之后调度。",
            "itemtype": "event",
            "name": "LEvent.SOUND_COMPLETE",
            "since": "1.7.0",
            "access": "public",
            "tagname": "",
            "class": "LMedia"
        },
        {
            "file": "media/LMedia.js",
            "line": 284,
            "description": "多媒体文件加载异常事件。\n<p><a href=\"LEvent.html#property_ERROR\">LEvent.ERROR</a></p>",
            "itemtype": "event",
            "name": "LEvent.ERROR",
            "since": "1.10.1",
            "class": "LMedia"
        },
        {
            "file": "media/LSound.js",
            "line": 31,
            "description": "<p>当前浏览器是否支持Web Audio。</p>",
            "itemtype": "property",
            "name": "LSound.webAudioEnabled",
            "type": "Boolean",
            "static": 1,
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LSound(LMedia)"
        },
        {
            "file": "media/LSound.js",
            "line": 94,
            "description": "<p>当前浏览器是否支持Web Audio。</p>",
            "itemtype": "property",
            "name": "LSound.webAudioEnabled",
            "type": "Boolean",
            "static": 1,
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LSound(LWebAudio)"
        },
        {
            "file": "media/LStageWebView.js",
            "line": 34,
            "description": "<p>在指定的 URL 加载页面。</p>",
            "itemtype": "method",
            "name": "loadURL",
            "params": [
                {
                    "name": "url",
                    "description": "指向的 URL。",
                    "type": "String"
                }
            ],
            "since": "1.7.2",
            "access": "public",
            "tagname": "",
            "class": "LStageWebView"
        },
        {
            "file": "media/LStageWebView.js",
            "line": 48,
            "description": "<p>显示此LStageWebView对象。</p>",
            "itemtype": "method",
            "name": "show",
            "since": "1.7.2",
            "access": "public",
            "tagname": "",
            "class": "LStageWebView"
        },
        {
            "file": "media/LStageWebView.js",
            "line": 64,
            "description": "<p>隐藏此LStageWebView对象。</p>",
            "itemtype": "method",
            "name": "die",
            "since": "1.7.2",
            "access": "public",
            "tagname": "",
            "class": "LStageWebView"
        },
        {
            "file": "media/LStageWebView.js",
            "line": 77,
            "description": "<p>设定舞台上显示 LStageWebView 对象的区域。</p>",
            "itemtype": "method",
            "name": "setViewPort",
            "params": [
                {
                    "name": "viewPort",
                    "description": "舞台上显示 LStageWebView 对象的区域。",
                    "type": "LRectangle"
                }
            ],
            "since": "1.7.2",
            "access": "public",
            "tagname": "",
            "class": "LStageWebView"
        },
        {
            "file": "media/LStageWebView.js",
            "line": 97,
            "description": "网页加载完成事件。\n<p><a href=\"LEvent.html#property_COMPLETE\">LEvent.COMPLETE</a></p>",
            "itemtype": "event",
            "name": "LEvent.COMPLETE",
            "class": "LStageWebView"
        },
        {
            "file": "media/LWebAudio.js",
            "line": 18,
            "description": "LSound对象的长度",
            "itemtype": "property",
            "name": "length",
            "type": "int",
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LWebAudio"
        },
        {
            "file": "media/LWebAudio.js",
            "line": 30,
            "description": "LSound对象是否正在播放",
            "itemtype": "property",
            "name": "playing",
            "type": "Boolean",
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LWebAudio"
        },
        {
            "file": "media/LWebAudio.js",
            "line": 104,
            "description": "<p>启动从指定 URL 加载外部 音频 文件的过程。</p>\n<p>为了支持不同浏览器，可以像下面这样，同时传入多个多媒体类型文件。</p>\n<p>medio.load(\"medias/a.mp3,medias/a.wav,medias/a.ogg\");</p>",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "指向外部 音频 文件的 URL。(也可以直接使用AudioBuffer或者ArrayBuffer类型的数据)",
                    "type": "String"
                }
            ],
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LWebAudio"
        },
        {
            "file": "media/LWebAudio.js",
            "line": 168,
            "description": "<p>获取已经播放的时间。</p>",
            "itemtype": "method",
            "name": "getCurrentTime",
            "return": {
                "description": "已经播放的时间。",
                "type": "Int"
            },
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LWebAudio"
        },
        {
            "file": "media/LWebAudio.js",
            "line": 183,
            "description": "<p>设定音量。</p>",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "value",
                    "description": "音量。",
                    "type": "Float"
                }
            ],
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LWebAudio"
        },
        {
            "file": "media/LWebAudio.js",
            "line": 197,
            "description": "<p>获取音量。</p>",
            "itemtype": "method",
            "name": "getVolume",
            "return": {
                "description": "音量。",
                "type": "Float"
            },
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LWebAudio"
        },
        {
            "file": "media/LWebAudio.js",
            "line": 207,
            "description": "<p>播放该音频对象。</p>",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "startTime",
                    "description": "应开始播放的初始位置（以秒为单位）。",
                    "type": "Float"
                },
                {
                    "name": "loops",
                    "description": "定义在声道停止播放之前，声音循环回 startTime 值的次数。",
                    "type": "Int"
                }
            ],
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LWebAudio"
        },
        {
            "file": "media/LWebAudio.js",
            "line": 253,
            "description": "<p>播放指定长度的其中的一段音频。</p>",
            "itemtype": "method",
            "name": "playSegment",
            "params": [
                {
                    "name": "startTime",
                    "description": "应开始播放的初始位置（以秒为单位）。",
                    "type": "Float"
                },
                {
                    "name": "segment",
                    "description": "指定长度（以秒为单位）。",
                    "type": "Float"
                },
                {
                    "name": "loops",
                    "description": "定义在声道停止播放之前，声音循环回 startTime 值的次数。",
                    "type": "Int"
                }
            ],
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LWebAudio"
        },
        {
            "file": "media/LWebAudio.js",
            "line": 265,
            "description": "<p>播放指定区间内的一段音频。</p>",
            "itemtype": "method",
            "name": "playTo",
            "params": [
                {
                    "name": "startTime",
                    "description": "应开始播放的初始位置（以秒为单位）。",
                    "type": "Float"
                },
                {
                    "name": "endTime",
                    "description": "停止播放的位置（以秒为单位）。",
                    "type": "Float"
                },
                {
                    "name": "loops",
                    "description": "定义在声道停止播放之前，声音循环回 startTime 值的次数。",
                    "type": "Int"
                }
            ],
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LWebAudio"
        },
        {
            "file": "media/LWebAudio.js",
            "line": 277,
            "description": "<p>暂停当前播放的音频。</p>",
            "itemtype": "method",
            "name": "stop",
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LWebAudio"
        },
        {
            "file": "media/LWebAudio.js",
            "line": 301,
            "description": "<p>关闭当前播放的音频。</p>",
            "itemtype": "method",
            "name": "close",
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LWebAudio"
        },
        {
            "file": "media/LWebAudio.js",
            "line": 343,
            "description": "多媒体文件加载完成事件。\n<p><a href=\"LEvent.html#property_COMPLETE\">LEvent.COMPLETE</a></p>",
            "itemtype": "event",
            "name": "LEvent.COMPLETE",
            "since": "1.9.0",
            "class": "LWebAudio"
        },
        {
            "file": "media/LWebAudio.js",
            "line": 349,
            "description": "播放结束事件，一个音频文件播放完之后调度，如果是使用playSegment函数播放音频的一段，则播放完一段音频之后调度。",
            "itemtype": "event",
            "name": "LEvent.SOUND_COMPLETE",
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LWebAudio"
        },
        {
            "file": "media/LWebAudio.js",
            "line": 355,
            "description": "多媒体文件加载进度事件。\n<p><a href=\"LEvent.html#property_PROGRESS\">LEvent.PROGRESS</a></p>",
            "itemtype": "event",
            "name": "LEvent.PROGRESS",
            "since": "1.10.1",
            "class": "LWebAudio"
        },
        {
            "file": "media/LWebAudio.js",
            "line": 361,
            "description": "多媒体文件加载异常事件。\n<p><a href=\"LEvent.html#property_ERROR\">LEvent.ERROR</a></p>",
            "itemtype": "event",
            "name": "LEvent.ERROR",
            "since": "1.10.1",
            "class": "LWebAudio"
        },
        {
            "file": "net/LAjax.js",
            "line": 10,
            "description": "服务器响应的数据类型，支持LAjax.TEXT，LAjax.JSON，LAjax.ARRAY_BUFFER，LAjax.BLOB四种类型。",
            "itemtype": "property",
            "name": "LAjax.responseType",
            "type": "String",
            "since": "1.9.8",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLAjax.responseType = LAjax.JSON;\n\tLAjax.get(\"test.txt\",{},success);\n\tfunction success (data) {\n\t\ttrace(data.name);\n\t}"
            ],
            "class": "LAjax"
        },
        {
            "file": "net/LAjax.js",
            "line": 30,
            "description": "服务器响应的数据类型的一种，TEXT。",
            "itemtype": "property",
            "name": "LAjax.TEXT",
            "type": "String",
            "since": "1.9.8",
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "LAjax"
        },
        {
            "file": "net/LAjax.js",
            "line": 39,
            "description": "服务器响应的数据类型的一种，JSON。",
            "itemtype": "property",
            "name": "LAjax.JSON",
            "type": "String",
            "since": "1.9.8",
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "LAjax"
        },
        {
            "file": "net/LAjax.js",
            "line": 48,
            "description": "服务器响应的数据类型的一种，ARRAY_BUFFER。",
            "itemtype": "property",
            "name": "LAjax.ARRAY_BUFFER",
            "type": "String",
            "since": "1.9.8",
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "LAjax"
        },
        {
            "file": "net/LAjax.js",
            "line": 57,
            "description": "服务器响应的数据类型的一种，BLOB。",
            "itemtype": "property",
            "name": "LAjax.BLOB",
            "type": "String",
            "since": "1.9.8",
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "LAjax"
        },
        {
            "file": "net/LAjax.js",
            "line": 66,
            "description": "通过远程 HTTP GET 请求载入信息。",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "url",
                    "description": "必需。规定将请求发送的哪个 URL。",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "可选。规定连同请求发送到服务器的数据。",
                    "type": "Json Object"
                },
                {
                    "name": "oncomplete",
                    "description": "可选。规定当请求成功时运行的函数。",
                    "type": "Function"
                },
                {
                    "name": "onerror",
                    "description": "可选。规定当请求失败时运行的函数。",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\tLInit(1000/50,\"legend\",800,450,main);\n\tvar label;\n\tfunction main(){\n\t\tlabel = new LTextField();\n\t\taddChild(label);\n\t\tlabel.x = label.y = 50;\n\t\tlabel.text = \"LAjax.get ......\";\n\t\tLAjax.get(\"test.txt\",{},success);\n\t}\n\tfunction success (data) {\n\t\tlabel.text = data;\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LAjax/get.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.7.1",
            "class": "LAjax"
        },
        {
            "file": "net/LAjax.js",
            "line": 93,
            "description": "通过远程 HTTP POST 请求载入信息。",
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "url",
                    "description": "必需。规定将请求发送的哪个 URL。",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "可选。规定连同请求发送到服务器的数据。",
                    "type": "Json Object"
                },
                {
                    "name": "oncomplete",
                    "description": "可选。规定当请求成功时运行的函数。",
                    "type": "Function"
                },
                {
                    "name": "onerror",
                    "description": "可选。规定当请求失败时运行的函数。",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\tLInit(1000/50,\"legend\",800,450,main);\n\tvar label;\n\tfunction main(){\n\t\tlabel = new LTextField();\n\t\taddChild(label);\n\t\tlabel.x = label.y = 50;\n\t\tlabel.text = \"LAjax.post ......\";\n\t\tLAjax.post(\"test.txt\",{},success);\n\t}\n\tfunction success (data) {\n\t\tlabel.text = data;\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LAjax/post.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.7.1",
            "class": "LAjax"
        },
        {
            "file": "net/LFontLoader.js",
            "line": 54,
            "description": "Font文件加载完成事件。\n<p><a href=\"LEvent.html#property_COMPLETE\">LEvent.COMPLETE</a></p>",
            "itemtype": "event",
            "name": "LEvent.COMPLETE",
            "since": "1.10.0",
            "class": "LFontLoader"
        },
        {
            "file": "net/LFontLoader.js",
            "line": 60,
            "description": "Font文件加载异常事件。\n<p><a href=\"LEvent.html#property_ERROR\">LEvent.ERROR</a></p>",
            "itemtype": "event",
            "name": "LEvent.ERROR",
            "since": "1.10.1",
            "class": "LFontLoader"
        },
        {
            "file": "net/LURLLoader.js",
            "line": 20,
            "description": "从指定的 URL 发送和加载数据。",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "所请求的 URL。",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "读取文件种类，目前支持\"text\",\"js\"。",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tLInit(1000/50,\"legend\",800,450,main);\n\tvar loader;\n\tfunction main(){\n\t\tLGlobal.setDebug(true);\n\t\tloader = new LURLLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadTxt); \n\t\tloader.load(\"test.txt\", \"text\");\n\t}\n\tfunction loadTxt (event) {\n\t\ttrace(loader.objectIndex == event.currentTarget.objectIndex);//true\n\t\ttrace(event.currentTarget.data == event.target);//true\n\t\ttrace(\"event.target = \" + event.target);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LURLLoader/index.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.0.0",
            "class": "LURLLoader"
        },
        {
            "file": "net/LURLLoader.js",
            "line": 102,
            "description": "js文件或者文本文件加载完成事件。\n<p><a href=\"LEvent.html#property_COMPLETE\">LEvent.COMPLETE</a></p>",
            "itemtype": "event",
            "name": "LEvent.COMPLETE",
            "since": "1.0.0",
            "class": "LURLLoader"
        },
        {
            "file": "net/LURLLoader.js",
            "line": 108,
            "description": "js文件或者文本文件加载进度事件。\n<p><a href=\"LEvent.html#property_PROGRESS\">LEvent.PROGRESS</a></p>",
            "itemtype": "event",
            "name": "LEvent.PROGRESS",
            "since": "1.10.1",
            "class": "LURLLoader"
        },
        {
            "file": "net/LURLLoader.js",
            "line": 114,
            "description": "js文件或者文本文件加载异常事件。\n<p><a href=\"LEvent.html#property_ERROR\">LEvent.ERROR</a></p>",
            "itemtype": "event",
            "name": "LEvent.ERROR",
            "since": "1.10.1",
            "class": "LURLLoader"
        },
        {
            "file": "system/LLoadManage.js",
            "line": 16,
            "description": "从指定的 list 加载数据。",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "list",
                    "description": "指定的需要加载数据的数组。\n<p>list元素的格式如下</p>\n<table>\n<tr><th>文件类型</th><th>格式</th></tr>\n<tr><td>js文件</td><td>{path:\"./js/GameBody.js\",type:\"js\"}。1.9.1以上版本，type可以省略。</td></tr>\n<tr><td>图片文件</td><td>{name:\"testimg\",path:\"./images/testimg.png\"}。</td></tr>\n<tr><td>图片文件</td><td>{name:\"testimg\",path:\"./images/testimg.png\",useXHR:true}</td></tr>\n<tr><td>文本文件</td><td>{name:\"testfile\",path:\"./files/testfile.txt\",type:\"text\"}。1.9.1以上版本，扩展名为\"txt\"的时候,type可以省略。</td></tr>\n<tr><td>音频文件（需要服务器支持）</td><td>{name:\"testSound\",path:\"./sounds/testsound.wav\",type:\"sound\"}。1.9.1以上版本，音频文件扩展名为\"mp3\", \"ogg\", \"wav\", \"m4a\"的时候，type可以省略。</td></tr>\n</table>",
                    "type": "Array"
                }
            ],
            "example": [
                "\n\tvar loadData = [\n\t\t{path:\"./js/jsfile01.js\",type:\"js\"},\n\t\t{path:\"./js/jsfile02.js\",type:\"js\"},\n\t\t{name:\"img0\",path:\"./images/img0.png\"},\n\t\t{name:\"img1\",path:\"./images/img1.png\"},\n\t\t{name:\"myFont\",path:\"NotoSans.eot,NotoSans.ttf\",type:\"font\"},\n\t\t{name:\"text01\",path:\"./files/text01.txt\",type:\"text\"},\n\t\t{name:\"text02\",path:\"./files/text02.txt\",type:\"text\"},\n\t\t{name:\"sound01\",path:\"./sounds/sound01.wav\",type:\"sound\"},\n\t\t{name:\"sound02\",path:\"./sounds/sound02.wav\",type:\"sound\"}\n\t];\n\tvar loadingLayer; \n\tvar datalist=[]; \n\tfunction main(){\n\t\tloadingLayer = new LoadingSample4(); \n\t\taddChild(loadingLayer); \n\t\tvar loadManage = new LLoadManage();\n\t\tloadManage.addEventListener(LEvent.PROGRESS, progressFunc);\n\t\tloadManage.addEventListener(LEvent.ERROR, errorFunc);\n\t\tloadManage.addEventListener(LEvent.COMPLETE, completeFunc);\n\t\tloadManage.load(loadData);\n\t}\n\tfunction completeFunc (event) {\n\t\tdatalist = event.target; \n\t\tremoveChild(loadingLayer); \n\t\tloadingLayer = null; \n\t\t//do something\n\t\tvar bitmapData = new LBitmapData(datalist[\"img0\"]);\n\t\tvar txt = datalist[\"text01\"];\n\t\tvar sound = new LSound();\n\t\tsound.load(datalist[\"sound01\"]);\n\t\tsound.play();\n\t}\n\tfunction progressFunc (event) {\n\t\tvar progress = (event.loaded * 100 / event.total).toFixed(2);\n\t\tloadingLayer.setProgress(progress); \n\t}\n\tfunction errorFunc (event) {\n\t\ttrace(\"error url:\" + event.responseURL);\n\t}"
            ],
            "access": "public",
            "tagname": "",
            "since": "1.4.0",
            "examplelink": "<p><a href=\"../../../api/LLoadManage/load.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LLoadManage"
        },
        {
            "file": "system/LLoadManage.js",
            "line": 219,
            "description": "从指定的 list 加载数据。",
            "itemtype": "method",
            "name": "LLoadManage.load",
            "params": [
                {
                    "name": "list",
                    "description": "指定的需要加载数据的数组。\n<p>list元素的格式如下</p>\n<table>\n<tr><th>文件类型</th><th>格式</th></tr>\n<tr><td>js文件</td><td>{path:\"./js/GameBody.js\",type:\"js\"}。1.9.1以上版本，type可以省略。</td></tr>\n<tr><td>图片文件</td><td>{name:\"testimg\",path:\"./images/testimg.png\"}。</td></tr>\n<tr><td>图片文件</td><td>{name:\"testimg\",path:\"./images/testimg.png\",useXHR:true}</td></tr>\n<tr><td>文本文件</td><td>{name:\"testfile\",path:\"./files/testfile.txt\",type:\"text\"}。1.9.1以上版本，扩展名为\"txt\"的时候,type可以省略。</td></tr>\n<tr><td>音频文件（需要服务器支持）</td><td>{name:\"testSound\",path:\"./sounds/testsound.wav\",type:\"sound\"}。1.9.1以上版本，音频文件扩展名为\"mp3\", \"ogg\", \"wav\", \"m4a\"的时候，type可以省略。</td></tr>\n</table>",
                    "type": "Array"
                },
                {
                    "name": "onUpdate",
                    "description": "加载过程中调用的函数，一般用来显示游戏进度。",
                    "type": "Function"
                },
                {
                    "name": "onComplete",
                    "description": "list中全部文件加载完成时调用此函数",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\tvar loadData = [\n\t\t{path:\"./js/jsfile01.js\",type:\"js\"},\n\t\t{path:\"./js/jsfile02.js\",type:\"js\"},\n\t\t{name:\"img0\",path:\"./images/img0.png\"},\n\t\t{name:\"img1\",path:\"./images/img1.png\"},\n\t\t{name:\"myFont\",path:\"NotoSans.eot,NotoSans.ttf\",type:\"font\"},\n\t\t{name:\"text01\",path:\"./files/text01.txt\",type:\"text\"},\n\t\t{name:\"text02\",path:\"./files/text02.txt\",type:\"text\"},\n\t\t{name:\"sound01\",path:\"./sounds/sound01.wav\",type:\"sound\"},\n\t\t{name:\"sound02\",path:\"./sounds/sound02.wav\",type:\"sound\"}\n\t];\n\tvar loadingLayer; \n\tvar datalist=[]; \n\tfunction main(){\n\t\tloadingLayer = new LoadingSample1(); \n\t\taddChild(loadingLayer); \n\t\tLLoadManage.load( \n\t\t\tloadData, \n\t\t\tfunction(progress){ \n\t\t\t    loadingLayer.setProgress(progress); \n\t\t\t }, \n\t\t\tgameInit\n\t\t);\n\t}\n\tfunction gameInit (result) {\n\t\tdatalist = result; \n\t\tremoveChild(loadingLayer); \n\t\tloadingLayer = null; \n\t\t//do something\n\t\tvar bitmapData = new LBitmapData(datalist[\"img0\"]);\n\t\tvar txt = datalist[\"text01\"];\n\t\tvar sound = new LSound();\n\t\tsound.load(datalist[\"sound01\"]);\n\t\tsound.play();\n\t}"
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "since": "1.4.0",
            "examplelink": "<p><a href=\"../../../api/LLoadManage/index.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LLoadManage"
        },
        {
            "file": "text/LStyleSheet.js",
            "line": 44,
            "description": "将具有指定名称的新样式添加到样式表对象中。如果该样式表中没有指定名称的样式，将添加该样式。如果该样式表中已经有指定名称的样式，将替换该样式。如果 styleObject 参数为 null，则删除指定名称的样式。",
            "params": [
                {
                    "name": "styleName",
                    "description": "一个字符串，用于指定要添加到样式表中的样式的名称。",
                    "type": "String"
                },
                {
                    "name": "styleObject",
                    "description": "一个说明样式的对象，或 null。",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setStyle",
            "since": "1.9.8",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar styleSheet = new LStyleSheet();\n\tstyleSheet.setStyle(\".test\",\"{color:#FF0000;font-size:40}\");\n\tstyleSheet.setStyle(\"myText\",\"{color:#008800;font-size:30}\");\n\tvar theTextField = new LTextField();\n\ttheTextField.htmlText = \"ABC<span class='test'>ABC<myText><i>ABC</i>ABC</myText>ABC</span>ABC<b>ABC</b><u>ABC</u>\";\n\ttheTextField.x = 10;\n\ttheTextField.y = 100;\n\ttheTextField.styleSheet = styleSheet;\n\taddChild(theTextField);"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/styleSheet.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LStyleSheet"
        },
        {
            "file": "text/LStyleSheet.js",
            "line": 85,
            "description": "返回与名为 styleName 的样式相关联的样式对象的一个副本。如果没有与 styleName 相关联的样式对象，则返回 null。",
            "params": [
                {
                    "name": "styleName",
                    "description": "一个字符串，该字符串指定要检索的样式的名称。",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "getStyle",
            "return": {
                "description": "一个对象。",
                "type": "Object"
            },
            "since": "1.9.8",
            "access": "public",
            "tagname": "",
            "class": "LStyleSheet"
        },
        {
            "file": "text/LTextField.js",
            "line": 21,
            "description": "对象的类型",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "LTextField",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 31,
            "description": "作为文本字段中当前文本的字符串。各行之间用回车符（'\\n'）分隔。",
            "itemtype": "property",
            "name": "text",
            "type": "String",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 39,
            "description": "包含文本字段内容的 HTML 表示形式。\n目前支持以下 HTML 标签：\n<table>\n<tr><th>标签</th><th>说明</th></tr>\n<tr><td>粗体标签</td><td>&lt;b> 标签以粗体形式呈现文本。粗体必须可用于所使用的字体。</td></tr>\n<tr><td>字体标签</td><td>&lt;font> 标签指定一种字体或一个字体列表来显示文本。字体标签支持以下属性：\n <p>・color：字体的颜色。</p>\n <p>・face：指定要使用的字体的名称。</p>\n <p>・size：指定字体的大小。</p>\n\t</td></tr>\n<tr><td>斜体标签</td><td>&lt;i> 标签以斜体形式显示标签中的文本。斜体必须可用于所使用的字体。</td></tr>\n<tr><td>段落标签</td><td>&lt;p> 标签创建一个新段落。必须将文本字段设置为多行文本字段才能使用此标签。</td></tr>\n<tr><td>span 标签</td><td>&lt;span> 标签只可用于 CSS 文本样式。它支持以下属性：<p>・class：指定 LStyleSheet 对象定义的 CSS 样式类。</p></td></tr>\n<tr><td>下划线标签</td><td>&lt;u> 标签为标签文本添加下划线。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "htmlText",
            "type": "String",
            "since": "1.9.8",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar theTextField = new LTextField();\n\ttheTextField.setWordWrap(true,30);\n\ttheTextField.htmlText = \"ABC<font face='Book Antiqua' color=\\\"#FF0000\\\" size='20'>A<p>B</p>C<font color='#008800' size='24'><i>ABC</i><font size='15'>ABC</font></font>ABC</font>ABC<b>ABC</b><u>ABC</u>\";\n\ttheTextField.x = 10;\n\ttheTextField.y = 100;\n\ttheTextField.textBaseline = \"alphabetic\";\n\taddChild(theTextField);"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/htmlText.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 70,
            "description": "将样式表附加到文本字段。有关创建样式表的信息，请参阅 <a href=\"LStyleSheet.html\">LStyleSheet</a> 类",
            "itemtype": "property",
            "name": "styleSheet",
            "type": "LStyleSheet",
            "since": "1.9.8",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar styleSheet = new LStyleSheet();\n\tstyleSheet.setStyle(\".test\",\"{color:#FF0000;font-size:40}\");\n\tstyleSheet.setStyle(\"myText\",\"{color:#008800;font-size:30}\");\n\tvar theTextField = new LTextField();\n\ttheTextField.htmlText = \"ABC<span class='test'>ABC<myText><i>ABC</i>ABC</myText>ABC</span>ABC<b>ABC</b><u>ABC</u>\";\n\ttheTextField.x = 10;\n\ttheTextField.y = 100;\n\ttheTextField.styleSheet = styleSheet;\n\taddChild(theTextField);"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/styleSheet.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 89,
            "description": "使用此文本格式的文本的字体名称，以字符串形式表示。",
            "itemtype": "property",
            "name": "font",
            "type": "String",
            "since": "1.0.0",
            "default": "Arial",
            "example": [
                "\n\tvar theTextField = new LTextField();\n\ttheTextField.text = \"font test\";\n\ttheTextField.x = 10;\n\ttheTextField.y = 10;\n\ttheTextField.font = \"Georgia\";\n\taddChild(theTextField);"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/font.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 106,
            "description": "使用此文本格式的文本的大小（以像素为单位）。",
            "itemtype": "property",
            "name": "size",
            "type": "int",
            "since": "1.0.0",
            "default": "11",
            "example": [
                "\n\tvar theTextField = new LTextField();\n\ttheTextField.text = \"size test\";\n\ttheTextField.x = 10;\n\ttheTextField.y = 10;\n\ttheTextField.size = 20;\n\taddChild(theTextField);"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/size.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 123,
            "description": "表示文本的颜色。",
            "itemtype": "property",
            "name": "color",
            "type": "String",
            "since": "1.0.0",
            "default": "\"#000000\"",
            "example": [
                "\n\tvar theTextField = new LTextField();\n\ttheTextField.text = \"color test\";\n\ttheTextField.x = 10;\n\ttheTextField.y = 10;\n\ttheTextField.color = \"#FF0000\";\n\taddChild(theTextField);"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/color.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 140,
            "description": "规定字体的粗细。",
            "itemtype": "property",
            "name": "weight",
            "type": "String",
            "since": "1.0.0",
            "default": "normal",
            "example": [
                "\n\tvar theTextField = new LTextField();\n\ttheTextField.text = \"weight test\";\n\ttheTextField.x = 10;\n\ttheTextField.y = 10;\n\ttheTextField.weight = \"bolder\";\n\taddChild(theTextField);"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/weight.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 157,
            "description": "表示段落的对齐方式(水平)。",
            "itemtype": "property",
            "name": "textAlign",
            "type": "String",
            "since": "1.0.0",
            "default": "left",
            "access": "public",
            "tagname": "",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 166,
            "description": "表示段落的对齐方式(竖直)。",
            "itemtype": "property",
            "name": "textBaseline",
            "type": "String",
            "since": "1.0.0",
            "default": "top",
            "access": "public",
            "tagname": "",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 175,
            "description": "<p>获取文字高度的时候，是否以［gjpqy］为标准。</p>\n<p>可以设定的值有下面两种：</p>\n<p>LTextField.HEIGHT_MODE_BOTTOM：获取文字高度时，不考虑［gjpqy］的下半部。</p>\n<p>LTextField.HEIGHT_MODE_BASELINE：获取文字高度时，考虑［gjpqy］的下半部。</p>\n<p>也就是说使用LTextField.HEIGHT_MODE_BASELINE获取高度，比LTextField.HEIGHT_MODE_BOTTOM要略大。</p>\n<p>注意：HTML5中没有直接获取文字高度的方法，所以这两种方式无论使用哪一种获取的高度都无法绝对准确。</p>",
            "itemtype": "property",
            "name": "heightMode",
            "type": "float",
            "since": "1.9.1",
            "default": "LTextField.HEIGHT_MODE_BOTTOM",
            "access": "public",
            "tagname": "",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 189,
            "description": "文字描边效果。",
            "itemtype": "property",
            "name": "stroke",
            "type": "String",
            "since": "1.0.0",
            "default": "false",
            "example": [
                "\n\tvar theTextField = new LTextField();\n\ttheTextField.text = \"stroke test\";\n\ttheTextField.size = 50;\n\ttheTextField.stroke = true;\n\ttheTextField.lineWidth = 2;\n\ttheTextField.lineColor = \"#FF0000\";\n\taddChild(theTextField);"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/stroke.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 207,
            "description": "文字描边效果的线宽。",
            "itemtype": "property",
            "name": "lineWidth",
            "type": "int",
            "since": "1.0.0",
            "default": "1",
            "access": "public",
            "tagname": "",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 216,
            "description": "文字描边效果的线的颜色。",
            "itemtype": "property",
            "name": "lineColor",
            "type": "String",
            "since": "1.0.0",
            "default": "\"#000000\"",
            "access": "public",
            "tagname": "",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 225,
            "description": "当设置换行有效(setWordWrap(true))的时候，可以通过它来设置文字宽度。",
            "itemtype": "property",
            "name": "width",
            "type": "int",
            "since": "1.0.0",
            "default": "150",
            "access": "public",
            "tagname": "",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 235,
            "description": "指定文本字段是否是密码文本字段。如果此属性的值为 true，则文本字段被视为密码文本字段，并使用星号而不是实际字符来隐藏输入的字符。如果为 false，则不会将文本字段视为密码文本字段。",
            "itemtype": "property",
            "name": "displayAsPassword",
            "type": "Boolean",
            "since": "1.0.0",
            "default": "false",
            "example": [
                "\n\tvar theTextField = new LTextField();\n\ttheTextField.setType(LTextFieldType.INPUT);\n\ttheTextField.x = 10;\n\ttheTextField.y = 10;\n\ttheTextField.displayAsPassword = true;\n\taddChild(theTextField);"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/displayAsPassword.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 254,
            "description": "[只读]定义多行文本字段中的文本行数。如果 setWordWrap(true)，则在文本自动换行时会增加行数。",
            "itemtype": "property",
            "name": "numLines",
            "type": "int",
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 262,
            "description": "文本逐字显示的速度",
            "itemtype": "property",
            "name": "speed",
            "type": "int",
            "default": "0",
            "since": "1.0.0",
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tvar theTextField = new LTextField();\n\t\ttheTextField.text = \"wait click\";\n\t\ttheTextField.x = 10;\n\t\ttheTextField.y = 10;\n\t\ttheTextField.size = 20;\n\t\taddChild(theTextField);\n\t\tvar button = new LButtonSample1(\"wind test start\");\n\t\tbutton.textField = theTextField;\n\t\tbutton.x = 10;\n\t\tbutton.y = 100;\n\t\taddChild(button);\n\t\tbutton.addEventListener(LMouseEvent.MOUSE_DOWN, onclick);\n\t}\n\tfunction windOver(event){\n\t\tvar theTextField = event.target;\n\t\ttheTextField.removeEventListener(LTextEvent.WIND_COMPLETE, windOver);\n\t\ttheTextField.text = \"wind over\";\n\t}\n\tfunction onclick(event){\n\tvar theTextField = event.currentTarget.textField;\n\t\tif (theTextField.hasEventListener(LTextEvent.WIND_COMPLETE)) {\n\t\t\ttheTextField.removeEventListener(LTextEvent.WIND_COMPLETE, windOver);\n\t\t}\n\t\ttheTextField.text = \"TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT\";\n\t\ttheTextField.speed = 3;\n\t\ttheTextField.wind();\n\t\ttheTextField.addEventListener(LTextEvent.WIND_COMPLETE, windOver);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/wind.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 522,
            "description": "设置字段是否为多行文本字段。如果值为 true，则文本字段为多行文本字段；如果值为 false，则文本字段为单行文本字段。在类型为 LTextFieldType.INPUT 的字段中，将确定 Enter 键是否创建新行（如果值为 false，则将忽略 Enter 键）。",
            "itemtype": "method",
            "name": "setMultiline",
            "params": [
                {
                    "name": "value",
                    "description": "表示字段是否为多行文本字段.",
                    "type": "Boolean"
                },
                {
                    "name": "height",
                    "description": "指定一行文本的高度.",
                    "type": "Int"
                }
            ],
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar inputLayer = new LSprite();\n\tinputLayer.graphics.drawRect(1,\"#000000\",[0, 0, 400, 150]);\n\tvar theTextField = new LTextField();\n\ttheTextField.setType(LTextFieldType.INPUT,inputLayer);\n\ttheTextField.setMultiline(true);\n\taddChild(theTextField);"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/setMultiline.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 545,
            "description": "表示文本字段是否自动换行。如果设置的值为 true，则该文本字段自动换行；如果值为 false，则该文本字段不自动换行。默认值为 false。",
            "itemtype": "method",
            "name": "setWordWrap",
            "params": [
                {
                    "name": "value",
                    "description": "表示文本字段是否自动换行.",
                    "type": "Boolean"
                },
                {
                    "name": "height",
                    "description": "指定一行文本的高度.",
                    "type": "Int"
                }
            ],
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar theTextField = new LTextField();\n\ttheTextField.setWordWrap(true);\n\ttheTextField.width = 200;\n\ttheTextField.text = \"text\\ntext\\ntexttexttexttexttexttexttexttexttexttexttexttexttexttext\";\n\taddChild(theTextField);"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/setWordWrap.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 567,
            "description": "文本字段的类型。以下 LTextFieldType 常量中的任一个：LTextFieldType.DYNAMIC（指定用户无法编辑的动态文本字段），或 LTextFieldType.INPUT（指定用户可以编辑的输入文本字段）。默认值为 dynamic。",
            "itemtype": "method",
            "name": "setType",
            "params": [
                {
                    "name": "type",
                    "description": "文本字段的类型。",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "文本框形状.",
                    "type": "LSprite"
                }
            ],
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar inputLayer = new LSprite();\n\tinputLayer.graphics.drawRect(1,\"#000000\",[0, 0, 400, 30]);\n\tvar theTextField = new LTextField();\n\ttheTextField.setType(LTextFieldType.INPUT,inputLayer);\n\taddChild(theTextField);"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/setType.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 625,
            "description": "返回一个LTextField的克隆对象。",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "一个新的 LTextField 对象，它与原始对象相同.",
                "type": "LTextField"
            },
            "since": "1.8.2",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar theTextField = new LTextField();\n\ttheTextField.text = \"font test\";\n\taddChild(theTextField);\n\tvar theTextField2 = theTextField.clone();\n\ttheTextField2.y = 50;\n\taddChild(theTextField2);"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/clone.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 669,
            "description": "当LTextField对象设置为输入框的时候，将LTextField对象的text值反映到输入框中。",
            "itemtype": "method",
            "name": "updateInput",
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar theTextField = new LTextField();\n\ttheTextField.x = 20;\n\ttheTextField.y = 20;\n\ttheTextField.text = \"Click Enter Key to clear the text!\";\n\taddChild(theTextField);\n\tvar theTextField1 = new LTextField();\n\ttheTextField1.text = \"test\";\n\ttheTextField1.x = 20;\n\ttheTextField1.y = 100;\n\ttheTextField1.setType(LTextFieldType.INPUT);\n\taddChild(theTextField1);\n\ttheTextField1.addEventListener(LTextEvent.TEXT_INPUT, function (e) {\n\t\tif(e.keyCode == 13){\n\t\t\te.currentTarget.text = \"\";\n\t\t\te.currentTarget.updateInput();\n\t\t\te.preventDefault();\n\t\t}\n\t});\n\tsetTimeout(function () {\n\t\ttheTextField1.focus();\n\t}, 200);"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/updateInput.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 714,
            "description": "获取焦点。",
            "itemtype": "method",
            "name": "focus",
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar theTextField = new LTextField();\n\ttheTextField.x = 20;\n\ttheTextField.y = 20;\n\ttheTextField.text = \"Click the Enter Key, please!\";\n\taddChild(theTextField);\n\tvar theTextField1 = new LTextField();\n\ttheTextField1.x = 20;\n\ttheTextField1.y = 100;\n\ttheTextField1.setType(LTextFieldType.INPUT);\n\taddChild(theTextField1);\n\ttheTextField1.addEventListener(LTextEvent.TEXT_INPUT, function (e) {\n\t\tif(e.keyCode == 13){\n\t\t\ttheTextField2.focus();\n\t\t}\n\t});\n\tvar theTextField2 = new LTextField();\n\ttheTextField2.x = 20;\n\ttheTextField2.y = 140;\n\ttheTextField2.setType(LTextFieldType.INPUT);\n\taddChild(theTextField2);\n\ttheTextField2.addEventListener(LTextEvent.TEXT_INPUT, function (e) {\n\t\tif(e.keyCode == 13){\n\t\t\ttheTextField1.focus();\n\t\t}\n\t});\n\tsetTimeout(function () {\n\t\ttheTextField1.focus();\n\t}, 200);"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/focus.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 805,
            "description": "获取显示对象的宽度，以像素为单位。",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "显示对象的宽度。",
                "type": "Float"
            },
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar theTextField = new LTextField();\n\ttheTextField.text = \"getWidth test\";\n\taddChild(theTextField);\n\ttrace(theTextField.getWidth());"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/getWidth.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 866,
            "description": "获取显示对象的高度，以像素为单位。",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "显示对象的高度。",
                "type": "Float"
            },
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tvar theTextField = new LTextField();\n\ttheTextField.text = \"getHeight test\";\n\taddChild(theTextField);\n\ttrace(theTextField.getHeight());"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/getHeight.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 896,
            "description": "文本逐字显示（打字机效果）。",
            "itemtype": "method",
            "name": "wind",
            "since": "1.3.0",
            "access": "public",
            "tagname": "",
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tvar theTextField = new LTextField();\n\t\ttheTextField.text = \"wait click\";\n\t\ttheTextField.x = 10;\n\t\ttheTextField.y = 10;\n\t\ttheTextField.size = 20;\n\t\taddChild(theTextField);\n\t\tvar button = new LButtonSample1(\"wind test start\");\n\t\tbutton.textField = theTextField;\n\t\tbutton.x = 10;\n\t\tbutton.y = 100;\n\t\taddChild(button);\n\t\tbutton.addEventListener(LMouseEvent.MOUSE_DOWN, onclick);\n\t}\n\tfunction windOver(event){\n\t\tvar theTextField = event.target;\n\t\ttheTextField.removeEventListener(LTextEvent.WIND_COMPLETE, windOver);\n\t\ttheTextField.text = \"wind over\";\n\t}\n\tfunction onclick(event){\n\tvar theTextField = event.currentTarget.textField;\n\t\tif (theTextField.hasEventListener(LTextEvent.WIND_COMPLETE)) {\n\t\t\ttheTextField.removeEventListener(LTextEvent.WIND_COMPLETE, windOver);\n\t\t}\n\t\ttheTextField.text = \"TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT\";\n\t\ttheTextField.speed = 3;\n\t\ttheTextField.wind();\n\t\ttheTextField.addEventListener(LTextEvent.WIND_COMPLETE, windOver);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LTextField/wind.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 959,
            "description": "<p>清空所使用的内存。</p>",
            "itemtype": "method",
            "name": "die",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 974,
            "description": "LTextField对象获得焦点后调度。\n<p><a href=\"LFocusEvent.html#property_FOCUS_IN\">LFocusEvent.FOCUS_IN</a></p>",
            "itemtype": "event",
            "name": "LFocusEvent.FOCUS_IN",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 979,
            "description": "LTextField对象失去焦点后调度。\n<p><a href=\"LFocusEvent.html#property_FOCUS_OUT\">LFocusEvent.FOCUS_OUT</a></p>",
            "itemtype": "event",
            "name": "LFocusEvent.FOCUS_OUT",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 984,
            "description": "不可用。",
            "itemtype": "event",
            "name": "LMouseEvent.MOUSE_DOWN",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 988,
            "description": "不可用。",
            "itemtype": "event",
            "name": "LMouseEvent.MOUSE_UP",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 992,
            "description": "不可用。",
            "itemtype": "event",
            "name": "LMouseEvent.MOUSE_MOVE",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 996,
            "description": "不可用。",
            "itemtype": "event",
            "name": "LMouseEvent.MOUSE_OUT",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 1000,
            "description": "不可用。",
            "itemtype": "event",
            "name": "LMouseEvent.MOUSE_OVER",
            "class": "LTextField"
        },
        {
            "file": "text/LTextField.js",
            "line": 1004,
            "description": "不可用。",
            "itemtype": "event",
            "name": "LMouseEvent.DOUBLE_CLICK",
            "class": "LTextField"
        },
        {
            "file": "transitions/LTweenLite.js",
            "line": 85,
            "description": "将动画暂停。",
            "itemtype": "method",
            "name": "pause",
            "example": [
                "\n\tvar tween = LTweenLite.to(rect,1,{x:500,loop:true,ease:LEasing.Sine.easeInOut,tweenTimeline:LTweenLite.TYPE_FRAME})\n\t.to(rect,1,{x:50,ease:LEasing.Quad.easeInOut});\n\ttween.pause();"
            ],
            "examplelink": "<p><a href=\"../../../api/LTweenLite/pause_resume.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.9.1",
            "class": "LTweenLiteChild"
        },
        {
            "file": "transitions/LTweenLite.js",
            "line": 99,
            "description": "将暂停的动画重新播放。",
            "itemtype": "method",
            "name": "resume",
            "example": [
                "\n\tvar tween = LTweenLite.to(rect,1,{x:500,loop:true,ease:LEasing.Sine.easeInOut,tweenTimeline:LTweenLite.TYPE_FRAME})\n\t.to(rect,1,{x:50,ease:LEasing.Quad.easeInOut});\n\ttween.pause();\n\ttween.resume();"
            ],
            "examplelink": "<p><a href=\"../../../api/LTweenLite/pause_resume.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.9.1",
            "class": "LTweenLiteChild"
        },
        {
            "file": "transitions/LTweenLite.js",
            "line": 249,
            "description": "<p>缓动动画循环的类型</p>\n<table>\n<tr><th>属性</th><th>说明</th></tr>\n<tr><td>LTweenLite.PlayStyle.None</td><td>无效果</td></tr>\n<tr><td>LTweenLite.PlayStyle.Init</td><td>每次缓动都从第一次缓动开始时的值开始进行。</td></tr>\n</table>",
            "itemtype": "property",
            "name": "LTweenLite.PlayStyle",
            "type": "Object",
            "static": 1,
            "since": "1.10.0",
            "access": "public",
            "tagname": "",
            "examplelink": "<p><a href=\"../../../api/LTweenLite/playStyle.html\" target=\"_blank\">测试链接</a></p>",
            "class": "LTweenLite"
        },
        {
            "file": "transitions/LTweenLite.js",
            "line": 288,
            "description": "［静态方法］用于创建一个LTweenLiteChild实例动画，让某对象的某些属性缓动到指定的目标的值（从当前值）。",
            "itemtype": "method",
            "name": "LTweenLite.to",
            "static": 1,
            "params": [
                {
                    "name": "target",
                    "description": "要缓动的对象(这里注意类型是Object,并不仅仅是LSprite,LBitmap).",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "持续的时间(单位是秒)",
                    "type": "Float"
                },
                {
                    "name": "vars",
                    "description": "<p>一个Object,包含你想要缓动的所有属性，比如 onComplete, ease, etc。举例, 将一个 对象mc.x 缓动到 100 ，将 mc.y 缓动到 200 ，缓动结束后执行一个函数 myFunction, 这时候，你可以这么写: TweenLite.to(mc, 1, {x:100, y:200, onComplete:myFunction});</p>\n<p>除了使用对象的属性之外，你也可以使用一些特殊的值:</p>\n<table>\n<tr><th>属性</th><th>类型</th><th>说明</th></tr>\n<tr><td>tweenTimeline</td><td>float</td><td><p>动画播放的类型，默认值为LTweenLite.TYPE_FRAME。</p><p>LTweenLite.TYPE_FRAME:用桢来播放动画。</p><p>LTweenLite.TYPE_TIMER：用时间来播放动画。</p><p>为了测试两者的区别，接下来的demo在进行缓动时首先延迟2秒钟，使用LTweenLite.TYPE_FRAME播放是无间断，而使用LTweenLite.TYPE_TIMER播放则会直接跳到结束。<a href=\"../../../api/LTweenLite/to2.html\" target=\"_blank\">测试链接</a></p></td></tr>\n<tr><td>delay</td><td>float</td><td>延时几秒后开始缓动，这在有先后顺序的缓动效果中很有用</td></tr>\n<tr><td>ease</td><td>LEasing (or Function)</td><td>应用在variables上的缓动函数，比如LEasing.Quad.easeIn or LEasing.Cubic.easeOut。默认值是LEasing.None.easeIn.</td></tr>\n<tr><td>onComplete</td><td>Function</td><td>在缓动效果结束时触发此方法。回调函数是有参数的，使用方法同下面的例子。</td></tr>\n<tr><td>onStart</td><td>Function</td><td>在缓动开始时触发此方法.回调函数是有参数的，使用方法同下面的例子。</td></tr>\n<tr><td>onUpdate</td><td>Function</td><td>当属性值发生改变时(缓动进行中的每一帧，每一秒)触发此方法。回调函数是有参数的，使用方法同下面的例子。</td></tr>\n<tr><td>loop</td><td>Boolean</td><td>如果设定为 true, 缓动就会持续循环.</td></tr>\n<tr><td>playStyle</td><td>LTweenLite.PlayStyle</td><td>只有设定loop为true, playStyle才会有效。<a href=\"../../../api/LTweenLite/playStyle.html\" target=\"_blank\">测试链接</a></td></tr>\n<tr><td>coordinate</td><td>Array</td><td>你可以自定义缓动路径，路径的每个点必须是LPoint对象,或者类似于{x:1,y:2}的形式，<a href=\"../../../api/LTweenLite/toList.html\" target=\"_blank\">测试链接</a></td></tr>\n</table>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "一个LTweenLiteChild的实例",
                "type": "LTweenLiteChild"
            },
            "example": [
                "\n\tLInit(1000/50,\"legend\",800,450,main);\n\tfunction main(){\n\t\tLGlobal.setDebug(true);\n\t\tvar circle = new LSprite();\n\t\tcircle.x = 50;\n\t\tcircle.y = 50;\n\t\tcircle.graphics.drawArc(\"#FF0000\",1,[0,0,20,0,Math.PI*2],true,\"#FF0000\");\n\t\taddChild(circle);\n\t\tvar rect = new LSprite();\n\t\trect.x = 50;\n\t\trect.y = 100;\n\t\trect.graphics.drawRect(\"#FF00FF\",1,[0,0,20,20],true,\"#FF00FF\");\n\t\taddChild(rect);\n\t\tLTweenLite.to(circle,2,{x:500,y:400,scaleX:3,scaleY:3,ease:LEasing.Strong.easeInOut})\n\t\t.to(circle,2,{x:700,y:50,scaleX:1,scaleY:1,ease:LEasing.Quint.easeIn,onComplete:function(e){\n\t\t\ttrace(e.currentTarget);\n\t\t\ttrace(e.target);//circle\n\t\t}});\n\t\tLTweenLite.to(rect,1,{x:500,loop:true,ease:LEasing.Sine.easeInOut})\n\t\t.to(rect,1,{x:50,ease:LEasing.Quad.easeInOut});\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LTweenLite/to.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.4.0",
            "class": "LTweenLite"
        },
        {
            "file": "transitions/LTweenLite.js",
            "line": 348,
            "description": "［静态方法］停止当前的缓动动画。",
            "itemtype": "method",
            "name": "LTweenLite.remove",
            "static": 1,
            "params": [
                {
                    "name": "tween",
                    "description": "当前正在进行缓动的对象.",
                    "type": "LTweenLiteChild"
                }
            ],
            "example": [
                "\n\tLInit(1000/50,\"legend\",800,450,main);\n\tvar tween;\n\tfunction main(){\n\t\tLGlobal.setDebug(true);\n\t\tvar rect = new LSprite();\n\t\trect.x = 50;\n\t\trect.y = 50;\n\t\trect.graphics.drawRect(\"#FF00FF\",1,[0,0,20,20],true,\"#FF00FF\");\n\t\taddChild(rect);\n\t\ttween = LTweenLite.to(rect,1,{x:500,loop:true,ease:LEasing.Sine.easeInOut})\n\t\t.to(rect,1,{x:50,ease:LEasing.Quad.easeInOut});\n\t\tvar stopButton = new LButtonSample1(\"stop\");\n\t\tstopButton.x = 50;\n\t\tcircle.y = 50;\n\t\tstopButton.y = 100;\n\t\taddChild(stopButton);\n\t\tstopButton.addEventListener(LMouseEvent.MOUSE_UP,stopTween);\n\t}\n\tfunction stopTween(e){\n\t\tLTweenLite.remove(tween);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LTweenLite/remove.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.8.0",
            "class": "LTweenLite"
        },
        {
            "file": "transitions/LTweenLite.js",
            "line": 391,
            "description": "［静态方法］停止所有正在进行的缓动动画。",
            "itemtype": "method",
            "name": "LTweenLite.removeAll",
            "static": 1,
            "example": [
                "\n\tLInit(1000/50,\"legend\",800,450,main);\n\tfunction main(){\n\t\tLGlobal.setDebug(true);\n\t\tvar circle = new LSprite();\n\t\tcircle.x = 50;\n\t\tcircle.y = 50;\n\t\tcircle.graphics.drawArc(\"#FF0000\",1,[0,0,20,0,Math.PI*2],true,\"#FF0000\");\n\t\taddChild(circle);\n\t\tvar rect = new LSprite();\n\t\trect.x = 50;\n\t\trect.y = 50;\n\t\trect.graphics.drawRect(\"#FF00FF\",1,[0,0,20,20],true,\"#FF00FF\");\n\t\taddChild(rect);\n\t\tLTweenLite.to(circle,1,{x:500,y:400,scaleX:3,scaleY:3,loop:true,ease:LEasing.Strong.easeInOut})\n\t\t.to(circle,1,{x:700,y:50,scaleX:1,scaleY:1,ease:LEasing.Quint.easeIn})\n\t\t.to(circle,1,{x:50,y:50,ease:LEasing.Quint.easeIn});\n\t\tLTweenLite.to(rect,1,{x:500,loop:true,ease:LEasing.Sine.easeInOut})\n\t\t.to(rect,1,{x:50,ease:LEasing.Quad.easeInOut});\n\t\tvar stopButton = new LButtonSample1(\"stopAll\");\n\t\tstopButton.x = 50;\n\t\tcircle.y = 50;\n\t\tstopButton.y = 100;\n\t\taddChild(stopButton);\n\t\tstopButton.addEventListener(LMouseEvent.MOUSE_UP,stopTween);\n\t}\n\tfunction stopTween(e){\n\t\tLTweenLite.removeAll();\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LTweenLite/removeAll.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.8.0",
            "class": "LTweenLite"
        },
        {
            "file": "transitions/LTweenLite.js",
            "line": 431,
            "description": "［静态方法］暂停所有正在进行的缓动动画。",
            "itemtype": "method",
            "name": "LTweenLite.pauseAll",
            "static": 1,
            "example": [
                "\n\tLTweenLite.pauseAll();"
            ],
            "examplelink": "<p><a href=\"../../../api/LTweenLite/pauseAll_resumeAll.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.8.0",
            "class": "LTweenLite"
        },
        {
            "file": "transitions/LTweenLite.js",
            "line": 446,
            "description": "［静态方法］重新播放被暂停的所有缓动动画。",
            "itemtype": "method",
            "name": "LTweenLite.resumeAll",
            "static": 1,
            "example": [
                "\n\tLTweenLite.pauseAll();\n\tLTweenLite.resumeAll();"
            ],
            "examplelink": "<p><a href=\"../../../api/LTweenLite/pauseAll_resumeAll.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.8.0",
            "class": "LTweenLite"
        },
        {
            "file": "ui/LMultitouch.js",
            "line": 72,
            "description": "标识用于触摸和手势事件处理的多点触控模式。要设置此属性，请使用 LMultitouchInputMode 类中的值。",
            "itemtype": "property",
            "name": "inputMode",
            "type": "String",
            "default": "none",
            "since": "1.8.9",
            "access": "public",
            "tagname": "",
            "class": "LMultitouch"
        },
        {
            "file": "ui/LMultitouchInputMode.js",
            "line": 9,
            "description": "[静态] 指定将用户触摸启用触摸设备的所有行为解释为鼠标事件类型。",
            "itemtype": "property",
            "name": "NONE",
            "type": "String",
            "static": 1,
            "since": "1.8.9",
            "access": "public",
            "tagname": "",
            "class": "LMultitouchInputMode"
        },
        {
            "file": "ui/LMultitouchInputMode.js",
            "line": 19,
            "description": "[静态] 指定仅为基本触摸事件调度事件，如单个手指点击。",
            "itemtype": "property",
            "name": "TOUCH_POINT",
            "type": "String",
            "static": 1,
            "since": "1.8.9",
            "access": "public",
            "tagname": "",
            "class": "LMultitouchInputMode"
        },
        {
            "file": "utils/Function.js",
            "line": 182,
            "description": "您可以在测试环境下捕获来自 trace() 函数的输出并显示结果。如果 trace 语句中的任何参数包含 String 之外的数据类型，则 trace 函数将调用与该数据类型关联的 toString() 方法。例如，如果该参数是一个布尔值，则跟踪函数将调用 Boolean.toString() 并显示返回值。",
            "itemtype": "method",
            "name": "trace",
            "params": [
                {
                    "name": "expression",
                    "description": "要计算的表达式。expression 参数的值显示在\"输出\"面板中。",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\ttrace(\"debug text 1\", \"debug text 2\", \"debug text 3\");"
            ],
            "examplelink": "<p><a href=\"../../../api/GlobalFunctions/trace.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局函数"
        },
        {
            "file": "utils/Function.js",
            "line": 248,
            "description": "将一个 DisplayObject 子实例添加到Stage。",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "要添加的 DisplayObject 实例。",
                    "type": "LDisplayObject"
                }
            ],
            "example": [
                "\n\tvar backLayer = LSprite();\n\taddChild(backLayer);"
            ],
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局函数"
        },
        {
            "file": "utils/Function.js",
            "line": 261,
            "description": "从 Stage 实例的子列表中删除指定的 child DisplayObject 实例。",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": "要删除的 DisplayObject 实例。",
                    "type": "LDisplayObject"
                }
            ],
            "example": [
                "\n\tvar backLayer = LSprite();\n\taddChild(backLayer);\n\tremoveChild(backLayer);"
            ],
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局函数"
        },
        {
            "file": "utils/Function.js",
            "line": 275,
            "description": "引擎初始化函数。等同于 init。",
            "itemtype": "method",
            "name": "LInit",
            "params": [
                {
                    "name": "speed",
                    "description": "<p>游戏速度,每次页面刷新间隔（单位毫秒）, FPS = 1000 / speed。</p> <p style=\"color:#FF0000;\">*也可以直接将此参数设定为requestAnimationFrame，引擎会切换到requestAnimationFrame来循环刷新。</p>",
                    "type": "Float"
                },
                {
                    "name": "divid",
                    "description": "传入一个div的id，库件进行初始化的时候，会自动将canvas加入到此div内部。",
                    "type": "String"
                },
                {
                    "name": "width",
                    "description": "游戏界面宽。",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "游戏界面高。",
                    "type": "Int"
                },
                {
                    "name": "callback",
                    "description": "游戏初始化后，调用此函数。",
                    "type": "Function"
                },
                {
                    "name": "type",
                    "description": "<p style=\"color:#FF0000;\">*该参数在1.10.1之后已被删除，改为引擎内部自动判定。</p>当为null时，会先进行页面的onload操作，如果你的init函数调用是在onload之后，那么需要将此参数设为LEvent.INIT。",
                    "type": "String"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta charset=\"UTF-8\">\n\t<title>demo</title>\n\t</head>\n\t<body>\n\t<div id=\"mylegend\">loading……</div>\n\t<script type=\"text/javascript\" src=\"../lufylegend-x.x.x.min.js\"></script> \n\t<script>\n\tLInit(50,\"mylegend\",800,480,main);\n\t//window.onload = function(){LInit(50, \"mylegend\", 800, 480, main, LEvent.INIT);};\n\tfunction main(){\n\t\talert(\"Hello lufylegend!\");\n\t}\n\t</script>\n\t</body>\n\t</html>"
            ],
            "examplelink": "<p><a href=\"../../../api/GlobalFunctions/LInit.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局函数"
        },
        {
            "file": "utils/Function.js",
            "line": 346,
            "description": "等同于 LExtends",
            "itemtype": "method",
            "name": "base",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局函数"
        },
        {
            "file": "utils/Function.js",
            "line": 375,
            "description": "对象继承。等同于 base。",
            "itemtype": "method",
            "name": "LExtends",
            "params": [
                {
                    "name": "child",
                    "description": "子对象本身。",
                    "type": "Object"
                },
                {
                    "name": "parent",
                    "description": "父对象。",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "参数。",
                    "type": "Array"
                }
            ],
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction FatherClass(){\n\t\tthis.name = \"Father\";\n\t}\n\tFatherClass.prototype.getName = function(){\n\t\treturn this.name;\n\t};\n\tfunction ChildClass(){\n\t\tLExtends(this,FatherClass,[]);\n\t\tthis.name = \"Child\";\n\t}\n\tfunction main () {\n\t\tLGlobal.setDebug(true);\n\t\tvar father = new FatherClass();\n\t\tvar child = new ChildClass();\n\t\ttrace(\"father.getName() = \" + father.getName()); //father.getName() = Father\n\t\ttrace(\"child.getName() = \" + child.getName());//child.getName() = Child\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/GlobalFunctions/LExtends.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局函数"
        },
        {
            "file": "utils/Function.js",
            "line": 405,
            "description": "返回自引擎初始化开始播放时起已经过的毫秒数。",
            "itemtype": "method",
            "name": "getTimer",
            "return": {
                "description": "自引擎初始化开始播放时起已经过的毫秒数。",
                "type": "Float"
            },
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局函数"
        },
        {
            "file": "utils/LConstant.js",
            "line": 6,
            "description": "用来和LGlobal.os的值做比较，判断用户的环境为PC。",
            "itemtype": "property",
            "name": "OS_PC",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局变量"
        },
        {
            "file": "utils/LConstant.js",
            "line": 13,
            "description": "用来和LGlobal.os的值做比较，判断用户的环境为iPhone。",
            "itemtype": "property",
            "name": "OS_IPHONE",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局变量"
        },
        {
            "file": "utils/LConstant.js",
            "line": 20,
            "description": "用来和LGlobal.os的值做比较，判断用户的环境为iPod。",
            "itemtype": "property",
            "name": "OS_IPOD",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局变量"
        },
        {
            "file": "utils/LConstant.js",
            "line": 27,
            "description": "用来和LGlobal.os的值做比较，判断用户的环境为iPad。",
            "itemtype": "property",
            "name": "OS_IPAD",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局变量"
        },
        {
            "file": "utils/LConstant.js",
            "line": 34,
            "description": "用来和LGlobal.os的值做比较，判断用户的环境为Android。",
            "itemtype": "property",
            "name": "OS_ANDROID",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局变量"
        },
        {
            "file": "utils/LConstant.js",
            "line": 41,
            "description": "用来和LGlobal.os的值做比较，判断用户的环境为Windows Phone。",
            "itemtype": "property",
            "name": "OS_WINDOWS_PHONE",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局变量"
        },
        {
            "file": "utils/LConstant.js",
            "line": 48,
            "description": "用来和LGlobal.os的值做比较，判断用户的环境为BlackBerry。",
            "itemtype": "property",
            "name": "OS_BLACK_BERRY",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局变量"
        },
        {
            "file": "utils/LConstant.js",
            "line": 55,
            "description": "表示字符串\"none\"。",
            "itemtype": "property",
            "name": "NONE",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局变量"
        },
        {
            "file": "utils/LConstant.js",
            "line": 62,
            "description": "表示字符串\"undefined\"。",
            "itemtype": "property",
            "name": "UNDEFINED",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局变量"
        },
        {
            "file": "utils/LConstant.js",
            "line": 69,
            "description": "用来设定LGlobal.aspectRatio值，表示限制纵向显示，即只能横向显示。",
            "itemtype": "property",
            "name": "LANDSCAPE",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局变量"
        },
        {
            "file": "utils/LConstant.js",
            "line": 76,
            "description": "用来设定LGlobal.aspectRatio值，表示限制横向显示，即只能纵向显示。",
            "itemtype": "property",
            "name": "PORTRAIT",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局变量"
        },
        {
            "file": "utils/LConstant.js",
            "line": 83,
            "description": "鼠标相对于canvas舞台左上角坐标x。",
            "itemtype": "property",
            "name": "mouseX",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局变量"
        },
        {
            "file": "utils/LConstant.js",
            "line": 90,
            "description": "鼠标相对于canvas舞台左上角坐标y。",
            "itemtype": "property",
            "name": "mouseY",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "全局变量"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 11,
            "description": "<p>[静态] 定义全屏的属性值。</p>\n<p>用法请参照LGlobal.screen函数</p>",
            "itemtype": "property",
            "name": "FULL_SCREEN",
            "type": "String",
            "static": 1,
            "since": "1.6.0",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 23,
            "description": "<p>将舞台设置成使用指定长宽比的方向。可以设置为下列值</p>\n<p>LANDSCAPE、PORTRAIT。</p>",
            "itemtype": "property",
            "name": "LGlobal.aspectRatio",
            "type": "String",
            "static": 1,
            "since": "1.8.1",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 33,
            "description": "<p>canvas 标签。</p>",
            "itemtype": "property",
            "name": "LGlobal.canvasObj",
            "type": "HTML elements",
            "static": 1,
            "since": "1.8.1",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 42,
            "description": "<p>context 对象。</p>",
            "itemtype": "property",
            "name": "LGlobal.canvas",
            "type": "CanvasRenderingContext2D",
            "static": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 51,
            "description": "<p>当设备支持Web Audio Api的时候，是否使用Web Audio Api来播放音频。</p>",
            "itemtype": "property",
            "name": "LGlobal.webAudio",
            "type": "Boolean",
            "static": 1,
            "default": "true",
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 62,
            "description": "<p>一个LSprite对象，所有的DisplayObject对象的最底层。</p>\n<p>除非做功能扩展，否则不推荐直接将对象加载到LGlobal.stage上。</p>",
            "itemtype": "property",
            "name": "LGlobal.stage",
            "type": "LSprite",
            "static": 1,
            "since": "1.3.1",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 72,
            "description": "<p>游戏初始化时设定的画面的宽，即canvas的宽。</p>",
            "itemtype": "property",
            "name": "LGlobal.width",
            "type": "int",
            "static": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 81,
            "description": "<p>游戏初始化时设定的画面的高，即canvas的高。</p>",
            "itemtype": "property",
            "name": "LGlobal.height",
            "type": "int",
            "static": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 93,
            "description": "<p>该方法将停止事件的传播，阻止它被分派到其他 Document 节点。</p>",
            "itemtype": "property",
            "name": "LGlobal.stopPropagation",
            "type": "Boolean",
            "static": 1,
            "since": "1.9.8",
            "access": "public",
            "tagname": "",
            "default": "false",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 103,
            "description": "<p>如果事件对象的cancelable属性为true,则该方法可以取消事件的默认动作.但并不取消事件的冒泡行为。移动网页中用来禁止滚屏，默认为true(禁止)，如果需要使用滚屏功能，则需要将其设置为fasle。</p>",
            "itemtype": "property",
            "name": "LGlobal.preventDefault",
            "type": "Boolean",
            "static": 1,
            "since": "1.3.1",
            "access": "public",
            "tagname": "",
            "default": "true",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 117,
            "description": "<p>一个 LStageScaleMode 类中指定要使用哪种缩放模式的值。</p>",
            "itemtype": "property",
            "name": "LGlobal.stageScale",
            "type": "String",
            "static": 1,
            "example": [
                "\n\tLInit(50, \"legend\", 240, 240, main);\n\tfunction main () {\n\t\tLGlobal.align = LStageAlign.BOTTOM_MIDDLE;\n\t\tLGlobal.stageScale = LStageScaleMode.SHOW_ALL;\n\t\tLSystem.screen(LStage.FULL_SCREEN);\n\t\tvar loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata); \n\t\tloader.load(\"face.jpg\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata (event) {\n\t\tvar bitmapdata = new LBitmapData(event.target);  \n\t\tvar bitmap = new LBitmap(bitmapdata);\n\t\taddChild(bitmap);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LGlobal/stageScale_align.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 142,
            "description": "<p>一个 LStageAlign 类中指定舞台在浏览器中的对齐方式的值。</p>",
            "itemtype": "property",
            "name": "LGlobal.align",
            "type": "String",
            "static": 1,
            "example": [
                "\n\tLInit(50, \"legend\", 240, 240, main);\n\tfunction main () {\n\t\tLGlobal.align = LStageAlign.BOTTOM_MIDDLE;\n\t\tLGlobal.stageScale = LStageScaleMode.SHOW_ALL;\n\t\tLSystem.screen(LStage.FULL_SCREEN);\n\t\tvar loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata); \n\t\tloader.load(\"face.jpg\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata (event) {\n\t\tvar bitmapdata = new LBitmapData(event.target);  \n\t\tvar bitmap = new LBitmap(bitmapdata);\n\t\taddChild(bitmap);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LGlobal/stageScale_align.html\" target=\"_blank\">测试链接</a></p>",
            "since": "1.8.6",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 167,
            "description": "<p>当前浏览器是否是移动浏览器。等同于 LGlobal.canTouch。</p>",
            "itemtype": "property",
            "name": "LGlobal.mobile",
            "type": "Boolean",
            "static": 1,
            "since": "1.9.0",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 176,
            "description": "<p>等同于 LGlobal.mobile。</p>",
            "itemtype": "property",
            "name": "LGlobal.canTouch",
            "type": "Boolean",
            "static": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 185,
            "description": "<p>当前浏览器环境。可以是下面中的一个</p>\n<p>OS_IPHONE，OS_IPOD，OS_IPAD，OS_ANDROID，OS_PC。</p>",
            "itemtype": "property",
            "name": "LGlobal.os",
            "type": "String",
            "static": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 195,
            "description": "<p>当前浏览器是否为IOS。</p>",
            "itemtype": "property",
            "name": "LGlobal.ios",
            "type": "Boolean",
            "static": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 204,
            "description": "<p>当前浏览器是否为Android。</p>",
            "itemtype": "property",
            "name": "LGlobal.android",
            "type": "Boolean",
            "static": 1,
            "since": "1.0.0",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 214,
            "description": "<p>游戏画面的背景颜色。</p>",
            "itemtype": "property",
            "name": "LGlobal.backgroundColor",
            "type": "String",
            "static": 1,
            "since": "1.7.7",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 223,
            "description": "<p>LDisplayObject对象从舞台上被移除的时候，是否将这个对象整个清空。</p>",
            "itemtype": "property",
            "name": "LGlobal.destroy",
            "type": "Boolean",
            "default": "true",
            "static": 1,
            "since": "1.7.7",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 233,
            "description": "<p>强制将画面彻底刷新，如果游戏中没有背景，有些手机上清空画面时偶尔会留下残影，如果遇到情况，可以在清空画面时将此属性设置为true来强制刷新画面一次。</p>",
            "itemtype": "property",
            "name": "LGlobal.forceRefresh",
            "type": "Boolean",
            "default": "false",
            "static": 1,
            "since": "1.9.1",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 245,
            "description": "<p>LDisplayObject对象从舞台上被移除的时候，是否将这个对象整个清空。</p>\n<p>如果游戏不是透明背景的话，可以将LGlobal.keepClear的值设置为false来提高游戏效率。</p>",
            "itemtype": "property",
            "name": "LGlobal.keepClear",
            "type": "Boolean",
            "default": "true",
            "static": 1,
            "since": "1.8.7",
            "access": "public",
            "tagname": "",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 297,
            "description": "<p>设定是否开启测试模式。</p>\n<p>＊当游戏发布的时候，必须关闭测试模式。</p>",
            "itemtype": "method",
            "name": "setDebug",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "是否开启测试模式",
                    "type": "Boolean"
                }
            ],
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tLGlobal.setDebug(true);\n\t\ttrace(\"test01\", \"test02\", \"test03\");\n\t}\t"
            ],
            "examplelink": "<p><a href=\"../../../api/LGlobal/setDebug.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.4.0",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 778,
            "description": "<p>将传入的一组对象绘制到指定的CanvasRenderingContext2D对象上。</p>\n<p>※该方法每调用一次，只绘制一次。</p>",
            "itemtype": "method",
            "name": "show",
            "static": 1,
            "params": [
                {
                    "name": "list",
                    "description": "要绘制的对象数组，数组中的对象必须是LDisplayObject对象",
                    "type": "Array"
                },
                {
                    "name": "context2D",
                    "description": "通过canvas.getContext(\"2d\")得到的对象",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "example": [
                "\n\tLInit(1000/60, \"legend\", 240, 240, main);\n\tvar myCanvas=document.getElementById(\"myCanvas\");\n\tvar ctx=myCanvas.getContext(\"2d\");\n\tfunction main () {\n\t\tvar loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata); \n\t\tloader.load(\"face.jpg\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata(event){\n\t\tvar bitmapdata = new LBitmapData(event.target); \n\t\tvar bitmap = new LBitmap(bitmapdata);\n\t\taddChild(bitmap);\n\t\tLGlobal.show([bitmap], ctx);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LGlobal/show.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.10.0",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 817,
            "description": "<p>将传入的宽和高，按照行数和列数进行拆分计算，会得到一个2维数组。</p>",
            "itemtype": "method",
            "name": "divideCoordinate",
            "static": 1,
            "params": [
                {
                    "name": "width",
                    "description": "宽",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "高",
                    "type": "Float"
                },
                {
                    "name": "row",
                    "description": "行数",
                    "type": "Int"
                },
                {
                    "name": "col",
                    "description": "列数",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "2维数组",
                "type": "Array"
            },
            "example": [
                "\n\tLInit(50, \"legend\", 800, 480, main);\n\tfunction main () {\n\t\tvar loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata); \n\t\tloader.load(\"player.png\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata(event){\n\t\tvar backLayer = new LSprite();\n\t\taddChild(backLayer);\n\t\tvar list = LGlobal.divideCoordinate(480,630,3,4);\n\t\tvar data = new LBitmapData(event.target,0,0,120,210);\n\t\tplayer = new LAnimation(backLayer,data,list);\n\t\tbackLayer.addEventListener(LEvent.ENTER_FRAME,onframe);\n\t}\n\tfunction onframe(){\n\t\tplayer.onframe();\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LGlobal/divideCoordinate.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.3.1",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 869,
            "description": "<p>检测点是否在多边形内部</p>",
            "itemtype": "method",
            "name": "hitPolygon",
            "static": 1,
            "params": [
                {
                    "name": "vertices",
                    "description": "多边形的顶点数组[[x1,y1],[x2,y2],[x3,y3],......]",
                    "type": "Array"
                },
                {
                    "name": "x",
                    "description": "coordinate-x of point",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "coordinate-y of point",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "当たったらtrueを返す",
                "type": "Boolean"
            },
            "example": [
                "\n\tLGlobal.setDebug(true);\n\tvar layer = new LSprite();\n\taddChild(layer);\n\tvar vertices = [[50,100],[150,50],[100,150]];\n\tlayer.graphics.drawVertices(1,\"#000000\",vertices);\n\tvar point1 = [100,100];\n\tlayer.graphics.drawArc(1,\"#000000\",[point1[0],point1[1],2,0,2*Math.PI]);\n\tvar point2 = [50,200];\n\tlayer.graphics.drawArc(1,\"#000000\",[point2[0],point2[1],2,0,2*Math.PI]);\n\ttrace(LGlobal.hitPolygon(vertices,point1[0],point1[1]));//out:true\n\ttrace(LGlobal.hitPolygon(vertices,point2[0],point2[1]));//out:false"
            ],
            "examplelink": "<p><a href=\"../../../api/LGlobal/hitPolygon.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.8.9",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 916,
            "description": "<p>检测多边形与多边形的碰撞</p>",
            "itemtype": "method",
            "name": "hitTestPolygon",
            "static": 1,
            "params": [
                {
                    "name": "verticesA",
                    "description": "多边形A的顶点数组[[x1,y1],[x2,y2],[x3,y3],......]",
                    "type": "Array"
                },
                {
                    "name": "verticesB",
                    "description": "多边形B的顶点数组[[x1,y1],[x2,y2],[x3,y3],......]",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "当たったらtrueを返す",
                "type": "Boolean"
            },
            "example": [
                "\n\tLGlobal.setDebug(true);\n\tvar layer = new LSprite();\n\taddChild(layer);\n\tvar vertices = [[50,100],[150,50],[100,150]];\n\tlayer.graphics.drawVertices(1,\"#000000\",vertices);\n\tvar vertices1 = [[120,60],[250,150],[100,100]];\n\tlayer.graphics.drawVertices(1,\"#000000\",vertices1);\n\tvar vertices2 = [[70,200],[100,160],[200,300]];\n\tlayer.graphics.drawVertices(1,\"#000000\",vertices2);\n\ttrace(LGlobal.hitTestPolygon(vertices,vertices1));//out:true\n\ttrace(LGlobal.hitTestPolygon(vertices,vertices2));//out:false"
            ],
            "examplelink": "<p><a href=\"../../../api/LGlobal/hitTestPolygon.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.9.0",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 963,
            "description": "<p>检测一个多边形和一个圆的碰撞</p>",
            "itemtype": "method",
            "name": "hitTestPolygonArc",
            "static": 1,
            "params": [
                {
                    "name": "vertices",
                    "description": "多边形的顶点数组[[x1,y1],[x2,y2],[x3,y3],......]",
                    "type": "Array"
                },
                {
                    "name": "circle",
                    "description": "圆[中心坐标x,中心坐标y,半径,半径*半径]",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "当たったらtrueを返す",
                "type": "Boolean"
            },
            "example": [
                "\n\tLGlobal.setDebug(true);\n\tvar layer = new LSprite();\n\taddChild(layer);\n\tvar vertices = [[50,100],[150,50],[100,150]];\n\tlayer.graphics.drawVertices(1,\"#000000\",vertices);\n\tvar circle1 = [170,100,50,2500];\n\tlayer.graphics.drawArc(1,\"#000000\",[circle1[0],circle1[1],circle1[2],0,2*Math.PI]);\n\tvar circle2 = [50,200,50,2500];\n\tlayer.graphics.drawArc(1,\"#000000\",[circle2[0],circle2[1],circle2[2],0,2*Math.PI]);\n\ttrace(LGlobal.hitTestPolygonArc(vertices,circle1));//out:true\n\ttrace(LGlobal.hitTestPolygonArc(vertices,circle2));//out:false"
            ],
            "examplelink": "<p><a href=\"../../../api/LGlobal/hitTestPolygonArc.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.9.0",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 1010,
            "description": "<p>将两个对象看作圆来检测碰撞</p>\n<p>如果对象发生旋转，则不能使用此方法进行碰撞检测，请使用LSprite类的hitTestObject</p>",
            "itemtype": "method",
            "name": "hitTestArc",
            "static": 1,
            "params": [
                {
                    "name": "objA",
                    "description": "对象A",
                    "type": "LDisplayObject"
                },
                {
                    "name": "objB",
                    "description": "对象B",
                    "type": "LDisplayObject"
                },
                {
                    "name": "objAR",
                    "description": "新的半径",
                    "type": "Float"
                },
                {
                    "name": "objBR",
                    "description": "新的半径",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "当たったらtrueを返す",
                "type": "Boolean"
            },
            "example": [
                "\n\tLGlobal.setDebug(true);\n\tvar arcLayer1 = new LSprite();\n\tarcLayer1.graphics.drawArc(1,\"#000000\",[100,100,100,0,2*Math.PI]);\n\taddChild(arcLayer1);\n\tvar arcLayer2 = new LSprite();\n\tarcLayer2.alpha = 0.5;\n\tarcLayer2.x = 150;\n\tarcLayer2.graphics.drawArc(1,\"#000000\",[100,100,100,0,2*Math.PI]);\n\taddChild(arcLayer2);\n\tvar arcLayer3 = new LSprite();\n\tarcLayer3.alpha = 0.5;\n\tarcLayer3.x = 300;\n\tarcLayer3.graphics.drawArc(1,\"#000000\",[100,100,100,0,2*Math.PI]);\n\taddChild(arcLayer3);\n\t//[100,100,100,0,2*Math.PI] vs [100,100,100,0,2*Math.PI]\n\ttrace(LGlobal.hitTestArc(arcLayer1,arcLayer2));//out:true\n\t//[115,115,70,0,2*Math.PI] vs [115,115,70,0,2*Math.PI]\n\ttrace(LGlobal.hitTestArc(arcLayer2,arcLayer3,70,70));//out:false"
            ],
            "examplelink": "<p><a href=\"../../../api/LGlobal/hitTestArc.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.4.1",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 1064,
            "description": "<p>将两个对象看作矩形来检测碰撞，等同于 hitTest。</p>\n<p>如果对象发生旋转，则不能使用此方法进行碰撞检测，请使用LSprite类的hitTestObject</p>",
            "itemtype": "method",
            "name": "hitTestRect",
            "static": 1,
            "params": [
                {
                    "name": "objA",
                    "description": "对象A",
                    "type": "LDisplayObject"
                },
                {
                    "name": "objB",
                    "description": "对象B",
                    "type": "LDisplayObject"
                },
                {
                    "name": "vecA",
                    "description": "重新设置对象A的矩形范围 [width,height]",
                    "type": "Array"
                },
                {
                    "name": "vecB",
                    "description": "重新设置对象B的矩形范围 [width,height]",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "如果碰撞则返回true。",
                "type": "Boolean"
            },
            "example": [
                "\n\tLGlobal.setDebug(true);\n\tvar rectLayer1 = new LSprite();\n\trectLayer1.graphics.drawRect(1,\"#000000\",[0,0,200,200],true,\"#FF0000\");\n\taddChild(rectLayer1);\n\tvar rectLayer2 = new LSprite();\n\trectLayer2.alpha = 0.5;\n\trectLayer2.x = 150;\n\trectLayer2.graphics.drawRect(1,\"#000000\",[0,0,200,200],true,\"#00FF00\");\n\taddChild(rectLayer2);\n\tvar rectLayer3 = new LSprite();\n\trectLayer3.alpha = 0.5;\n\trectLayer3.x = 300;\n\trectLayer3.graphics.drawRect(1,\"#000000\",[0,0,200,200],true,\"#0000FF\");\n\taddChild(rectLayer3);\n\t//[0,0,200,200] vs [0,0,200,200]\n\ttrace(LGlobal.hitTestRect(rectLayer1,rectLayer2));//out:true\n\t//[30,0,140,200] vs [30,0,140,200]\n\ttrace(LGlobal.hitTestRect(rectLayer2,rectLayer3,[140,200],[140,200]));//out:false"
            ],
            "examplelink": "<p><a href=\"../../../api/LGlobal/hitTestRect.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.4.1",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 1125,
            "description": "重新设定游戏速度",
            "itemtype": "method",
            "name": "setFrameRate",
            "static": 1,
            "params": [
                {
                    "name": "speed",
                    "description": "游戏速度,每次页面刷新间隔（单位毫秒）, FPS = 1000 / speed。",
                    "type": "Int"
                }
            ],
            "example": [
                "\n\tLGlobal.setFrameRate(1000/60);"
            ],
            "examplelink": "<p><a href=\"../../../api/LGlobal/setFrameRate.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.5.0",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 1159,
            "description": "将画面设置为指定大小",
            "itemtype": "method",
            "name": "resize",
            "static": 1,
            "params": [
                {
                    "name": "width",
                    "description": "指定宽度",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "指定高度",
                    "type": "Float"
                }
            ],
            "example": [
                "\n\tLInit(1000/60, \"legend\", 240, 240, main);\n\tfunction main () {\n\t\tLGlobal.resize(400,100);\n\t\tvar loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata); \n\t\tloader.load(\"face.jpg\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata (event) {\n\t\tvar bitmapdata = new LBitmapData(event.target);  \n\t\tvar bitmap = new LBitmap(bitmapdata);\n\t\taddChild(bitmap);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LGlobal/resize.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.9.0",
            "class": "LGlobal"
        },
        {
            "file": "utils/LGlobal.js",
            "line": 1265,
            "description": "全画面显示或者设定画面大小的缩放比例值",
            "itemtype": "method",
            "name": "screen",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "全画面的静态值LGlobal.FULL_SCREEN 或者 画面大小的缩放比例值",
                    "type": "String | float"
                }
            ],
            "example": [
                "\n\tLInit(1000/60, \"legend\", 240, 240, main);\n\tfunction main () {\n\t\tLGlobal.stageScale = LStageScaleMode.SHOW_ALL;\n\t\tLGlobal.screen(LStage.FULL_SCREEN);\n\t\t//you can also use it like : LGlobal.screen(1.5);\n\t\tvar loader = new LLoader();\n\t\tloader.addEventListener(LEvent.COMPLETE, loadBitmapdata); \n\t\tloader.load(\"face.jpg\", \"bitmapData\");\n\t}\n\tfunction loadBitmapdata (event) {\n\t\tvar bitmapdata = new LBitmapData(event.target);  \n\t\tvar bitmap = new LBitmap(bitmapdata);\n\t\taddChild(bitmap);\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LGlobal/screen.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.6.0",
            "class": "LGlobal"
        },
        {
            "file": "utils/LObject.js",
            "line": 11,
            "description": "对象的ID",
            "itemtype": "property",
            "name": "objectIndex",
            "type": "int",
            "since": "1.6.0",
            "access": "public",
            "tagname": "",
            "class": "LObject"
        },
        {
            "file": "utils/LObject.js",
            "line": 22,
            "description": "调用父类的函数。",
            "itemtype": "method",
            "name": "callParent",
            "params": [
                {
                    "name": "functionName",
                    "description": "函数名",
                    "type": "String"
                },
                {
                    "name": "arguments",
                    "description": "固定值arguments",
                    "type": "Array"
                }
            ],
            "example": [
                "\n\tfunction funA(){\n\t\tLExtends(this,LObject,[]);\n\t}\n\tfunA.prototype.myName = function(){\n\t\treturn \"AAA\";\n\t}\n\tfunction funB(){\n\t\tLExtends(this,funA,[]);\n\t}\n\tfunB.prototype.myName = function(){\n\t\treturn \"BBB\";\n\t}\n\tfunction funC(){\n\t\tLExtends(this,funA,[]);\n\t}\n\tfunC.prototype.myName = function(){\n\t\treturn this.callParent(\"myName\",arguments);\n\t}\n\tLInit(1000/50,\"legend\",800,150,main);\n\tfunction main(){\n\t\tLGlobal.setDebug(true);\n\t\tvar objB = new funB();\n\t\ttrace(objB.myName());//BBB\n\t\tvar objC = new funC();\n\t\ttrace(objC.myName());//AAA\n\t}"
            ],
            "examplelink": "<p><a href=\"../../../api/LObject/callParent.html\" target=\"_blank\">测试链接</a></p>",
            "access": "public",
            "tagname": "",
            "since": "1.6.0",
            "class": "LObject"
        },
        {
            "file": "utils/LTimer.js",
            "line": 29,
            "description": "<p>计时器事件间的延迟（以毫秒为单位）。如果在计时器正在运行时设置延迟间隔，则计时器将按相同的 repeatCount 迭代重新启动。</p>\n<p>注意：建议 delay 不要低于 20 毫秒。计时器频率不得超过 60 帧/秒，这意味着低于 16.6 毫秒的延迟可导致出现运行时问题。</p>",
            "itemtype": "property",
            "name": "delay",
            "type": "int",
            "since": "1.9.11",
            "access": "public",
            "tagname": "",
            "class": "LTimer"
        },
        {
            "file": "utils/LTimer.js",
            "line": 38,
            "description": "<p>设置的计时器运行总次数。如果重复计数设置为 0，则计时器将持续不断运行，最长可运行 24.86 天，或直至调用了 stop() 方法或节目停止。如果重复计数不为 0，则将运行计时器，运行次数为指定的次数。如果设置的 repeatCount 总数等于或小于 currentCount，则计时器将停止并且不会再次触发。</p>",
            "itemtype": "property",
            "name": "repeatCount",
            "type": "int",
            "since": "1.9.11",
            "access": "public",
            "tagname": "",
            "class": "LTimer"
        },
        {
            "file": "utils/LTimer.js",
            "line": 46,
            "description": "<p>计时器的当前状态；如果计时器正在运行，则为 true，否则为 false。</p>",
            "itemtype": "property",
            "name": "running",
            "type": "Boolean",
            "since": "1.9.11",
            "access": "public",
            "tagname": "",
            "class": "LTimer"
        },
        {
            "file": "utils/LTimer.js",
            "line": 54,
            "description": "<p>计时器从 0 开始后触发的总次数。如果已重置了计时器，则只会计入重置后的触发次数。</p>",
            "itemtype": "property",
            "name": "currentCount",
            "type": "int",
            "since": "1.9.11",
            "access": "public",
            "tagname": "",
            "class": "LTimer"
        },
        {
            "file": "utils/LTimer.js",
            "line": 95,
            "description": "如果计时器尚未运行，则启动计时器。",
            "itemtype": "method",
            "name": "start",
            "since": "1.9.11",
            "access": "public",
            "tagname": "",
            "class": "LTimer"
        },
        {
            "file": "utils/LTimer.js",
            "line": 104,
            "description": "停止计时器。如果在调用 stop() 后调用 start()，则将继续运行计时器实例，运行次数为剩余的 重复次数（由 repeatCount 属性设置）。",
            "itemtype": "method",
            "name": "stop",
            "since": "1.9.11",
            "access": "public",
            "tagname": "",
            "class": "LTimer"
        },
        {
            "file": "utils/LTimer.js",
            "line": 113,
            "description": "如果计时器正在运行，则停止计时器，并将 currentCount 属性设回为 0，这类似于秒表的重置按钮。然后，在调用 start() 后，将运行计时器实例，运行次数为指定的重复次数（由 repeatCount 值设置）。",
            "itemtype": "method",
            "name": "reset",
            "since": "1.9.11",
            "access": "public",
            "tagname": "",
            "class": "LTimer"
        },
        {
            "file": "utils/LTimer.js",
            "line": 125,
            "description": "释放计时器，计时器释放后将不可以再次使用。",
            "itemtype": "method",
            "name": "destroy",
            "since": "1.9.11",
            "access": "public",
            "tagname": "",
            "class": "LTimer"
        },
        {
            "file": "utils/LTimer.js",
            "line": 157,
            "description": "每当 LTimer 对象达到根据 LTimer.delay 属性指定的间隔时调度。\n<p><a href=\"LTimerEvent.html#property_TIMER\">LTimerEvent.TIMER</a></p>",
            "itemtype": "event",
            "name": "LTimerEvent.TIMER",
            "class": "LTimer"
        },
        {
            "file": "utils/LTimer.js",
            "line": 162,
            "description": "每当它完成 LTimer.repeatCount 设置的请求数后调度。\n<p><a href=\"LTimerEvent.html#property_TIMER_COMPLETE\">LTimerEvent.TIMER_COMPLETE</a></p>",
            "itemtype": "event",
            "name": "LTimerEvent.TIMER_COMPLETE",
            "class": "LTimer"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: examplelink",
            "line": " display/FPS.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LAnimation.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LAnimation.js:75"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LAnimation.js:141"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LAnimation.js:174"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LAnimation.js:255"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LAnimationTimeline.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LAnimationTimeline.js:58"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LAnimationTimeline.js:96"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LAnimationTimeline.js:171"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LAnimationTimeline.js:203"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LAnimationTimeline.js:225"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LAnimationTimeline.js:247"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LAnimationTimeline.js:273"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LAnimationTimeline.js:299"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LAnimationTimeline.js:333"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LBitmap.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LBitmap.js:97"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LBitmap.js:137"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LBitmap.js:167"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LBitmapData.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LBitmapData.js:182"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LBitmapData.js:211"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LBitmapData.js:236"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LBitmapData.js:269"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LBitmapData.js:287"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LBitmapData.js:344"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LBitmapData.js:409"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LBitmapData.js:446"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LBitmapData.js:510"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LBitmapData.js:566"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LBitmapData.js:648"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LBitmapData.js:690"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LBlendMode.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LButton.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LButton.js:59"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LButton.js:85"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LButton.js:137"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LDisplayObject.js:55"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LDisplayObject.js:83"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LDisplayObject.js:125"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LDisplayObject.js:318"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LDisplayObject.js:353"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LDisplayObject.js:383"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LDisplayObject.js:407"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LDisplayObjectContainer.js:23"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LDisplayObjectContainer.js:46"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LDisplayObjectContainer.js:77"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LDisplayObjectContainer.js:107"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LDisplayObjectContainer.js:145"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LDisplayObjectContainer.js:183"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LDisplayObjectContainer.js:211"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LDisplayObjectContainer.js:243"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LDisplayObjectContainer.js:279"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LDisplayObjectContainer.js:310"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:57"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:90"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:114"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:141"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:163"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:184"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:211"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:233"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:256"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:279"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:302"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:322"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:341"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:366"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:392"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:412"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:449"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:509"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:561"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:608"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:663"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:718"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:871"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LGraphics.js:899"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LInteractiveObject.js:14"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LLoader.js:16"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LShape.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LShape.js:31"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LShape.js:56"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LShape.js:87"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LShape.js:136"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LSprite.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LSprite.js:36"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LSprite.js:51"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LSprite.js:91"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LSprite.js:141"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LSprite.js:180"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LSprite.js:225"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LSprite.js:277"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LSprite.js:350"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LSprite.js:470"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LSprite.js:531"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LSprite.js:604"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LSprite.js:679"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LStageAlign.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " display/LStageScaleMode.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " events/LEvent.js:95"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " events/LEvent.js:131"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " events/LEvent.js:158"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " events/LEvent.js:214"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " events/LEvent.js:224"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " events/LEvent.js:234"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " events/LEvent.js:244"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " events/LEventDispatcher.js:59"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " events/LFocusEvent.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " events/LKeyboardEvent.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " events/LMouseEvent.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " events/LMouseEventContainer.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " events/LMouseEventContainer.js:47"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " events/LMouseEventContainer.js:420"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " events/LTextEvent.js:9"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " events/LTextEvent.js:42"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " events/LTimerEvent.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " filters/LColorMatrixFilter.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " filters/LConvolutionFilter.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " filters/LDropShadowFilter.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LButtonSample-0.1.0.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LButtonSample-0.1.0.js:140"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LCheckBox-0.1.0.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LCheckBox-0.1.1.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LComboBox-0.1.0.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LComboBox-0.1.1.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LComboBox-0.1.2.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.0.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.0.js:116"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.0.js:131"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.0.js:243"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.0.js:260"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.0.js:356"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.0.js:423"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.0.js:439"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.0.js:467"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.1.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.1.js:54"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.1.js:64"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.1.js:74"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.1.js:88"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.1.js:121"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.1.js:136"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.1.js:285"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.1.js:302"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.1.js:406"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.1.js:473"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.1.js:489"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LListView-0.1.1.js:549"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LMenubar-0.1.0.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LMenubar-0.1.1.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LMessageBox-0.1.0.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LMessageBox-0.1.1.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LPanel-0.1.0.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LPanel-0.1.1.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LPanel-0.1.2.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LRadio-0.1.0.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LRadio-0.1.0.js:62"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LRange-0.1.0.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LRange-0.1.0.js:13"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LRange-0.1.1.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LRange-0.1.1.js:13"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LScrollbar-0.1.0.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LScrollbar-0.1.1.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LScrollbar-0.1.2.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LScrollbar-0.1.4.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LTable-0.1.0.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LTreeWidget-0.1.0.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LWindow-0.1.0.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LWindow-0.1.1.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/ui/LWindow-0.1.2.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/InteractivePNG-0.1.0.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/LFlash-0.1.0.js:11"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/LTransitionManager-0.1.0.js:768"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/LTransitionManager-0.1.0.js:786"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/LTransitionManager-0.1.0.js:813"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/LTransitionManager-0.1.1.js:771"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/LTransitionManager-0.1.1.js:789"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " lib/LTransitionManager-0.1.1.js:816"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " media/LSound.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " media/LSound.js:40"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " media/LStageWebView.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " media/LVideo.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " net/LAjax.js:66"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " net/LAjax.js:93"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " net/LURLLoader.js:20"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " system/LLoadManage.js:16"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " system/LLoadManage.js:219"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LStyleSheet.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LStyleSheet.js:44"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:39"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:70"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:89"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:106"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:123"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:140"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:189"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:235"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:262"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:522"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:545"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:567"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:625"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:669"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:714"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:805"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:866"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " text/LTextField.js:896"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " transitions/LEasing.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " transitions/LTweenLite.js:85"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " transitions/LTweenLite.js:99"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " transitions/LTweenLite.js:249"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " transitions/LTweenLite.js:288"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " transitions/LTweenLite.js:348"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " transitions/LTweenLite.js:391"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " transitions/LTweenLite.js:431"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " transitions/LTweenLite.js:446"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " ui/LMultitouch.js:1"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " utils/Function.js:182"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " utils/Function.js:275"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " utils/Function.js:375"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " utils/LGlobal.js:117"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " utils/LGlobal.js:142"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " utils/LGlobal.js:297"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " utils/LGlobal.js:778"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " utils/LGlobal.js:817"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " utils/LGlobal.js:869"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " utils/LGlobal.js:916"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " utils/LGlobal.js:963"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " utils/LGlobal.js:1010"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " utils/LGlobal.js:1064"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " utils/LGlobal.js:1125"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " utils/LGlobal.js:1159"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " utils/LGlobal.js:1265"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " utils/LObject.js:22"
        },
        {
            "message": "unknown tag: examplelink",
            "line": " utils/LTimer.js:1"
        }
    ]
}